{"version":3,"sources":["components/ScriptExplorer/styles.module.scss","../../unchained-wallets/lib/trezor.js","../../unchained-wallets/lib/ledger.js","../../unchained-wallets/lib/hermit.js","images/logo.png","utils/constants.js","utils/ExternalLink.jsx","utils/index.js","components/Disclaimer.jsx","components/Help.jsx","block_explorer.js","bitcoind.js","blockchain.js","utils/slices.js","selectors/wallet.js","actions/transactionActions.js","actions/errorNotificationActions.js","actions/walletActions.js","actions/braidActions.js","components/BitcoinIcon.jsx","components/EditableName.jsx","components/Wallet/WalletInfoCard.jsx","actions/settingsActions.js","components/NetworkPicker.jsx","components/QuorumPicker.jsx","components/AddressTypePicker.jsx","actions/utils.js","actions/clientActions.js","components/ClientPicker/PrivateClientSettings.jsx","components/ClientPicker/index.jsx","components/StartingAddressIndexPicker.jsx","components/Wallet/ConfirmWallet.jsx","proptypes/utils.js","proptypes/slice.js","proptypes/client.js","proptypes/settings.js","components/Copyable.jsx","components/ScriptExplorer/UTXOSet.jsx","components/MultisigDetails.jsx","components/ImportAddressesButton.jsx","actions/signatureImporterActions.js","components/ScriptExplorer/TextSignatureImporter.jsx","components/Hermit/HermitReader.jsx","components/Hermit/HermitDisplayer.jsx","components/InteractionMessages.jsx","components/ScriptExplorer/HermitSignatureImporter.jsx","components/ScriptExplorer/HardwareWalletSignatureImporter.jsx","components/ScriptExplorer/SignatureImporter.jsx","components/Wallet/ExtendedPublicKeySelector.jsx","components/Slices/ConfirmAddress.jsx","components/Slices/SliceDetails.jsx","components/Slices/SlicesTable.jsx","components/Wallet/WalletDeposit.jsx","components/Wallet/AddressExpander.jsx","components/Wallet/Node.jsx","components/Wallet/NodeSet.jsx","components/ScriptExplorer/OutputEntry.jsx","components/ScriptExplorer/OutputsForm.jsx","components/ScriptExplorer/Transaction.jsx","components/UnsignedTransaction.jsx","components/Wallet/WalletSign.jsx","components/Wallet/TransactionPreview.jsx","components/Wallet/WalletSpend.jsx","components/Slices/SlicesTableContainer.jsx","components/Wallet/WalletControl.jsx","components/Wallet/constants.js","components/Wallet/WalletConfigInteractionButtons.jsx","actions/extendedPublicKeyImporterActions.js","components/Wallet/WalletGenerator.jsx","components/Wallet/ExtendedPublicKeyExtendedPublicKeyImporter.jsx","components/Wallet/TextExtendedPublicKeyImporter.jsx","components/Wallet/HermitExtendedPublicKeyImporter.jsx","components/Wallet/HardwareWalletExtendedPublicKeyImporter.jsx","components/CreateAddress/Conflict.jsx","components/Wallet/ExtendedPublicKeyImporter.jsx","components/Wallet/WalletActionsPanel.jsx","components/Wallet/index.jsx","actions/publicKeyImporterActions.js","components/CreateAddress/AddressGenerator.jsx","components/CreateAddress/TextPublicKeyImporter.jsx","components/CreateAddress/ExtendedPublicKeyPublicKeyImporter.jsx","components/CreateAddress/HermitPublicKeyImporter.jsx","components/CreateAddress/HardwareWalletPublicKeyImporter.jsx","components/CreateAddress/PublicKeyImporter.jsx","components/CreateAddress/index.jsx","actions/testSuiteRunActions.js","actions/keystoreActions.js","actions/testRunActions.js","components/TestSuiteRun/Note.jsx","components/TestSuiteRun/KeystorePicker.jsx","tests/Test.js","components/TestSuiteRun/TestSuiteRunSummary.jsx","components/TestSuiteRun/TestRun.jsx","components/TestSuiteRun/Seed.jsx","components/TestSuiteRun/index.jsx","components/ScriptExplorer/ScriptEntry.jsx","actions/ownershipActions.js","components/ScriptExplorer/ConfirmOwnership.jsx","components/ScriptExplorer/index.jsx","components/Navbar.jsx","components/Footer.jsx","components/ErrorBoundary.jsx","components/ErrorNotification.jsx","components/App.jsx","components/AppContainer.jsx","registerServiceWorker.js","reducers/utils.js","reducers/settingsReducer.js","reducers/clientReducer.js","reducers/braidReducer.js","reducers/quorumReducer.js","reducers/addressReducer.js","reducers/walletReducer.js","reducers/ownershipReducer.js","reducers/signatureImportersReducer.js","reducers/transactionReducer.js","reducers/keystoreReducer.js","tests/publicKeys.jsx","tests/extendedPublicKeys.jsx","tests/signing.jsx","tests/trezor.js","tests/ledger.js","tests/hermit.js","tests/index.js","reducers/testSuiteRunReducer.js","reducers/errorNotificationReducer.js","reducers/index.js","index.jsx","../../unchained-wallets/lib/interaction.js","../../unchained-wallets/lib/index.js"],"names":["module","exports","Object","defineProperty","value","trezorCoin","TrezorConfirmMultisigAddress","TrezorSignMultisigTransaction","TrezorExportExtendedPublicKey","TrezorExportPublicKey","TrezorExportHDNode","TrezorGetMetadata","TrezorInteraction","TREZOR_PUSH_AND_HOLD_BUTTON","TREZOR_BOTH_BUTTONS","TREZOR_RIGHT_BUTTON","TREZOR_LEFT_BUTTON","TREZOR","require","obj","_ADDRESS_SCRIPT_TYPES","_bignumber","__esModule","_unchainedBitcoin","_interaction","_typeof","Symbol","iterator","constructor","prototype","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","length","err","_iterableToArrayLimit","TypeError","_nonIterableRest","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","Promise","then","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","configurable","writable","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","ReferenceError","_assertThisInitialized","_get","property","receiver","Reflect","get","base","hasOwnProperty","_getPrototypeOf","_superPropBase","desc","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","_setPrototypeOf","p","_defineProperty","TrezorConnect","ADDRESS_SCRIPT_TYPES","P2SH","P2SH_P2WSH","P2WSH","manifest","email","appUrl","e","console","_DirectKeystoreIntera","_ref","_this","network","this","messages","version","state","PENDING","level","INFO","text","code","ACTIVE","fn","_run","mark","_callee","_this$connectParams","_this$connectParams2","method","params","result","wrap","_context","prev","connectParams","sent","success","Error","payload","abrupt","parse","stop","args","arguments","DirectKeystoreInteraction","_TrezorInteraction","getFeatures","major_version","minor_version","patch_version","label","model","pin_protection","passphrase_protection","spec","concat","major","minor","patch","string","pin","passphrase","_TrezorInteraction2","_ref2","_this2","bip32Path","split","ERROR","getPublicKey","path","coin","crossChain","_TrezorExportHDNode","publicKey","_TrezorExportHDNode2","xpub","_TrezorInteraction3","_ref3","_this3","inputs","outputs","bip32Paths","action","_this4","signTransaction","map","input","inputIndex","requiredSigners","multisigRequiredSigners","multisig","addressType","multisigAddressType","source","forEach","getOwnPropertyDescriptors","defineProperties","_objectSpread","script_type","m","pubkeys","multisigPublicKeys","trezorPublicKey","signatures","fill","prev_hash","txid","prev_index","index","address_n","bip32PathToSequence","amountSats","amount","trezorInput","output","toFixed","address","trezorOutput","inputSignature","_TrezorInteraction4","_ref4","_this5","getAddress","multisigAddress","showOnTrezor","scriptType","MAINNET","node","depth","child_num","fingerprint","chain_code","repeat","public_key","LedgerSignMultisigTransaction","LedgerExportExtendedPublicKey","LedgerExportPublicKey","LedgerGetMetadata","LedgerBitcoinInteraction","LedgerDashboardInteraction","LedgerInteraction","LEDGER_BOTH_BUTTONS","LEDGER_RIGHT_BUTTON","LEDGER_LEFT_BUTTON","LEDGER","_splitTransaction","_serializeTransaction","_toConsumableArray","arr2","_arrayWithoutHoles","iter","from","_iterableToArray","_nonIterableSpread","_asyncToGenerator","TransportU2F","TransportWebUsb","LedgerBtc","_withTransport","callback","transport","_transport","environment","satisfies","firefox","t0","message","t1","_x","withTransport","_callee2","app","_context2","_x2","_LedgerInteraction","_LedgerInteraction2","_LedgerDashboardInter","_callee4","_context4","_callee3","rawResult","_context3","setScrambleKey","send","parseMetadata","_x3","response","byteArray","data","slice","targetId","Buffer","readUIntBE","seVersionLength","seVersion","flagsLength","flags","mcuVersionLength","mcuVersion","allocUnsafeSlow","includes","replace","match","flag","_split2","Boolean","majorVersion","minorVersion","patchVersion","_split4","mcuMajorVersion","mcuMinorVersion","MODEL_RANGES","minTargetId","range","LedgerExportHDNode","_LedgerBitcoinInterac","_ref5","indices","hardened0","hardenedBIP32Index","hardened44","hardened100","withApp","_ref6","_callee5","_context5","getWalletPublicKey","_x4","_LedgerExportHDNode","_run2","_callee6","_context6","parsePublicKey","compressPublicKey","_LedgerExportHDNode2","_ref7","_getFingerprint","_callee7","pubkey","_context7","getParentPublicKey","getFingerprintFromPublicKey","_ref8","_callee8","parentPath","_context8","getParentPath","_x5","_run3","_callee9","walletPublicKey","_context9","getFingerprint","deriveExtendedPublicKey","chainCode","_LedgerBitcoinInterac2","_ref9","_this6","WARNING","preProcessingTime","postProcessingTime","anySegwitInputs","_this7","_ref10","_callee10","transactionSignature","_context10","setExchangeTimeout","signP2SHTransaction","ledgerInputs","associatedKeysets","ledgerKeysets","outputScriptHex","ledgerOutputScriptHex","lockTime","sigHashType","segwit","transactionVersion","endsWith","_x6","_x7","inputTransaction","splitTransaction","transactionHex","scriptFn","multisigRedeemScript","multisigWitnessScript","scriptHex","scriptToHex","_this8","ledgerBIP32Path","txHex","unsignedMultisigTransaction","toHex","splitTx","serializeTransactionOutputs","join","parseHermitQRCodeData","encodeHermitQRCodeData","HermitSignTransaction","HermitExportExtendedPublicKey","HermitExportPublicKey","HermitDisplayer","HermitReader","HermitInteraction","HERMIT","_hiBase","_interopRequireDefault","_pako","encodedString","errorPrefix","compressedBytes","decode","asBytes","json","inflate","to","JSON","startsWith","jsonString","stringify","deflate","gzip","encode","commandMessage","mode","instructions","command","_IndirectKeystoreInte","IndirectKeystoreInteraction","_HermitInteraction","reader","_HermitReader","displayer","_HermitReader2","bip32_path","deleteProperty","_HermitReader3","_HermitDisplayer","inputAddressType","inputsAreSupported","outputsAreSupported","MULTISIG_ADDRESS_TYPES","UNSUPPORTED","signatureRequestData","hermitInputsByRedeemScript","redeemScriptHex","toNumber","values","DUST_IN_BTC","satoshisToBitcoins","BigNumber","url","href","rel","downloadFile","body","filename","blob","Blob","type","window","navigator","msSaveOrOpenBlob","msSaveBlob","elem","document","createElement","URL","createObjectURL","download","appendChild","click","removeChild","naiveCoinSelection","options","changeRequired","slices","reduce","count","balance","utxos","balanceSats","plus","numInputs","walletBalance","outputTotal","total","selectedUtxos","inputTotal","spendAll","config","numOutputs","estimatedFees","estimateMultisigTransactionFee","isGreaterThan","minus","isLessThanOrEqualTo","isSpendAll","j","change","feesWithoutChange","feesWithChange","inputOutputDiff","isGreaterThanOrEqualTo","Disclaimer","Card","CardHeader","title","CardContent","Help","Box","mt","mb","Typography","variant","Grid","container","spacing","item","md","direction","alignItems","justify","xs","Button","data-cy","size","color","startIcon","AccountBalanceWallet","SportsVolleyball","List","ListItem","ListItemIcon","Description","ListItemText","externalLink","YouTube","GitHub","CardActions","BugReport","Speed","a","axios","blockExplorerAPIURL","utxosResult","all","utxo","transactionResult","confirmed","status","vout","time","block_time","addressesult","addressData","used","chain_stats","funded_txo_count","mempool_stats","feeEstimatesResult","feeEstimates","Math","ceil","post","broadcastResult","callBitcoind","auth","headers","Accept","jsonrpc","id","resp","catch","isWalletAddressNotFoundError","bitcoindParams","client","username","password","addresses","addressParam","promises","previousTransactions","mapindex","confirmations","bitcoinsToSatoshis","hex","blocktime","bitcoindGetAddressStatus","warn","numBlocks","feeRate","feerate","log","bitcoindImportMulti","rescan","scriptPubKey","timestamp","fetchAddressUTXOsUnsorted","blockExplorerGetAddresesUTXOs","bitcoindListUnspent","fetchAddressUTXOs","updates","fetchedUTXOs","fetchUTXOsError","unsortedUTXOs","addressKnown","sortInputs","accumulator","currentValue","getAddressStatus","blockExplorerGetAddressStatus","fetchFeeEstimate","blockExplorerGetFeeEstimate","bitcoindEstimateSmartFee","broadcastTransaction","blockExplorerBroadcastTransaction","bitcoindSendRawTransaction","initSortDir","order","compareSlicesByPath","b","orderDir","aint","parseInt","reverse","bint","compareSlicesByBalance","isEqualTo","compareSlicesByUTXOCount","compareSlicesByTime","lastUsed","amin","min","bmin","Number","isNaN","isChange","prefixLength","DEFAULT_PREFIX","indexes","getDepositSlices","wallet","deposits","nodes","getWalletSlices","getTotalbalance","createSelector","getPendingBalance","currentSlice","getConfirmedBalance","totalBalance","pendingBalance","getSlicesWithLastUsed","addressUsed","maxtime","max","Date","toLocaleDateString","getSpendableSlices","getSpentSlices","getSlicesWithBalance","getZeroBalanceSlices","getUnknownAddressSlices","getUnknownAddresses","getDepositableSlices","setRequiredSigners","number","setInputs","addOutput","setChangeOutputIndex","setOutputAddress","setOutputAmount","amountString","setChangeAddressAction","deleteOutput","setFeeRate","valueString","setFee","finalizeOutputs","finalized","setBalanceError","updateAutoSpendAction","setSpendStep","SET_ERROR_NOTIFICATION","CLEAR_ERROR_NOTIFICATION","setErrorNotification","clearErrorNotification","WALLET_MODES","updateDepositSliceAction","updateChangeSliceAction","updateWalletNameAction","resetWalletView","resetWallet","fetchSliceData","dispatch","getState","settings","sliceDataPromises","addressStatus","updater","updatedSlice","BitcoinIcon","SvgIcon","htmlColor","xmlns","aria-hidden","focusable","data-prefix","data-icon","className","role","viewBox","d","defaultProps","EditableName","componentDidMount","name","setState","newName","render","editing","TextField","autoFocus","onChange","handleChange","hasError","helperText","IconButton","onClick","submit","disabled","Check","cancel","Clear","startEditing","Edit","event","preventDefault","setName","React","Component","useStyles","makeStyles","theme","root","height","fontSize","gutter","paddingLeft","paddingRight","paddingTop","WalletInfoCard","walletName","editable","classes","style","fontWeight","NETWORKS","TESTNET","setNetwork","setTotalSigners","setAddressType","setFrozen","NetworkPicker","handleNetworkChange","frozen","FormControl","component","RadioGroup","FormControlLabel","control","Radio","checked","FormHelperText","mapDispatchToProps","setNetworkAction","connect","QuorumPicker","renderIncrementRequiredSigners","totalSigners","handleIncrementRequiredSigners","AddCircle","renderDecrementRequiredSigners","handleDecrementRequiredSigners","RemoveCircle","renderIncrementTotalSigners","handleIncrementTotalSigners","renderDecrementTotalSigners","handleDecrementTotalSigners","setTotalSignersAction","setRequiredSignersAction","AddressTypePicker","handleTypeChange","setType","actionWrapper","wrappedActions","mapping","actionIndex","wrappedMapping","actionFunctionNames","actionFunctionName","actionType","numberedActionWrapper","wrappedNumberedActions","PrivateClientSettings","handleUrlChange","handleUsernameChange","handlePasswordChange","urlError","usernameError","passwordError","privateNotes","connectSuccess","connectError","testConnection","fullWidth","ClientPicker","setUrl","urlEdited","setUrlError","validateUrl","setUsername","setUsernameError","validateUsername","setPassword","setPasswordError","validatePassword","host","exec","StartingAddressIndexPicker","handleIndexChange","setStartingAddressIndex","validateBIP32Index","startingAddressIndexField","startingAddressIndexError","handleCustomIndexChange","customIndex","startingAddressIndex","Tooltip","WalletConfirmation","Alert","severity","Table","TableHead","TableRow","TableCell","TableBody","renderConfirmationInfo","extendedPublicKeyImporters","importer","extendedPublicKey","quorum","bigNumberPropTypes","c","PropTypes","arrayOf","isRequired","s","bool","array","shape","copyText","cursor","Copyable","newline","children","showIcon","showText","otherProps","useState","copied","setCopied","timer","setTimer","enqueueSnackbar","useSnackbar","useEffect","clearTimeout","TextComponent","stopPropagation","onCopy","timerTimeout","setTimeout","shortenedText","substring","preventDuplicate","showSnackbarMessage","format","fontStyle","overflowWrap","FileCopy","UTXOSet","renderInputs","confirmedStyle","styles","utxoTxid","unconfirmed","confirmedTitle","hover","blockExplorerTransactionURL","OpenInNew","inputsTotalSats","TableFooter","colSpan","MultisigDetails","renderScript","script","ops","scriptToOps","sm","showAddress","redeemScript","witnessScript","align","blockExplorerAddressURL","Chip","networkLabel","multisigTotalSigners","tooltip","ImportAddressesButton","importCallback","imported","setImported","importError","setImportError","setRescanPreference","addressesError","setAddressesError","enableImport","setEnableImport","checkAddress","errorMessage","statusText","pluralOrSingularAddress","capitalize","responseError","successes","addr","rescanTooltip","ml","Switch","setSignatureImporterName","setSignatureImporterMethod","setSignatureImporterBIP32Path","setSignatureImporterPublicKeys","setSignatureImporterSignature","setSignatureImporterFinalized","setSignatureImporterComplete","TextSignatureImporter","signatureJSON","multiline","rows","finalize","setError","parseError","validateAndSetSignature","interaction","width","startText","messageFor","handleStart","delay","onError","handleError","onScan","handleScan","facingMode","handleStop","onStart","onClear","onSuccess","MessagesList","maxHeight","overflow","dense","renderMessage","messageIcon","renderMessageBodyAndSubmessages","renderMessageBody","image","src","mimeType","alt","Warning","VersionTabPanel","currentVersion","hidden","aria-labelledby","filteredMessages","InteractionMessages","versions","Paper","square","Tabs","aria-label","Tab","aria-controls","newValue","excludeCodes","excludeCode","HermitSignatureImporter","signatureImporter","SignMultisigTransaction","keystore","disableChangeMethod","resetBIP32Path","bip32PathError","signatureError","messagesFor","handleBIP32PathChange","hasBIP32PathError","bip32PathIsDefault","request","import","clear","signature","enableChangeMethod","validateAndSetBIP32Path","defaultBIP32Path","isSupported","HardwareWalletSignatureImporter","extendedPublicKeyImporter","messageTextFor","renderAction","renderDeviceConfirmInfo","fee","renderTargets","sign","hasMessagesFor","setBIP32PathError","run","stateUpdate","SignatureImporter","titleRef","createRef","scrollToTitle","componentDidUpdate","getCurrent","current","scrollIntoView","behavior","renderImport","notMyTurn","labelId","InputLabel","Select","handleMethodChange","MenuItem","renderImportByMethod","signatureImporters","isWallet","setMethod","reset","setSignature","setPublicKeys","setFinalized","multisigBIP32Root","multisigBIP32Path","setBIP32Path","errback","validateBIP32Path","renderSignature","inputsSignatures","setComplete","publicKeys","finalizedSignatureImporters","inputNumber","validateHex","validateMultisigSignature","finalizedSignatureImporterNum","finalizedSignatureImporter","k","ref","ownProps","spend","transaction","ExtendedPublicKeySelector","signingKeys","updateKeySelection","selection","renderKeySelectorMenu","renderSignatureImporter","getAssociatedExtendedPublicKeyImporter","associatedExtendedPublicKeyImporter","handleKeyChange","renderKeySelectorMenuItems","extendedPublicKeyImporterNotUsed","derivedKey","deriveChildPublicKey","importerIndex","publicKeyIndex","extendedPublicKeys","extendedPublicKeyImporterNum","setSigningKey","importMethod","extendedPublicKeyImporterIndex","initialInteractionState","keySelected","deviceType","hasInteraction","interactionState","interactionError","interactionMessage","interactionReducer","ConfirmAddress","useReducer","setInteraction","serializedPath","_event","fullBip32Path","ConfirmMultisigAddress","flexGrow","backgroundColor","palette","background","paper","createTab","tab","tooltipTab","a11yProps","arrow","TabPanel","other","display","SliceDetails","tabIndex","setTabIndex","tabs","panel","my","AppBar","position","newIndex","centered","boxShadow","grey","spent","textDecoration","SlicesTable","search","paging","detailPanelType","showTitle","emptyRowsWhenPaging","pageSize","pageSizeOptions","toolbar","columns","field","rowData","defaultSort","customSort","sorting","column","detailPanel","depositTimer","WalletDeposit","getNextDepositAddress","depositIndex","getDepositAddress","updateDepositSlice","depositableSlices","clearInterval","setInterval","resetDepositAddressIndex","handleAmountChange","decimal","amountError","qrString","InputProps","endAdornment","InputAdornment","anchor","resetWalletViewAction","withSnackbar","AddressExpander","defaultMode","addressContent","expandMode","showMenu","showMenuIcon","handleMenu","float","hasAdditionalOptions","aria-haspopup","Menu","anchorEl","keepMounted","open","onClose","handleClose","selected","canConfirm","panelExpand","expanded","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","expandContent","renderAddressConfirmation","confirmAddressDescription","confirmOnDevice","resetInteractionState","Node","generate","walletMode","spending","Checkbox","handleSpend","maxUtxoDate","renderAddress","braidNode","present","addNode","updateNode","updateAutoSpend","setInputsAction","setFeeRateAction","updateAutoSpendActionImport","braid","common","NodeSet","sortAddresses","orderBy","page","renderFilters","filterIncludeSpent","filterIncludeZeroBalance","FormGroup","row","FormLabel","mr","filterAddresses","getNodeSet","changeNodes","depositNodes","returnValue","nodeSet","sort","nodesObject","currentNode","renderNodes","nodesPerPage","startingIndex","nodesRows","whichOne","nodeRow","handlePageChange","handleChangeRowsPerPage","pageCount","rowCount","tableLayout","TableSortLabel","active","TablePagination","rowsPerPage","backIconButtonProps","nextIconButtonProps","onChangePage","onChangeRowsPerPage","OutputEntry","displayBalanceAction","finalizedOutputs","autoSpend","hasBalanceError","isBalanceable","addChangeAddress","changeNode","setAddress","setChangeOutput","renderChangeAdornment","changeOutputIndex","disable","placement","handleAddressChange","hasAddressError","addressError","setAmount","hasAmountError","isNotBalanceable","feeError","newAmount","autoBalancedAmount","validateOutputAmount","balanceError","outputTotalSats","feeSats","balanceAction","handleBalance","handleDelete","remove","handleMaxSpend","setMaxSpend","gridSpacing","placeholder","outputsFormInput","startAdornment","maxSpend","Delete","outputIndex","spendableSlices","confirmedBalance","estimatedFee","n","feesPerByteInSatoshis","totalOutputValue","spendAllAmount","isLessThan","nextNode","OutputsForm","outputsTotal","initialOutputState","renderOutputs","inputsTotal","outputsAndFeeTotal","updatesComplete","hasFeeRateFetchError","feeRateFetchError","hasFeeRateError","feeRateError","hasFeeError","handleAddOutput","handleFeeRateChange","rate","NaN","parseFloat","handleFeeChange","handleFinalize","handleReset","resetOutputs","getFeeEstimate","newFeeRate","gatherSignaturesDisabled","inputProps","outputAmount","feeDisplay","outputsFormLabel","minimum","step","unitLabel","readOnly","disableUnderline","addOutputAction","setOutputAmountAction","setFeeAction","finalizeOutputsAction","Transaction","buildSignedTransaction","signedMultisigTransaction","handleBroadcast","setTxid","signedTransaction","broadcasting","transactionURL","signedTransactionHex","UnsignedTransaction","showUnsignedTransaction","unsignedTransaction","handleHideUnsignedTransaction","handleShowUnsignedTransaction","WalletSign","renderKeySelectors","keySelectors","keySelectorNum","signaturesFinalized","every","handleReturn","resetTransaction","handleCancel","changeSlice","updateTxSlices","retries","skipAddresses","Set","changeAddress","nextDepositSlice","depositSlices","changeSlices","fetchSliceStatus","sliceUpdates","addressSet","has","add","queriedSlices","utxoCount","setSpendStepAction","TransactionPreview","editTransaction","handleSignTransaction","renderAddresses","addressWithUtxos","mapAddresses","renderOutputAddresses","mapped","mappedAddresses","WalletSpend","outputsAmount","coinSelection","feeAmount","prevProps","showPreview","previewDisabled","showSignTransaction","handleShowPreview","autoSelectCoins","showCreate","resetNodesSpend","deleteChangeOutput","handleSpendMode","spendingStep","changeAmount","updateChangeSlice","setChangeAddress","SlicesTableContainer","setDisplaySlices","displaySlices","slicesWithBalance","newProps","zeroBalanceSlices","spentSlices","newDisplaySlices","PureComponent","WalletControl","scrollRef","handleModeChange","indicatorColor","textColor","renderModeComponent","addressesAreLoaded","progress","LinearProgress","trailingEmptyNodes","nodesLoaded","initialLoadComplete","fetchUTXOsErrors","setMode","WalletConfigInteractionButtons","onClearFn","onDownloadFn","sessionStorage","removeItem","handleClearClick","setExtendedPublicKeyImporterName","resetExtendedPublicKeyImporterBIP32Path","setExtendedPublicKeyImporterBIP32Path","setExtendedPublicKeyImporterMethod","setExtendedPublicKeyImporterExtendedPublicKey","setExtendedPublicKeyImporterFinalized","setExtendedPublicKeyImporterVisible","WalletGenerator","extendedPublicKeyCount","cb","toggleImporters","setImportersVisible","configuring","setGenerating","freeze","startingDepositBIP32Suffix","startingChangeBIP32Suffix","update","attemptToKeepGenerating","generateMultisig","multisigUpdates","extendedPublicKeyImporterNumber","generateMultisigFromPublicKeys","fetchUTXOs","utxoUpdates","generateNextNodeIfNecessary","allBIP32Paths","p1","p2","p1Segments","p2Segments","pathSegments","maxIndex","nextBIP32Path","refreshNodes","resetNodesFetchErrors","allNodes","previousFetchErrors","unknownClient","debouncedTestConnection","debounce","trailing","leading","prevPassword","setIsWallet","downloadWalletDetails","generating","ConfirmWallet","defaultValue","onSubmit","handlePasswordEnter","fetchSliceDataAction","resetWalletAction","ExtendedPublicKeyExtendedPublicKeyImporter","setBIP32PathToDefault","extendedPublicKeyError","handleExtendedPublicKeyChange","hasExtendedPublicKeyError","validateAndSetExtendedPublicKey","deriveChildExtendedPublicKey","validateExtendedPublicKey","find","TextExtendedPublicKeyImporter","HermitExtendedPublicKeyImporter","HardwareWalletExtendedPublicKeyImporter","ExportExtendedPublicKey","Conflict","ExtendedPublicKeyImporter","setExtendedPublicKey","renderBIP32Path","renderExtendedPublicKey","conversionMessage","conversionAppend","networkError","actualExtendedPublicKey","convertExtendedPublicKey","validationError","finalizedNetwork","hasConflict","conflict","conflictMessage","ExtendedPublicKeyImporterWithStyles","withStyles","lineHeight","card","flexDirection","cardContent","textAlign","flex","WalletActionsPanel","handleRefresh","onClearConfig","onDownloadConfig","onImportAddresses","refreshing","walletActivated","ButtonGroup","CircularProgress","RefreshOutlined","GetAppOutlined","ExitToAppOutlined","CreateWallet","handleImport","fileReader","FileReader","readAsText","files","onload","configJson","setConfigJson","refresh","generatorRefresh","importDetails","setClientType","setClientUrl","setClientUsername","walletConfiguration","renderWalletImporter","configError","htmlFor","accept","marginTop","renderSettings","renderExtendedPublicKeyImporters","walletDetailsText","walletDetailsFilename","clientDetails","extendedPublicKeyImporterBIP32Paths","extendedPublicKeyImporterBIP32Path","clearConfig","unknownAddresses","walletLoadError","afterImportAddresses","padding","properties","configObj","validProperties","validateProperties","String","clientProperties","validClient","validQuorum","validateExtendedPublicKeys","xpubs","tmpNetwork","xpubFields","pathError","indexOf","xpubIndex","keyIndex","valueError","getItem","validateConfig","setItem","_val","val","importedAddresses","unknownSlices","importedSlices","updateWalletNameActionImport","setAddressTypeAction","setExtendedPublicKeyImporterMethodAction","setExtendedPublicKeyImporterExtendedPublicKeyAction","setExtendedPublicKeyImporterBIP32PathAction","setExtendedPublicKeyImporterNameAction","setExtendedPublicKeyImporterFinalizedAction","setExtendedPublicKeyImporterVisibleAction","setClientPassword","updateDepositNode","updateChangeNode","walletSelectors","setPublicKeyImporterName","resetPublicKeyImporterBIP32Path","setPublicKeyImporterBIP32Path","setPublicKeyImporterMethod","setPublicKeyImporterPublicKey","setPublicKeyImporterFinalized","movePublicKeyImporterUp","movePublicKeyImporterDown","AddressGenerator","isInConflict","publicKeyImporters","some","publicKeyCount","publicKeyImporter","publicKeysAreCanonicallySorted","sortedPublicKeys","canonicallySortPublicKeys","sortPublicKeyImporters","setMultisigAddress","publicKeyImporterNum","downloadAddressDetails","addressDetailsText","addressDetailsFilename","redeemScriptLine","witnessScriptLine","scriptsSpacer","publicKeyImporterBIP32Paths","publicKeyImporterBIP32Path","canonicallySorted","TextPublicKeyImporter","validateAndSetPublicKey","validatePublicKey","ExtendedPublicKeyPublicKeyImporter","validateExtendedPublicKeyForNetwork","HermitPublicKeyImporter","ExportPublicKey","publicKeyError","HardwareWalletPublicKeyImporter","PublicKeyImporter","moveUp","ArrowUpward","moveDown","ArrowDownward","setPublicKey","renderPublicKey","publicKeyImporterIndex","CreateAddress","renderPublicKeyImporters","publicNotes","START_TEST_SUITE_RUN","SET_CURRENT_TEST_RUN","startTestSuiteRun","setCurrentTestRun","runIndex","SET_KEYSTORE","SET_KEYSTORE_NOTE","SET_KEYSTORE_STATUS","setKeystore","keystoreType","setKeystoreNote","setKeystoreStatus","START_TEST_RUN","END_TEST_RUN","RESET_TEST_RUN","SET_TEST_RUN_NOTE","startTestRun","testRunIndex","endTestRun","resetTestRun","setTestRunNote","note","NoteBase","setNote","newNote","mapDispatchToKeystoreNoteProps","mapDispatchToTestRunNoteProps","KeystoreNote","TestRunNote","testSuiteRun","currentTestRunIndex","testRuns","KeystorePickerBase","detectVersion","GetMetadata","handleVersionChange","keystoreActions","setErrorNotificationAction","KeystorePicker","Test","thing","expected","actual","diffChars","diffArrays","diffJSON","description","postprocess","matches","diff","SUCCESS","FAILURE","TestSuiteRunSummaryBase","Bowser","getParser","userAgent","getOSName","getOSVersion","getBrowserName","getBrowserVersion","UNCHAINED_WALLETS_VERSION","keystoreName","subheader","renderTests","testRun","Divider","renderTestRun","button","testRunChooser","started","renderTestRunResult","test","moment","duration","endedAt","startedAt","asSeconds","setCurrentTestRunAction","TestSuiteRunSummary","TestRunBase","addEventListener","handleKeyDown","componentWillUnmount","removeEventListener","isLastTest","nextTest","keyCode","tagName","toLowerCase","start","renderInteractionMessages","testComplete","renderResult","handleResult","formatMessage","formatOutput","formatDiffSegment","segment","diffSegmentClass","added","removed","testRunActions","errorNotificationActions","TestRun","bip39Phrase","TEST_FIXTURES","SeedBase","renderSeedWord","word","Seed","TestSuiteRunBase","currentTestIsActive","isFirstTest","previousTest","tag","startDisabled","renderBody","renderSetup","ArrowBack","ArrowForward","testSuiteRunActions","TestSuiteRun","ScriptEntry","hasScriptError","scriptError","hasFetchUTXOsError","scriptName","scriptTitle","charAt","toUpperCase","handleScriptChange","newScriptHex","multisigScriptHex","generateMultisigFromHex","renderDetails","chosePerformSpend","choseConfirmOwnership","buttonsDisabled","performSpend","confirmOwnership","choosePerformSpend","fetchUTXOsResult","chooseConfirmOwnership","setOwnershipMultisig","setFrozenAction","ownership","chosen","ConfirmOwnership","renderConfirmation","GreenListItemIcon","styled","selectLabelId","Spend","spendable","renderSignatureImporters","signatureImporterNum","addressFinalized","menuButton","marginRight","menuItem","paddingBottom","paddingX","menuLink","NavItem","Navbar","setAnchorEl","Toolbar","currentTarget","logo","Footer","now","getFullYear","ErrorBoundary","errorInfo","mx","whiteSpace","componentStack","clearErrorNotificationAction","ErrorNotification","errorNotification","Snackbar","anchorOrigin","vertical","horizontal","ContentProps","Close","App","CssBaseline","maxSnack","Container","maxWidth","ScriptExplorer","Wallet","AppContainer","history","createBrowserHistory","resetApp","unlisten","listen","isLocalhost","location","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","updateState","initialState","intialSliceState","spendingSats","updateSlice","newSlices","updatedState","currentNodeBalance","nodeFoundWithValue","otherNode","getNextNode","resetSpend","thisNode","updatedNodes","getTime","initialExtendedPublicKeyImporterState","bip32PathModified","confliect","createInitialState","importers","finalizedAddressType","setConflict","updateExtendedPublicKeyImporterState","extendedPublicKeyImporterChange","newState","sum","updateTotalSigners","finalizedCount","updateImporterPaths","updateNetwork","updateAddressType","updateFinalizedSettings","initialPublicKeyImporterState","abovePublicKeyImporter","belowPublicKeyImporter","sortedPublicKeyImporters","publicKeyImportersChange","updatePublicKeyImporterState","publicKeyImporterChange","stub","resetWalletViews","updateMultisig","initialSignatureImporterState","updateSignatureImporterState","signatureImporterChange","finalizeSignatureImporterState","x","y","updateInputs","setFeeForRate","feeRateString","nout","newOutputs","updateFeeRate","validateFeeRate","updateFee","feeString","validateFee","updateOutputAddress","validateAddress","updateOutputAmount","dp","updateRequiredSigners","updateSigningKey","outputInitialStateForMode","resetTransactionState","validateTransaction","calcOutputTotalSats","absoluteValue","minFee","ExportPublicKeyTest","pub","publicKeyTests","ExportExtendedPublicKeyTest","tpub","extendedPublicKeyTests","SignMultisigTransactionTest","outputAddress","outputAmountSats","signingTests","transactions","fixture","HERMET","SUITE","trezorTests","ledgerTests","hermitTests","initialTestRunState","testRunsForKeystore","updatedTestRun","spendReducers","combineReducers","keyResetState","walletReducers","braidReducer","appReducer","rootReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","ReduxPromise","thunk","ReactDOM","getElementById","process","origin","fetch","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","UnsupportedInteraction","KeystoreInteraction","LEVELS","STATES","_bowser","_KeystoreInteraction","_KeystoreInteraction2","direct","_KeystoreInteraction3","indirect","_exportNames","VERSION","DIRECT_KEYSTORES","INDIRECT_KEYSTORES","KEYSTORES","_trezor","_ledger","_hermit","_package"],"mappings":"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","file":"static/js/main.50259cb5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"feeMagicBtn\":\"styles_feeMagicBtn__QX0iX\",\"utxoTxid\":\"styles_utxoTxid__1p6kt\",\"outputsFormInput\":\"styles_outputsFormInput__3Osdm\",\"unconfirmed\":\"styles_unconfirmed__3KzJ4\",\"spent\":\"styles_spent__10i2F\",\"outputsFormLabel\":\"styles_outputsFormLabel__NZOnp\",\"maxSpend\":\"styles_maxSpend__32e8a\"};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trezorCoin = trezorCoin;\nexports.TrezorConfirmMultisigAddress = exports.TrezorSignMultisigTransaction = exports.TrezorExportExtendedPublicKey = exports.TrezorExportPublicKey = exports.TrezorExportHDNode = exports.TrezorGetMetadata = exports.TrezorInteraction = exports.TREZOR_PUSH_AND_HOLD_BUTTON = exports.TREZOR_BOTH_BUTTONS = exports.TREZOR_RIGHT_BUTTON = exports.TREZOR_LEFT_BUTTON = exports.TREZOR = void 0;\n\nrequire(\"core-js/modules/es6.object.define-properties\");\n\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.promise\");\n\nrequire(\"core-js/modules/es6.reflect.get\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"core-js/modules/es6.string.repeat\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.array.fill\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nvar _unchainedBitcoin = require(\"unchained-bitcoin\");\n\nvar _interaction = require(\"./interaction\");\n\nvar _ADDRESS_SCRIPT_TYPES;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Constant defining Trezor interactions.\n *\n * @type {string}\n * @default trezor\n */\nvar TREZOR = 'trezor';\nexports.TREZOR = TREZOR;\n\nvar TrezorConnect = require(\"trezor-connect\")[\"default\"];\n\nvar ADDRESS_SCRIPT_TYPES = (_ADDRESS_SCRIPT_TYPES = {}, _defineProperty(_ADDRESS_SCRIPT_TYPES, _unchainedBitcoin.P2SH, 'SPENDMULTISIG'), _defineProperty(_ADDRESS_SCRIPT_TYPES, _unchainedBitcoin.P2SH_P2WSH, 'SPENDP2SHWITNESS'), _defineProperty(_ADDRESS_SCRIPT_TYPES, _unchainedBitcoin.P2WSH, 'SPENDWITNESS'), _ADDRESS_SCRIPT_TYPES);\n/**\n * Constant representing the action of pushing the left button on a\n * Trezor device.\n *\n * @type {string}\n * @default 'trezor_left_button'\n */\n\nvar TREZOR_LEFT_BUTTON = 'trezor_left_button';\n/**\n * Constant representing the action of pushing the right button on a\n * Trezor device.\n *\n * @type {string}\n * @default 'trezor_right_button'\n */\n\nexports.TREZOR_LEFT_BUTTON = TREZOR_LEFT_BUTTON;\nvar TREZOR_RIGHT_BUTTON = 'trezor_right_button';\n/**\n * Constant representing the action of pushing both buttons on a\n * Trezor device.\n *\n * @type {string}\n * @default 'trezor_both_buttons'\n */\n\nexports.TREZOR_RIGHT_BUTTON = TREZOR_RIGHT_BUTTON;\nvar TREZOR_BOTH_BUTTONS = 'trezor_both_buttons';\n/**\n * Constant representing the action of pushing and holding the Confirm\n * button on a Trezor model T device.\n *\n * @type {string}\n * @default 'trezor_push_and_hold_button'\n */\n\nexports.TREZOR_BOTH_BUTTONS = TREZOR_BOTH_BUTTONS;\nvar TREZOR_PUSH_AND_HOLD_BUTTON = 'trezor_push_and_hold_button';\nexports.TREZOR_PUSH_AND_HOLD_BUTTON = TREZOR_PUSH_AND_HOLD_BUTTON;\n\ntry {\n  TrezorConnect.manifest({\n    email: \"help@unchained-capital.com\",\n    appUrl: \"https://github.com/unchained-capital/unchained-wallets\"\n  });\n} catch (e) {\n  // We hit this if we run this code outside of a browser, for example\n  // during unit testing.\n\n  /* eslint-disable no-process-env */\n  if (process.env.NODE_ENV !== 'test') {\n    /* eslint-enable */\n    console.error(\"Unable to call TrezorConnect.manifest.\");\n  }\n}\n/**\n * Base class for interactions with Trezor hardware wallets.\n *\n * Assumes we are using TrezorConnect to talk to the device.\n *\n * Subclasses *must* implement a method `this.connectParams` which\n * returns a 2-element array.  The first element of this array should\n * be a `TrezorConnect` method to use (e.g. -\n * `TrezorConnect.getAddress`).  The second element of this array\n * should be the parameters to pass to the given `TrezorConnect`\n * method.\n *\n * Errors thrown when calling TrezorConnect are not caught, so users\n * of this class (and its subclasses) should use `try...catch` as\n * always.\n *\n * Unsuccessful responses (the request succeeded but the Trezor device\n * returned an error message) are intercepted and thrown as errors.\n * This allows upstream `try...catch` blocks to intercept errors &\n * failures uniformly.\n *\n * Subclasses *may* implement the `parse(payload)` method which\n * accepts the response payload object and returns the relevant data.\n *\n * Subclasses will also want to implement a `messages()` method to\n * manipulate the messages returned to the user for each interaction.\n *\n * @extends {module:interaction.DirectKeystoreInteraction}\n * @example\n * import {TrezorInteraction} from \"unchained-wallets\";\n * // Simple subclass\n *\n * class SimpleTrezorInteraction extends TrezorInteraction {\n *\n *   constructor({network, param}) {\n *     super({network});\n *     this.param =  param;\n *   }\n *\n *   connectParams() {\n *     return [\n *       TrezorConnect.doSomething, // Not a real TrezorConnect function...\n *       {\n *         // Many Trezor methods require the `coin` parameter.  The\n *         // value of `this.trezorCoin` is set appropriately based on the\n *         // `network` provided in the constructor.\n *         coin: this.trezorCoin,\n *\n *         // Pass whatever arguments are required\n *         // by the TrezorConnect function being called.\n *         param: this.param,\n *         // ...\n *       }\n *     ];\n *   }\n *\n *   parse(payload) {\n *     return payload.someValue;\n *   }\n * \n * }\n * // usage\n * import {MAINNET} from \"unchained-bitcoin\";\n * const interaction = new SimpleTrezorInteraction({network: MAINNET, param: \"foo\"});\n * const result = await interaction.run();\n * console.log(result); // someValue from payload\n */\n\n\nvar TrezorInteraction =\n/*#__PURE__*/\nfunction (_DirectKeystoreIntera) {\n  _inherits(TrezorInteraction, _DirectKeystoreIntera);\n\n  /**\n   * Trezor interactions require knowing the bitcoin network they are\n   * for.\n   *\n   * @param {object} options - options argument\n   * @param {string} options.network - bitcoin network\n   */\n  function TrezorInteraction(_ref) {\n    var _this;\n\n    var network = _ref.network;\n\n    _classCallCheck(this, TrezorInteraction);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TrezorInteraction).call(this));\n    _this.network = network;\n    _this.trezorCoin = trezorCoin(network);\n    return _this;\n  }\n  /**\n   * Default messages are added asking the user to plug in their\n   * Trezor device (`device.connect`) and about the TrezorConnect\n   * popups (`trezor.connect.generic`).\n   *\n   * Subclasses should override this method and add their own messages\n   * (don't forget to call `super()`).\n   *\n   * @returns {module:interaction.Message[]} messages for this interaction\n   */\n\n\n  _createClass(TrezorInteraction, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(TrezorInteraction.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        version: \"One\",\n        state: _interaction.PENDING,\n        level: _interaction.INFO,\n        text: \"Make sure your Trezor device is plugged in.\",\n        code: \"device.connect\"\n      });\n      messages.push({\n        version: \"T\",\n        state: _interaction.PENDING,\n        level: _interaction.INFO,\n        text: \"Make sure your Trezor device is plugged in and unlocked.\",\n        code: \"device.connect\"\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"Your browser should now open a new window to Trezor Connect. Ensure you have enabled popups for this site.\",\n        code: \"trezor.connect.generic\"\n      });\n      return messages;\n    }\n    /**\n     * Awaits the call of `this.method`, passing in the output of\n     * `this.params()`.\n     *\n     * If the call returns but is unsuccessful (`result.success`) is\n     * false, will throw the returned error message.  If some other\n     * error is thrown, it will not be caught.\n     *\n     * Otherwise it returns the result of passing `result.payload` to\n     * `this.parse`.\n     *\n     * @returns {Promise} handles the work of calling TrezorConnect\n     */\n\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this$connectParams, _this$connectParams2, method, params, result;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$connectParams = this.connectParams(), _this$connectParams2 = _slicedToArray(_this$connectParams, 2), method = _this$connectParams2[0], params = _this$connectParams2[1];\n                _context.next = 3;\n                return method(params);\n\n              case 3:\n                result = _context.sent;\n\n                if (result.success) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(result.payload.error);\n\n              case 6:\n                return _context.abrupt(\"return\", this.parse(result.payload));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function run() {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n    /**\n     * Override this method in a subclass to return a 2-element array.\n     *\n     * The first element should be a functin to call, typically a\n     * `TrezorConnect` method, e.g. `TrezorConnect.getAddress`.\n     *\n     * The second element should be the parameters to pass to this\n     * function.\n     *\n     * By default, the function passed just throws an error.\n     *\n     * @returns {Array<function,Object>} the TrezorConnect parameters\n     */\n\n  }, {\n    key: \"connectParams\",\n    value: function connectParams() {\n      return [function () {\n        throw new Error(\"Override the `connectParams` method on a subclass of TrezorInteraction.\");\n      }, {}];\n    }\n    /**\n     * Override this method in a subclass to parse the payload of a\n     * successful response from the device.\n     *\n     * By default, the entire payload is returned.\n     *\n     * @param {Object} payload - the raw payload from the device response\n     * @returns {Object} - relevant or formatted data built from the raw payload\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(payload) {\n      return payload;\n    }\n  }]);\n\n  return TrezorInteraction;\n}(_interaction.DirectKeystoreInteraction);\n/**\n * Returns metadata about Trezor device.\n *\n * Includes model name, device label, firmware version, &\n * PIN/passphrase enablement.\n *\n * @extends {module:trezor.TrezorInteraction}\n * @example\n * import {TrezorGetMetadata} from \"unchained-wallets\";\n * const interaction = new TrezorGetMetadata();\n * const result = await interaction.run();\n * console.log(result);\n * {\n *   spec: \"Model 1 v1.8.3 w/PIN\",\n *   model: \"Model 1\",\n *   version: {\n *     major: 1,\n *     minor: 8,\n *     patch: 3,\n *     string: \"1.8.3\",\n *   },\n *   label: \"My Trezor\",\n *   pin: true,\n *   passphrase: false,\n * }\n */\n\n\nexports.TrezorInteraction = TrezorInteraction;\n\nvar TrezorGetMetadata =\n/*#__PURE__*/\nfunction (_TrezorInteraction) {\n  _inherits(TrezorGetMetadata, _TrezorInteraction);\n\n  /**\n   * This class doesn't actually require a `network`.\n   *\n   * @constructor\n   */\n  function TrezorGetMetadata() {\n    _classCallCheck(this, TrezorGetMetadata);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TrezorGetMetadata).call(this, {}));\n  }\n  /**\n   * It is underdocumented, but TrezorConnect does support the\n   * `getFeatures` API call.\n   *\n   * See {@link https://github.com/trezor/connect/blob/v8/src/js/core/methods/GetFeatures.js}.\n   *\n   * @returns {Array<function, Object>} TrezorConnect parameters\n   */\n\n\n  _createClass(TrezorGetMetadata, [{\n    key: \"connectParams\",\n    value: function connectParams() {\n      return [TrezorConnect.getFeatures, {}];\n    }\n    /**\n     * Parses Trezor device featuress into an appropriate metadata\n     * shape.\n     *\n     * @param {Object} payload - the original payload from the device response\n     * @returns {Object} device metadata & features\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(payload) {\n      // Example result:\n      // \n      // {\n      //   bootloader_hash: \"5112...846e9\"\n      //   bootloader_mode: null\n      //   device_id: \"BDF9...F198\"\n      //   firmware_present: null\n      //   flags: 0\n      //   fw_major: null\n      //   fw_minor: null\n      //   fw_patch: null\n      //   fw_vendor: null\n      //   fw_vendor_keys: null\n      //   imported: false\n      //   initialized: true\n      //   label: \"My Trezor\"\n      //   language: null\n      //   major_version: 1\n      //   minor_version: 6\n      //   model: \"1\"\n      //   needs_backup: false\n      //   no_backup: null\n      //   passphrase_cached: false\n      //   passphrase_protection: false\n      //   patch_version: 3\n      //   pin_cached: true\n      //   pin_protection: true\n      //   revision: \"ef8...862d7\"\n      //   unfinished_backup: null\n      //   vendor: \"bitcointrezor.com\"\n      // }\n      var major_version = payload.major_version,\n          minor_version = payload.minor_version,\n          patch_version = payload.patch_version,\n          label = payload.label,\n          model = payload.model,\n          pin_protection = payload.pin_protection,\n          passphrase_protection = payload.passphrase_protection;\n      var spec = \"Model \".concat(model, \" v.\").concat(major_version, \".\").concat(minor_version, \".\").concat(patch_version);\n\n      if (pin_protection) {\n        spec += \" w/PIN\";\n      }\n\n      if (passphrase_protection) {\n        spec += \" w/PASS\";\n      }\n\n      return {\n        spec: spec,\n        model: \"Model \".concat(model),\n        version: {\n          major: major_version,\n          minor: minor_version,\n          patch: patch_version,\n          string: \"\".concat(major_version, \".\").concat(minor_version, \".\").concat(patch_version)\n        },\n        label: label,\n        pin: pin_protection,\n        passphrase: passphrase_protection\n      };\n    }\n  }]);\n\n  return TrezorGetMetadata;\n}(TrezorInteraction);\n/**\n * Base class for interactions exporting information about an HD node\n * at a given BIP32 path.\n *\n * You may want to use `TrezorExportPublicKey` or\n * `TrezorExportExtendedPublicKey` directly.\n *\n * @extends {module:trezor.TrezorInteraction}\n * @example\n * import {MAINNET} from \"unchained-bitcoin\";\n * import {TrezorExportHDNode} from \"unchained-wallets\";\n * const interaction = new TrezorExportHDNode({network: MAINNET, bip32Path: \"m/48'/0'/0'/2'/0\"});\n * const node = await interaction.run();\n * console.log(node); // {publicKey: \"\", xpub: \"\", ...}\n *\n */\n\n\nexports.TrezorGetMetadata = TrezorGetMetadata;\n\nvar TrezorExportHDNode =\n/*#__PURE__*/\nfunction (_TrezorInteraction2) {\n  _inherits(TrezorExportHDNode, _TrezorInteraction2);\n\n  /**\n   * Requires a BIP32 path to the node to export as well as which network.\n   *\n   * @param {object} options - options argument\n   * @param {string} options.network - bitcoin network\n   * @param {string} bip32Path - the BIP32 path for the HD node\n   */\n  function TrezorExportHDNode(_ref2) {\n    var _this2;\n\n    var network = _ref2.network,\n        bip32Path = _ref2.bip32Path;\n\n    _classCallCheck(this, TrezorExportHDNode);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(TrezorExportHDNode).call(this, {\n      network: network\n    }));\n    _this2.bip32Path = bip32Path;\n    return _this2;\n  }\n  /**\n   * Adds messages related to warnings Trezor devices make depending\n   * on the BIP32 path passed.\n   *\n   * @returns {module:interaction.Message[]} messages for this interaction\n   */\n\n\n  _createClass(TrezorExportHDNode, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(TrezorExportHDNode.prototype), \"messages\", this).call(this);\n\n      var bip32PathSegments = (this.bip32Path || '').split('/');\n\n      if (bip32PathSegments.length < 4) {\n        // m, 45', 0', 0', ...\n        messages.push({\n          state: _interaction.PENDING,\n          level: _interaction.ERROR,\n          text: \"BIP32 path must be at least depth 3.\",\n          code: \"trezor.bip32_path.minimum\"\n        });\n      }\n\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"Confirm in the Trezor Connect window that you want to 'Export public key'. You may be prompted to enter your PIN.\",\n        code: \"trezor.connect.export_hdnode\"\n      });\n      return messages;\n    }\n    /**\n     * See {@link https://github.com/trezor/connect/blob/v8/docs/methods/getPublicKey.md}.\n     *\n     * @returns {Array<function,Object>} TrezorConnect parameters\n     */\n\n  }, {\n    key: \"connectParams\",\n    value: function connectParams() {\n      return [TrezorConnect.getPublicKey, {\n        path: this.bip32Path,\n        coin: this.trezorCoin,\n        crossChain: true\n      }];\n    }\n  }]);\n\n  return TrezorExportHDNode;\n}(TrezorInteraction);\n/**\n * Returns the public key at a given BIP32 path.\n *\n * @extends {module:trezor.TrezorExportHDNode}\n * @example\n * import {MAINNET} from \"unchained-bitcoin\";\n * import {TrezorExportPublicKey} from \"unchained-wallets\";\n * const interaction = new TrezorExportPublicKey({network: MAINNET, bip32Path: \"m/48'/0'/0'/2'/0\"});\n * const publicKey = await interaction.run();\n * console.log(publicKey);\n * // \"03...\"\n */\n\n\nexports.TrezorExportHDNode = TrezorExportHDNode;\n\nvar TrezorExportPublicKey =\n/*#__PURE__*/\nfunction (_TrezorExportHDNode) {\n  _inherits(TrezorExportPublicKey, _TrezorExportHDNode);\n\n  function TrezorExportPublicKey() {\n    _classCallCheck(this, TrezorExportPublicKey);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TrezorExportPublicKey).apply(this, arguments));\n  }\n\n  _createClass(TrezorExportPublicKey, [{\n    key: \"parse\",\n\n    /**\n     * Parses the public key from the HD node response.\n     *\n     * @param {object} payload - the original payload from the device response\n     * @returns {string} the (compressed) public key in hex\n     */\n    value: function parse(payload) {\n      return payload.publicKey;\n    }\n  }]);\n\n  return TrezorExportPublicKey;\n}(TrezorExportHDNode);\n/**\n * Returns the extended public key at a given BIP32 path.\n *\n * @extends {module:trezor.TrezorExportHDNode}\n * @example\n * import {MAINNET} from \"unchained-bitcoin\";\n * import {TrezorExportExtendedPublicKey} from \"unchained-wallets\";\n * const interaction = new TrezorExportExtendedPublicKey({network: MAINNET, bip32Path: \"m/48'/0'/0'\"});\n * const xpub = await interaction.run();\n * console.log(xpub);\n * // \"xpub...\"\n */\n\n\nexports.TrezorExportPublicKey = TrezorExportPublicKey;\n\nvar TrezorExportExtendedPublicKey =\n/*#__PURE__*/\nfunction (_TrezorExportHDNode2) {\n  _inherits(TrezorExportExtendedPublicKey, _TrezorExportHDNode2);\n\n  function TrezorExportExtendedPublicKey() {\n    _classCallCheck(this, TrezorExportExtendedPublicKey);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TrezorExportExtendedPublicKey).apply(this, arguments));\n  }\n\n  _createClass(TrezorExportExtendedPublicKey, [{\n    key: \"parse\",\n\n    /**\n     * Parses the extended public key from the HD node response.\n     *\n     * @param {object} payload the original payload from the device response\n     * @returns {string} the extended public key\n     */\n    value: function parse(payload) {\n      return payload.xpub;\n    }\n  }]);\n\n  return TrezorExportExtendedPublicKey;\n}(TrezorExportHDNode);\n/**\n * Returns a signature for a bitcoin transaction with inputs from one\n * or many multisig addresses.\n *\n * - `inputs` is an array of `UTXO` objects from `unchained-bitcoin`\n * - `outputs` is an array of `TransactionOutput` objects from `unchained-bitcoin`\n * - `bip32Paths` is an array of (`string`) BIP32 paths, one for each input, identifying the path on this device to sign that input with\n *\n * @example\n * import {\n *   generateMultisigFromHex, TESTNET, P2SH,\n * } from \"unchained-bitcoin\";\n * import {TrezorSignMultisigTransaction} from \"unchained-wallets\";\n * const redeemScript = \"5...ae\";\n * const inputs = [\n *   {\n *     txid: \"8d276c76b3550b145e44d35c5833bae175e0351b4a5c57dc1740387e78f57b11\",\n *     index: 1,\n *     multisig: generateMultisigFromHex(TESTNET, P2SH, redeemScript),\n *     amountSats: '1234000'\n *   },\n *   // other inputs...\n * ];\n * const outputs = [\n *   {\n *     amountSats: '1299659',\n *     address: \"2NGHod7V2TAAXC1iUdNmc6R8UUd4TVTuBmp\"\n *   },\n *   // other outputs...\n * ];\n * const interaction = new TrezorSignMultisigTransaction({\n *   network: TESTNET,\n *   inputs,\n *   outputs,\n *   bip32Paths: [\"m/45'/0'/0'/0\", // add more, 1 per input],\n * });\n * const signature = await interaction.run();\n * console.log(signatures);\n * // [\"ababab...\", // 1 per input]\n * @extends {module:trezor.TrezorInteraction}\n */\n\n\nexports.TrezorExportExtendedPublicKey = TrezorExportExtendedPublicKey;\n\nvar TrezorSignMultisigTransaction =\n/*#__PURE__*/\nfunction (_TrezorInteraction3) {\n  _inherits(TrezorSignMultisigTransaction, _TrezorInteraction3);\n\n  /**\n   * @param {object} options - options argument\n   * @param {string} options.network - bitcoin network\n   * @param {UTXO[]} options.inputs - inputs for the transaction\n   * @param {TransactionOutput[]} options.outputs - outputs for the transaction\n   * @param {string[]} options.bip32Paths - BIP32 paths on this device to sign with, one per each input\n   */\n  function TrezorSignMultisigTransaction(_ref3) {\n    var _this3;\n\n    var network = _ref3.network,\n        inputs = _ref3.inputs,\n        outputs = _ref3.outputs,\n        bip32Paths = _ref3.bip32Paths;\n\n    _classCallCheck(this, TrezorSignMultisigTransaction);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(TrezorSignMultisigTransaction).call(this, {\n      network: network\n    }));\n    _this3.inputs = inputs;\n    _this3.outputs = outputs;\n    _this3.bip32Paths = bip32Paths;\n    return _this3;\n  }\n  /**\n   * Adds messages describing the signing flow.\n   *\n   * @returns {module:interaction.Message[]} messages for this interaction\n   */\n\n\n  _createClass(TrezorSignMultisigTransaction, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(TrezorSignMultisigTransaction.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"Confirm in the Trezor Connect window that you want to 'Sign \".concat(this.network, \" transaction'.  You may be prompted to enter your PIN.\"),\n        code: \"trezor.connect.sign\"\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        version: \"One\",\n        text: \"Confirm each output on your Trezor device and approve the transaction.\",\n        messages: [{\n          text: \"For each output, your Trezor device will display the output amount and address.\",\n          action: TREZOR_RIGHT_BUTTON\n        }, {\n          text: \"Your Trezor device will display the total output amounts and fee amount.\",\n          action: TREZOR_RIGHT_BUTTON\n        }],\n        code: \"trezor.sign\"\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        version: \"T\",\n        text: \"Confirm each output on your Trezor device and approve the transaction.\",\n        messages: [{\n          text: \"For each input, your Trezor device will display a \\\"Confirm path\\\" dialogue displaying the input BIP32 path.  It is safe to continue\",\n          action: TREZOR_RIGHT_BUTTON\n        }, {\n          text: \"For each output, your Trezor device will display a \\\"Confirm sending\\\" dialogue displaying the output amount and address.\",\n          action: TREZOR_RIGHT_BUTTON\n        }, {\n          text: \"Your Trezor device will display the \\\"Confirm transaction\\\" dialogue displaying the total output amount and fee amount.\",\n          action: TREZOR_PUSH_AND_HOLD_BUTTON\n        }],\n        code: \"trezor.sign\"\n      });\n      return messages;\n    }\n    /**\n     * See {@link https://github.com/trezor/connect/blob/v8/docs/methods/signTransaction.md}.\n     *\n     * @returns {Array<function, Object>} TrezorConnect parameters\n     */\n\n  }, {\n    key: \"connectParams\",\n    value: function connectParams() {\n      var _this4 = this;\n\n      return [TrezorConnect.signTransaction, {\n        inputs: this.inputs.map(function (input, inputIndex) {\n          return trezorInput(input, _this4.bip32Paths[inputIndex]);\n        }),\n        outputs: this.outputs.map(function (output) {\n          return trezorOutput(output);\n        }),\n        coin: this.trezorCoin\n      }];\n    }\n    /**\n     * Parses the signature out of the response payload.\n     *\n     * Ensures each input's signature hasa a trailing `...01` {@link https://bitcoin.org/en/glossary/sighash-all SIGHASH_ALL} byte.\n     *\n     * @param {Object} payload - the original payload from the device response\n     * @returns {string[]} array of input signatures, one per input\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(payload) {\n      return (payload.signatures || []).map(function (inputSignature) {\n        return \"\".concat(inputSignature, \"01\");\n      });\n    }\n  }]);\n\n  return TrezorSignMultisigTransaction;\n}(TrezorInteraction);\n/**\n * Shows a multisig address on the device and prompts the user to\n * confirm it.\n *\n * @extends {module:trezor.TrezorInteraction}\n * @example\n * import {\n *   generateMultisigFromPublicKeys, MAINNET, P2SH,\n * } from \"unchained-bitcoin\";\n * import {TrezorConfirmMultisigAddress} from \"unchained-wallets\";\n * const multisig = generateMultisigFromPublicKeys(MAINNET, P2SH, 2, \"03a...\", \"03b...\");\n * const interaction = new TrezorConfirmMultisigAddress({network: MAINNET, bip32Path: \"m/45'/0'/0'/0/0\", multisig});\n * await interaction.run();\n */\n\n\nexports.TrezorSignMultisigTransaction = TrezorSignMultisigTransaction;\n\nvar TrezorConfirmMultisigAddress =\n/*#__PURE__*/\nfunction (_TrezorInteraction4) {\n  _inherits(TrezorConfirmMultisigAddress, _TrezorInteraction4);\n\n  /**\n   * Most of the information required to confirm a multisig address\n   * lives in the `Multisig` object from `unchained-bitcoin`.\n   *\n   * @param {object} options - options argument\n   * @param {string} options.network - bitcoin network\n   * @param {string} options.bip32Path - BIP32 path to the public key on this device used in the multisig address\n   * @param {Multisig} options.multisig - multisig object\n   */\n  function TrezorConfirmMultisigAddress(_ref4) {\n    var _this5;\n\n    var network = _ref4.network,\n        bip32Path = _ref4.bip32Path,\n        multisig = _ref4.multisig;\n\n    _classCallCheck(this, TrezorConfirmMultisigAddress);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(TrezorConfirmMultisigAddress).call(this, {\n      network: network\n    }));\n    _this5.bip32Path = bip32Path;\n    _this5.multisig = multisig;\n    return _this5;\n  }\n  /**\n   * Adds messages about BIP32 path warnings.\n   *\n   * @returns {module:interaction.Message[]} messages for this interaction\n   *\n   */\n\n\n  _createClass(TrezorConfirmMultisigAddress, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(TrezorConfirmMultisigAddress.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"Confirm in the Trezor Connect window that you want to 'Export \".concat(this.trezorCoin, \" address'.  You may be prompted to enter your PIN.\"),\n        code: \"trezor.connect.confirm_address\"\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        version: \"One\",\n        text: \"Confirm the addresss on your Trezor device.\",\n        messages: [// FIXME this only shows up on P2SH?\n        {\n          text: \"Your Trezor device may display a warning \\\"Wrong address path for selected coin\\\".  It is safe to continue\",\n          action: TREZOR_RIGHT_BUTTON\n        }, {\n          text: \"Your Trezor device will display the multisig address and BIP32 path.\",\n          action: TREZOR_RIGHT_BUTTON\n        }],\n        code: \"trezor.confirm_address\"\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        version: \"T\",\n        text: \"Confirm the addresss on your Trezor device.\",\n        messages: [{\n          text: \"For each signer in your quorum, your Trezor device will display a \\\"Confirm path\\\" dialogue displaying the signer's BIP32 path.  It is safe to continue\",\n          action: TREZOR_RIGHT_BUTTON\n        }, {\n          text: \"Your Trezor device will display the multisig address.\",\n          action: TREZOR_RIGHT_BUTTON\n        }],\n        code: \"trezor.confirm_address\"\n      });\n      return messages;\n    }\n    /**\n     * See {@link https://github.com/trezor/connect/blob/v8/docs/methods/getAddress.md}.\n     *\n     * @returns {Array<function, Object>} TrezorConnect parameters\n     */\n\n  }, {\n    key: \"connectParams\",\n    value: function connectParams() {\n      return [TrezorConnect.getAddress, {\n        path: this.bip32Path,\n        address: (0, _unchainedBitcoin.multisigAddress)(this.multisig),\n        showOnTrezor: true,\n        coin: this.trezorCoin,\n        crossChain: true,\n        multisig: {\n          m: (0, _unchainedBitcoin.multisigRequiredSigners)(this.multisig),\n          pubkeys: (0, _unchainedBitcoin.multisigPublicKeys)(this.multisig).map(function (publicKey) {\n            return trezorPublicKey(publicKey);\n          })\n        },\n        scriptType: ADDRESS_SCRIPT_TYPES[(0, _unchainedBitcoin.multisigAddressType)(this.multisig)]\n      }];\n    }\n  }]);\n\n  return TrezorConfirmMultisigAddress;\n}(TrezorInteraction);\n/**\n * Returns the Trezor API version of the given network.\n *\n * @param {string} network - bitcoin network\n * @returns {string} Trezor API spelling for this network\n */\n\n\nexports.TrezorConfirmMultisigAddress = TrezorConfirmMultisigAddress;\n\nfunction trezorCoin(network) {\n  return network === _unchainedBitcoin.MAINNET ? \"Bitcoin\" : \"Testnet\";\n}\n\nfunction trezorInput(input, bip32Path) {\n  var requiredSigners = (0, _unchainedBitcoin.multisigRequiredSigners)(input.multisig);\n  var addressType = (0, _unchainedBitcoin.multisigAddressType)(input.multisig);\n  var spendType = ADDRESS_SCRIPT_TYPES[addressType];\n  return _objectSpread({\n    script_type: spendType,\n    multisig: {\n      m: requiredSigners,\n      pubkeys: (0, _unchainedBitcoin.multisigPublicKeys)(input.multisig).map(function (publicKey) {\n        return trezorPublicKey(publicKey);\n      }),\n      signatures: Array(requiredSigners).fill('')\n    },\n    prev_hash: input.txid,\n    prev_index: input.index,\n    address_n: (0, _unchainedBitcoin.bip32PathToSequence)(bip32Path)\n  }, input.amountSats && {\n    amount: (0, _bignumber[\"default\"])(input.amountSats).toString()\n  });\n}\n\nfunction trezorPublicKey(publicKey) {\n  return {\n    address_n: [],\n    node: {\n      // FIXME are all these 0's OK?\n      depth: 0,\n      child_num: 0,\n      fingerprint: 0,\n      chain_code: '0'.repeat(64),\n      public_key: publicKey\n    }\n  };\n}\n\nfunction trezorOutput(output) {\n  return {\n    amount: (0, _bignumber[\"default\"])(output.amountSats).toFixed(0),\n    address: output.address,\n    script_type: 'PAYTOADDRESS'\n  };\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LedgerSignMultisigTransaction = exports.LedgerExportExtendedPublicKey = exports.LedgerExportPublicKey = exports.LedgerGetMetadata = exports.LedgerBitcoinInteraction = exports.LedgerDashboardInteraction = exports.LedgerInteraction = exports.LEDGER_BOTH_BUTTONS = exports.LEDGER_RIGHT_BUTTON = exports.LEDGER_LEFT_BUTTON = exports.LEDGER = void 0;\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.promise\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"core-js/modules/es6.reflect.get\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.string.ends-with\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _unchainedBitcoin = require(\"unchained-bitcoin\");\n\nvar _interaction = require(\"./interaction\");\n\nvar _splitTransaction = require(\"@ledgerhq/hw-app-btc/lib/splitTransaction\");\n\nvar _serializeTransaction = require(\"@ledgerhq/hw-app-btc/lib/serializeTransaction\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * Constant defining Ledger interactions.\n *\n * @type {string}\n * @default ledger\n */\nvar LEDGER = 'ledger';\nexports.LEDGER = LEDGER;\n\nvar TransportU2F = require(\"@ledgerhq/hw-transport-u2f\")[\"default\"];\n\nvar TransportWebUsb = require(\"@ledgerhq/hw-transport-webusb\")[\"default\"];\n\nvar LedgerBtc = require(\"@ledgerhq/hw-app-btc\")[\"default\"];\n/**\n * Constant representing the action of pushing the left button on a\n * Ledger device.\n *\n * @type {string}\n * @default 'ledger_left_button'\n */\n\n\nvar LEDGER_LEFT_BUTTON = 'ledger_left_button';\n/**\n * Constant representing the action of pushing the right button on a\n * Ledger device.\n *\n * @type {string}\n * @default 'ledger_right_button'\n */\n\nexports.LEDGER_LEFT_BUTTON = LEDGER_LEFT_BUTTON;\nvar LEDGER_RIGHT_BUTTON = 'ledger_right_button';\n/**\n * Constant representing the action of pushing both buttons on a\n * Ledger device.\n *\n * @type {string}\n * @default 'ledger_both_buttons'\n */\n\nexports.LEDGER_RIGHT_BUTTON = LEDGER_RIGHT_BUTTON;\nvar LEDGER_BOTH_BUTTONS = 'ledger_both_buttons';\n/**\n * Base class for interactions with Ledger hardware wallets.\n *\n * Subclasses must implement their own `run()` method.  They may use\n * the `withTransport` and `withApp` methods to connect to the Ledger\n * API's transport or app layers, respectively.\n *\n * Errors are not caught, so users of this class (and its subclasses)\n * should use `try...catch` as always.\n *\n * @extends {module:interaction.DirectKeystoreInteraction}\n * @example\n * import {LedgerInteraction} from \"unchained-wallets\";\n * // Simple subclass\n *\n * class SimpleLedgerInteraction extends LedgerInteraction {\n *\n *   constructor({param}) {\n *     super({});\n *     this.param =  param;\n *   }\n *\n *   async run() {\n *     return await this.withApp(async (app, transport) => {\n *       return app.doSomething(this.param); // Not a real Ledger API call\n *     });\n *   }\n * \n * }\n *\n * // usage\n * const interaction = new SimpleLedgerInteraction({param: \"foo\"});\n * const result = await interaction.run();\n * console.log(result); // whatever value `app.doSomething(...)` returns\n *\n */\n\nexports.LEDGER_BOTH_BUTTONS = LEDGER_BOTH_BUTTONS;\n\nvar LedgerInteraction =\n/*#__PURE__*/\nfunction (_DirectKeystoreIntera) {\n  _inherits(LedgerInteraction, _DirectKeystoreIntera);\n\n  function LedgerInteraction() {\n    _classCallCheck(this, LedgerInteraction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LedgerInteraction).apply(this, arguments));\n  }\n\n  _createClass(LedgerInteraction, [{\n    key: \"messages\",\n\n    /**\n     * Adds `pending` messages at the `info` level about ensuring the\n     * device is plugged in (`device.connect`) and unlocked\n     * (`device.unlock`).  Adds an `active` message at the `info` level\n     * when communicating with the device (`device.active`).\n     *\n     * @return {module:interaction.Message[]} messages for ths interaction\n     */\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(LedgerInteraction.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: _interaction.PENDING,\n        level: _interaction.INFO,\n        text: \"Please plug in and unlock your Ledger.\",\n        code: \"device.setup\"\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"Communicating with Ledger...\",\n        code: \"device.active\"\n      });\n      return messages;\n    }\n    /**\n     * Can be called by a subclass during its `run()` method.\n     *\n     * Creates a transport layer connection and passes control to the\n     * `callback` function, with the transport API as the first argument\n     * to the function.\n     *\n     * See the [Ledger API]{@link https://github.com/LedgerHQ/ledgerjs} for general information or a [specific transport API]{@link https://github.com/LedgerHQ/ledgerjs/tree/master/packages/hw-transport-u2f} for examples of API calls.\n     *\n     * @param {function} callback -- asynchronous function accepting a single parameter `transport`\n     * @returns {Promise} does the work of setting up a transport connection\n     * @example\n     * async run() {\n     *   return await this.withTransport(async (transport) => {\n     *     return transport.doSomething(); // Not a real Ledger transport API call\n     *   });\n     * }\n     */\n\n  }, {\n    key: \"withTransport\",\n    value: function () {\n      var _withTransport = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(callback) {\n        var useU2F, transport, _transport;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                useU2F = this.environment.satisfies({\n                  firefox: \">70\"\n                });\n\n                if (!useU2F) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.prev = 2;\n                _context.next = 5;\n                return TransportU2F.create();\n\n              case 5:\n                transport = _context.sent;\n                return _context.abrupt(\"return\", callback(transport));\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n                throw new Error(_context.t0.message);\n\n              case 12:\n                _context.prev = 12;\n                _context.next = 15;\n                return TransportWebUsb.create();\n\n              case 15:\n                _transport = _context.sent;\n                return _context.abrupt(\"return\", callback(_transport));\n\n              case 19:\n                _context.prev = 19;\n                _context.t1 = _context[\"catch\"](12);\n\n                if (_context.t1.message) {\n                  if (_context.t1.message === 'No device selected.') {\n                    _context.t1.message = \"Select your device in the WebUSB dialog box. Make sure it's plugged in, unlocked, and has the Bitcoin app open.\";\n                  }\n\n                  if (_context.t1.message === 'undefined is not an object (evaluating \\'navigator.usb.getDevices\\')') {\n                    _context.t1.message = \"Safari is not a supported browser.\";\n                  }\n                }\n\n                throw new Error(_context.t1.message);\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9], [12, 19]]);\n      }));\n\n      function withTransport(_x) {\n        return _withTransport.apply(this, arguments);\n      }\n\n      return withTransport;\n    }()\n    /**\n     * Can be called by a subclass during its `run()` method.\n     *\n     * Creates a transport layer connection, initializes a bitcoin app\n     * object, and passes control to the `callback` function, with the\n     * app API as the first argument to the function and the transport\n     * API as the second.\n     *\n     * See the [Ledger API]{@link https://github.com/LedgerHQ/ledgerjs} for general information or the [bitcoin app API]{@link https://github.com/LedgerHQ/ledgerjs/tree/master/packages/hw-app-btc} for examples of API calls.\n     *\n     * @param {function} callback -- accepts two parameters, `app` and `transport`, which are the Ledger APIs for the bitcoin app and the transport layer, respectively.\n     * @returns {Promise} does the work of setting up an app instance (and transport connection)\n     * @example\n     * async run() {\n     *   return await this.withApp(async (app, transport) => {\n     *     return app.doSomething(); // Not a real Ledger bitcoin app API call\n     *   });\n     * }\n     */\n\n  }, {\n    key: \"withApp\",\n    value: function withApp(callback) {\n      return this.withTransport(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee2(transport) {\n          var app;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  app = new LedgerBtc(transport);\n                  return _context2.abrupt(\"return\", callback(app, transport));\n\n                case 2:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }]);\n\n  return LedgerInteraction;\n}(_interaction.DirectKeystoreInteraction);\n/**\n * Base class for interactions which must occur when the Ledger device\n * is not in any app but in the dashboard.\n *\n * @extends {module:ledger.LedgerInteraction}\n *\n */\n\n\nexports.LedgerInteraction = LedgerInteraction;\n\nvar LedgerDashboardInteraction =\n/*#__PURE__*/\nfunction (_LedgerInteraction) {\n  _inherits(LedgerDashboardInteraction, _LedgerInteraction);\n\n  function LedgerDashboardInteraction() {\n    _classCallCheck(this, LedgerDashboardInteraction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LedgerDashboardInteraction).apply(this, arguments));\n  }\n\n  _createClass(LedgerDashboardInteraction, [{\n    key: \"messages\",\n\n    /**\n     * Adds `pending` and `active` messages at the `info` level urging\n     * the user to be in the Ledger dashboard, not the bitcoin app\n     * (`ledger.app.dashboard`).\n     *\n     * @return {module:interaction.Message[]} messages for this interaction\n     */\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(LedgerDashboardInteraction.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: _interaction.PENDING,\n        level: _interaction.INFO,\n        text: \"Make sure you have the main Ledger dashboard open, NOT the Bitcoin app.\",\n        code: \"ledger.app.dashboard\"\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"Make sure you have the main Ledger dashboard open, NOT the Bitcoin app.\",\n        code: \"ledger.app.dashboard\"\n      });\n      return messages;\n    }\n  }]);\n\n  return LedgerDashboardInteraction;\n}(LedgerInteraction);\n/**\n * Base class for interactions which must occur when the Ledger device\n * is open to the bitcoin app.\n *\n * @extends {module:ledger.LedgerInteraction}\n */\n\n\nexports.LedgerDashboardInteraction = LedgerDashboardInteraction;\n\nvar LedgerBitcoinInteraction =\n/*#__PURE__*/\nfunction (_LedgerInteraction2) {\n  _inherits(LedgerBitcoinInteraction, _LedgerInteraction2);\n\n  function LedgerBitcoinInteraction() {\n    _classCallCheck(this, LedgerBitcoinInteraction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LedgerBitcoinInteraction).apply(this, arguments));\n  }\n\n  _createClass(LedgerBitcoinInteraction, [{\n    key: \"messages\",\n\n    /**\n     * Adds `pending` and `active` messages at the `info` level urging\n     * the user to be in the bitcoin app (`ledger.app.bitcoin`).\n     *\n     * @return {module:interaction.Message[]} messages for this interaction\n     */\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(LedgerBitcoinInteraction.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: _interaction.PENDING,\n        level: _interaction.INFO,\n        text: \"Then open the Bitcoin app.\",\n        code: \"ledger.app.bitcoin\"\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"Make sure you have opened the Bitcoin app.\",\n        code: \"ledger.app.bitcoin\"\n      });\n      return messages;\n    }\n  }]);\n\n  return LedgerBitcoinInteraction;\n}(LedgerInteraction);\n/**\n * Returns metadata about Ledger device.\n *\n * Includes model name, firmware & MCU versions.\n *\n * @extends {module:ledger.LedgerDashboardInteraction}\n * @example\n * import {LedgerGetMetadata} from \"unchained-wallets\";\n * const interaction = new LedgerGetMetadata();\n * const result = await interaction.run();\n * console.log(result);\n * {\n *   spec: \"Nano S v1.4.2 (MCU v1.7)\",\n *   model: \"Nano S\",\n *   version: {\n *     major: \"1\",\n *     minor: \"4\",\n *     patch: \"2\",\n *     string: \"1.4.2\",\n *   },\n *   mcuVersion: {\n *     major: \"1\",\n *     minor: \"7\",\n *     string: \"1.7\",\n *   }\n * }\n *\n */\n\n\nexports.LedgerBitcoinInteraction = LedgerBitcoinInteraction;\n\nvar LedgerGetMetadata =\n/*#__PURE__*/\nfunction (_LedgerDashboardInter) {\n  _inherits(LedgerGetMetadata, _LedgerDashboardInter);\n\n  function LedgerGetMetadata() {\n    _classCallCheck(this, LedgerGetMetadata);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LedgerGetMetadata).apply(this, arguments));\n  }\n\n  _createClass(LedgerGetMetadata, [{\n    key: \"run\",\n    // FIXME entire implementation here is rickety AF.\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.withTransport(\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  regeneratorRuntime.mark(function _callee3(transport) {\n                    var rawResult;\n                    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            transport.setScrambleKey('B0L0S');\n                            _context3.next = 3;\n                            return transport.send(0xe0, 0x01, 0x00, 0x00);\n\n                          case 3:\n                            rawResult = _context3.sent;\n                            return _context3.abrupt(\"return\", _this.parseMetadata(rawResult));\n\n                          case 5:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function (_x3) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function run() {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n    /**\n     * Parses the binary data returned from the Ledger API call into a\n     * metadata object.\n     *\n     * @param {ByteArray} response - binary response data\n     * @returns {Object} - device metadata\n     */\n\n  }, {\n    key: \"parseMetadata\",\n    value: function parseMetadata(response) {\n      try {\n        // From\n        //\n        //   https://github.com/LedgerHQ/ledger-live-common/blob/master/src/hw/getVersion.js\n        //   https://github.com/LedgerHQ/ledger-live-common/blob/master/src/hw/getDeviceInfo.js\n        //   https://git.xmr.pm/LedgerHQ/ledger-live-common/commit/9ffc75acfc7f1e9aa9101a32b3e7481770fb3b89\n        var PROVIDERS = {\n          \"\": 1,\n          das: 2,\n          club: 3,\n          shitcoins: 4,\n          ee: 5\n        };\n        var ManagerAllowedFlag = 0x08;\n        var PinValidatedFlag = 0x80;\n\n        var byteArray = _toConsumableArray(response);\n\n        var data = byteArray.slice(0, byteArray.length - 2);\n        var targetIdStr = Buffer.from(data.slice(0, 4));\n        var targetId = targetIdStr.readUIntBE(0, 4);\n        var seVersionLength = data[4];\n        var seVersion = Buffer.from(data.slice(5, 5 + seVersionLength)).toString();\n        var flagsLength = data[5 + seVersionLength];\n        var flags = Buffer.from(data.slice(5 + seVersionLength + 1, 5 + seVersionLength + 1 + flagsLength));\n        var mcuVersionLength = data[5 + seVersionLength + 1 + flagsLength];\n        var mcuVersion = Buffer.from(data.slice(7 + seVersionLength + flagsLength, 7 + seVersionLength + flagsLength + mcuVersionLength));\n\n        if (mcuVersion[mcuVersion.length - 1] === 0) {\n          mcuVersion = mcuVersion.slice(0, mcuVersion.length - 1);\n        }\n\n        mcuVersion = mcuVersion.toString();\n\n        if (!seVersionLength) {\n          seVersion = \"0.0.0\";\n          flags = Buffer.allocUnsafeSlow(0);\n          mcuVersion = \"\";\n        }\n        /* eslint-disable no-unused-vars, no-bitwise */\n\n\n        var isOSU = seVersion.includes(\"-osu\");\n        var version = seVersion.replace(\"-osu\", \"\");\n        var m = seVersion.match(/([0-9]+.[0-9]+)(.[0-9]+)?(-(.*))?/);\n\n        var _ref3 = m || [],\n            _ref4 = _slicedToArray(_ref3, 5),\n            majMin = _ref4[1],\n            providerName = _ref4[4];\n\n        var providerId = PROVIDERS[providerName] || 1;\n        var isBootloader = (targetId & 0xf0000000) !== 0x30000000;\n        var flag = flags.length > 0 ? flags[0] : 0;\n        var managerAllowed = Boolean(flag & ManagerAllowedFlag);\n        var pin = Boolean(flag & PinValidatedFlag);\n        /* eslint-enable */\n\n        var _split = (version || '').split('.'),\n            _split2 = _slicedToArray(_split, 3),\n            majorVersion = _split2[0],\n            minorVersion = _split2[1],\n            patchVersion = _split2[2];\n\n        var _split3 = (mcuVersion || '').split('.'),\n            _split4 = _slicedToArray(_split3, 2),\n            mcuMajorVersion = _split4[0],\n            mcuMinorVersion = _split4[1]; // https://gist.github.com/TamtamHero/b7651ffe6f1e485e3886bf4aba673348\n        // +-----------------+------------+\n        // |    FirmWare     | Target ID  |\n        // +-----------------+------------+\n        // | Nano S <= 1.3.1 | 0x31100002 |\n        // | Nano S 1.4.x    | 0x31100003 |\n        // | Nano S 1.5.x    | 0x31100004 |\n        // |                 |            |\n        // | Blue 2.0.x      | 0x31000002 |\n        // | Blue 2.1.x      | 0x31000004 |\n        // | Blue 2.1.x V2   | 0x31010004 |\n        // |                 |            |\n        // | Nano X          | 0x33000004 |\n        // |                 |            |\n        // | MCU,any version | 0x01000001 |\n        // +-----------------+------------+\n        //\n        //  Order matters -- high to low minTargetId\n\n\n        var MODEL_RANGES = [{\n          minTargetId: 0x33000004,\n          model: \"Nano X\"\n        }, {\n          minTargetId: 0x31100002,\n          model: \"Nano S\"\n        }, {\n          minTargetId: 0x31100002,\n          model: \"Blue\"\n        }, {\n          minTargetId: 0x01000001,\n          model: \"MCU\"\n        }];\n        var model = 'Unknown';\n\n        if (targetId) {\n          for (var i = 0; i < MODEL_RANGES.length; i++) {\n            var range = MODEL_RANGES[i];\n\n            if (targetId >= range.minTargetId) {\n              model = range.model;\n              break;\n            }\n          }\n        }\n\n        var spec = \"\".concat(model, \" v\").concat(version, \" (MCU v\").concat(mcuVersion, \")\"); // if (pin) {\n        //   spec += \" w/PIN\";\n        // }\n\n        return {\n          spec: spec,\n          model: model,\n          version: {\n            major: majorVersion,\n            minor: minorVersion,\n            patch: patchVersion,\n            string: version\n          },\n          mcuVersion: {\n            major: mcuMajorVersion,\n            minor: mcuMinorVersion,\n            string: mcuVersion\n          } // pin,\n\n        };\n      } catch (e) {\n        console.error(e);\n        throw new Error(\"Unable to parse metadata from Ledger device.\");\n      }\n    }\n  }]);\n\n  return LedgerGetMetadata;\n}(LedgerDashboardInteraction);\n/**\n * Base class for interactions exporting information about an HD node\n * at a given BIP32 path.\n *\n * You may want to use `LedgerExportPublicKey` or\n * `LedgerExportExtendedPublicKey` directly.\n *\n * @extends {module:ledger.LedgerBitcoinInteraction}\n * @example\n * import {MAINNET} from \"unchained-bitcoin\";\n * import {LedgerExportHDNode} from \"unchained-wallets\";\n * const interaction = new LedgerExportHDNode({network: MAINNET, bip32Path: \"m/48'/0'/0'/2'/0\"});\n * const node = await interaction.run();\n * console.log(node);\n */\n\n\nexports.LedgerGetMetadata = LedgerGetMetadata;\n\nvar LedgerExportHDNode =\n/*#__PURE__*/\nfunction (_LedgerBitcoinInterac) {\n  _inherits(LedgerExportHDNode, _LedgerBitcoinInterac);\n\n  /**\n   * Requires a valid BIP32 path to the node to export.\n   *\n   * @param {object} options - options argument\n   * @param {string} bip32Path - the BIP32 path for the HD node\n   */\n  function LedgerExportHDNode(_ref5) {\n    var _this2;\n\n    var bip32Path = _ref5.bip32Path;\n\n    _classCallCheck(this, LedgerExportHDNode);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(LedgerExportHDNode).call(this));\n    _this2.bip32Path = bip32Path;\n    return _this2;\n  }\n  /**\n   * Adds messages related to the warnings Ledger devices produce on various BIP32 paths.\n   *\n   * @returns {module:interaction.Message[]} messages for this interaction\n   */\n\n\n  _createClass(LedgerExportHDNode, [{\n    key: \"messages\",\n    value: function messages() {\n      return _get(_getPrototypeOf(LedgerExportHDNode.prototype), \"messages\", this).call(this);\n    }\n    /**\n     * Returns whether or not the Ledger device will display a warning\n     * to the user about an unusual BIP32 path.\n     *\n     * A \"usual\" BIP32 path is exactly 5 segments long.  The segments\n     * have the following constraints:\n     *\n     * - Segment 1: Must be equal to `44'`\n     * - Segment 2: Can have any value\n     * - Segment 3: Must be between `0'` and `100'`\n     * - Segment 4: Must be equal to `0`\n     * - Segment 5: Must be between `0 and 50000`\n     *\n     * Any other kind of path is considered unusual and will trigger the\n     * warning.\n     *\n     * @returns {boolean} whether a BIP32 path warning will be displayed\n     */\n\n  }, {\n    key: \"hasBIP32PathWarning\",\n    value: function hasBIP32PathWarning() {\n      // 0 -> 44'\n      // 1 -> anything\n      // 2 -> 0' - 100'\n      // 3 -> 0\n      // 4 -> 0 - 50000\n      var indices = (0, _unchainedBitcoin.bip32PathToSequence)(this.bip32Path);\n      var hardened0 = (0, _unchainedBitcoin.hardenedBIP32Index)(0);\n      var hardened44 = (0, _unchainedBitcoin.hardenedBIP32Index)(44);\n      var hardened100 = (0, _unchainedBitcoin.hardenedBIP32Index)(100);\n\n      if (indices.length !== 5) {\n        return true;\n      }\n\n      if (indices[0] !== hardened44) {\n        return true;\n      }\n\n      if (indices[2] < hardened0 || indices[2] > hardened100) {\n        return true;\n      }\n\n      if (indices[3] !== 0) {\n        return true;\n      }\n\n      if (indices[4] < 0 || indices[4] > 50000) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * See {@link https://github.com/LedgerHQ/ledgerjs/tree/master/packages/hw-app-btc#getwalletpublickey}.\n     *\n     * @returns {object} the HD node object.\n     */\n\n  }, {\n    key: \"run\",\n    value: function run() {\n      var _this3 = this;\n\n      return this.withApp(\n      /*#__PURE__*/\n      function () {\n        var _ref6 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee5(app) {\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  return _context5.abrupt(\"return\", app.getWalletPublicKey(_this3.bip32Path));\n\n                case 1:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function (_x4) {\n          return _ref6.apply(this, arguments);\n        };\n      }());\n    }\n  }]);\n\n  return LedgerExportHDNode;\n}(LedgerBitcoinInteraction);\n/**\n * Returns the public key at a given BIP32 path.\n *\n * @extends {module:ledger.LedgerExportHDNode}\n * @example\n * import {LedgerExportPublicKey} from \"unchained-wallets\";\n * const interaction = new LedgerExportPublicKey({bip32Path: \"m/48'/0'/0'/2'/0\"});\n * const publicKey = await interaction.run();\n * console.log(publicKey);\n * // \"03...\"\n */\n\n\nvar LedgerExportPublicKey =\n/*#__PURE__*/\nfunction (_LedgerExportHDNode) {\n  _inherits(LedgerExportPublicKey, _LedgerExportHDNode);\n\n  function LedgerExportPublicKey() {\n    _classCallCheck(this, LedgerExportPublicKey);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LedgerExportPublicKey).apply(this, arguments));\n  }\n\n  _createClass(LedgerExportPublicKey, [{\n    key: \"run\",\n\n    /**\n     * Parses out and compresses the public key from the response of\n     * `LedgerExportHDNode`.\n     *\n     * @returns {string} -- (compressed) public key in hex\n     */\n    value: function () {\n      var _run2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6() {\n        var result;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _get(_getPrototypeOf(LedgerExportPublicKey.prototype), \"run\", this).call(this);\n\n              case 2:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", this.parsePublicKey((result || {}).publicKey));\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function run() {\n        return _run2.apply(this, arguments);\n      }\n\n      return run;\n    }()\n    /**\n     * Compress the given public key.\n     *\n     * @param {string} publicKey - the uncompressed public key in hex\n     * @returns {string} - the compressed public key in hex\n     *\n     */\n\n  }, {\n    key: \"parsePublicKey\",\n    value: function parsePublicKey(publicKey) {\n      if (publicKey) {\n        try {\n          return (0, _unchainedBitcoin.compressPublicKey)(publicKey);\n        } catch (e) {\n          console.error(e);\n          throw new Error(\"Unable to compress public key from Ledger device.\");\n        }\n      } else {\n        throw new Error(\"Received no public key from Ledger device.\");\n      }\n    }\n  }]);\n\n  return LedgerExportPublicKey;\n}(LedgerExportHDNode);\n/**\n * Class for wallet extended public key (xpub) interaction at a given BIP32 path.\n * @extends {module:ledger.LedgerExportHDNode}\n */\n\n\nexports.LedgerExportPublicKey = LedgerExportPublicKey;\n\nvar LedgerExportExtendedPublicKey =\n/*#__PURE__*/\nfunction (_LedgerExportHDNode2) {\n  _inherits(LedgerExportExtendedPublicKey, _LedgerExportHDNode2);\n\n  function LedgerExportExtendedPublicKey(_ref7) {\n    var _this4;\n\n    var bip32Path = _ref7.bip32Path,\n        network = _ref7.network;\n\n    _classCallCheck(this, LedgerExportExtendedPublicKey);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(LedgerExportExtendedPublicKey).call(this, {\n      bip32Path: bip32Path\n    }));\n    _this4.network = network;\n    return _this4;\n  }\n\n  _createClass(LedgerExportExtendedPublicKey, [{\n    key: \"messages\",\n    value: function messages() {\n      return _get(_getPrototypeOf(LedgerExportExtendedPublicKey.prototype), \"messages\", this).call(this);\n    }\n    /**\n     * Get fingerprint from parent pubkey. This is useful for generating xpubs\n     * which need the fingerprint of the parent pubkey\n     * @returns {string} fingerprint\n     */\n\n  }, {\n    key: \"getFingerprint\",\n    value: function () {\n      var _getFingerprint = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7() {\n        var pubkey;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.getParentPublicKey();\n\n              case 2:\n                pubkey = _context7.sent;\n                return _context7.abrupt(\"return\", (0, _unchainedBitcoin.getFingerprintFromPublicKey)(pubkey));\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getFingerprint() {\n        return _getFingerprint.apply(this, arguments);\n      }\n\n      return getFingerprint;\n    }()\n  }, {\n    key: \"getParentPublicKey\",\n    value: function getParentPublicKey() {\n      var _this5 = this;\n\n      return this.withApp(\n      /*#__PURE__*/\n      function () {\n        var _ref8 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee8(app) {\n          var parentPath;\n          return regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  parentPath = (0, _unchainedBitcoin.getParentPath)(_this5.bip32Path);\n                  _context8.next = 3;\n                  return app.getWalletPublicKey(parentPath);\n\n                case 3:\n                  return _context8.abrupt(\"return\", _context8.sent.publicKey);\n\n                case 4:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8);\n        }));\n\n        return function (_x5) {\n          return _ref8.apply(this, arguments);\n        };\n      }());\n    }\n    /**\n     * Retrieve extended public key (xpub) from Ledger device for a given BIP32 path\n     * @example\n     * import {LedgerExportExtendedPublicKey} from \"unchained-wallets\";\n     * const interaction = new LedgerExportExtendedPublicKey({network, bip32Path});\n     * const xpub = await interaction.run();\n     * console.log(xpub);\n     * @returns {string} extended public key(xpub) for the BIP32 path of a given instance\n     */\n\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run3 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee9() {\n        var walletPublicKey, fingerprint;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return _get(_getPrototypeOf(LedgerExportExtendedPublicKey.prototype), \"run\", this).call(this);\n\n              case 2:\n                walletPublicKey = _context9.sent;\n                _context9.next = 5;\n                return this.getFingerprint();\n\n              case 5:\n                fingerprint = _context9.sent;\n                return _context9.abrupt(\"return\", (0, _unchainedBitcoin.deriveExtendedPublicKey)(this.bip32Path, walletPublicKey.publicKey, walletPublicKey.chainCode, fingerprint, this.network));\n\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function run() {\n        return _run3.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }]);\n\n  return LedgerExportExtendedPublicKey;\n}(LedgerExportHDNode);\n/**\n * Returns a signature for a bitcoin transaction with inputs from one\n * or many multisig addresses.\n *\n * - `inputs` is an array of `UTXO` objects from `unchained-bitcoin`\n * - `outputs` is an array of `TransactionOutput` objects from `unchained-bitcoin`\n * - `bip32Paths` is an array of (`string`) BIP32 paths, one for each input, identifying the path on this device to sign that input with\n *\n * @extends {module:ledger.LedgerBitcoinInteraction}\n * @example\n * import {\n *   generateMultisigFromHex, TESTNET, P2SH,\n * } from \"unchained-bitcoin\";\n * import {LedgerSignMultisigTransaction} from \"unchained-wallets\";\n * const redeemScript = \"5...ae\";\n * const inputs = [\n *   {\n *     txid: \"8d276c76b3550b145e44d35c5833bae175e0351b4a5c57dc1740387e78f57b11\",\n *     index: 1,\n *     multisig: generateMultisigFromHex(TESTNET, P2SH, redeemScript),\n *     amountSats: '1234000'\n *   },\n *   // other inputs...\n * ];\n * const outputs = [\n *   {\n *     amountSats: '1299659',\n *     address: \"2NGHod7V2TAAXC1iUdNmc6R8UUd4TVTuBmp\"\n *   },\n *   // other outputs...\n * ];\n * const interaction = new LedgerSignMultisigTransaction({\n *   network: TESTNET,\n *   inputs,\n *   outputs,\n *   bip32Paths: [\"m/45'/0'/0'/0\", // add more, 1 per input],\n * });\n * const signature = await interaction.run();\n * console.log(signatures);\n * // [\"ababab...\", // 1 per input]\n */\n\n\nexports.LedgerExportExtendedPublicKey = LedgerExportExtendedPublicKey;\n\nvar LedgerSignMultisigTransaction =\n/*#__PURE__*/\nfunction (_LedgerBitcoinInterac2) {\n  _inherits(LedgerSignMultisigTransaction, _LedgerBitcoinInterac2);\n\n  /**\n   * @param {object} options - options argument\n   * @param {string} options.network - bitcoin network\n   * @param {array<object>} options.inputs - inputs for the transaction\n   * @param {array<object>} options.outputs - outputs for the transaction\n   * @param {array<string>} options.bip32Paths - BIP32 paths\n   */\n  function LedgerSignMultisigTransaction(_ref9) {\n    var _this6;\n\n    var network = _ref9.network,\n        inputs = _ref9.inputs,\n        outputs = _ref9.outputs,\n        bip32Paths = _ref9.bip32Paths;\n\n    _classCallCheck(this, LedgerSignMultisigTransaction);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(LedgerSignMultisigTransaction).call(this));\n    _this6.network = network;\n    _this6.inputs = inputs;\n    _this6.outputs = outputs;\n    _this6.bip32Paths = bip32Paths;\n    return _this6;\n  }\n  /**\n   * Adds messages describing the signing flow.\n   *\n   * @returns {module:interaction.Message[]} messages for this interaction\n   */\n\n\n  _createClass(LedgerSignMultisigTransaction, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(LedgerSignMultisigTransaction.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.WARNING,\n        code: \"ledger.sign.delay\",\n        text: \"Your Ledger device may take up to several minutes to process a transaction with many inputs.\",\n        preProcessingTime: this.preProcessingTime(),\n        postProcessingTime: this.postProcessingTime()\n      });\n\n      if (this.anySegwitInputs()) {\n        messages.push({\n          state: _interaction.ACTIVE,\n          level: _interaction.INFO,\n          code: \"ledger.sign\",\n          version: \"<1.6.0\",\n          text: \"Your Ledger will ask you to \\\"Confirm transaction\\\" and display each output amount and address followed by the the fee amount.\",\n          action: LEDGER_RIGHT_BUTTON\n        });\n        messages.push({\n          state: _interaction.ACTIVE,\n          level: _interaction.INFO,\n          code: \"ledger.sign\",\n          version: \">=1.6.0\",\n          text: \"Confirm each output on your Ledger device and approve the transaction.\",\n          messages: [{\n            text: \"Your Ledger will ask you to \\\"Review transaction\\\".\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"For each output, your Ledger device will display the output amount...\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"...followed by the output address in several parts\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will display the transaction fees.\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will ask you to \\\"Accept and send\\\".\",\n            action: LEDGER_BOTH_BUTTONS\n          }]\n        });\n      } else {\n        messages.push({\n          state: _interaction.ACTIVE,\n          level: _interaction.INFO,\n          code: \"ledger.sign\",\n          version: \"<1.6.0\",\n          text: \"Confirm each output on your Ledger device and approve the transaction.\",\n          messages: [{\n            text: \"For each output, your Ledger will display the output amount and address for you to confirm.\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will ask if you want to \\\"Confirm the transaction\\\".  Due to a bug in the Ledger software, your device may display the transaction fee as \\\"UNKNOWN\\\".\",\n            action: LEDGER_RIGHT_BUTTON\n          }]\n        });\n        messages.push({\n          state: _interaction.ACTIVE,\n          level: _interaction.INFO,\n          code: \"ledger.sign\",\n          version: \">=1.6.0\",\n          text: \"Confirm each output on your Ledger device and approve the transaction.\",\n          messages: [{\n            text: \"For each output, your Ledger will ask you to \\\"Review output\\\".\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will display the output amount.\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will display the output address in several parts.\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will ask if you want to \\\"Accept\\\" the output.\",\n            action: LEDGER_BOTH_BUTTONS\n          }, {\n            text: \"Your Ledger will ask if you want to \\\"Confirm the transaction\\\".\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Due to a bug in the Ledger software, your device will display the transaction fee as \\\"UNKNOWN\\\".\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will ask you to \\\"Accept and send\\\".\",\n            action: LEDGER_BOTH_BUTTONS\n          }]\n        });\n      }\n\n      return messages;\n    }\n  }, {\n    key: \"preProcessingTime\",\n    value: function preProcessingTime() {\n      // FIXME\n      return 10;\n    }\n  }, {\n    key: \"postProcessingTime\",\n    value: function postProcessingTime() {\n      // FIXME\n      return 10;\n    }\n    /**\n     * See {@link https://github.com/LedgerHQ/ledgerjs/tree/master/packages/hw-app-btc#signp2shtransaction}.\n     *\n     * Input signatures produced will always have a trailing `...01`\n     * {@link https://bitcoin.org/en/glossary/sighash-all SIGHASH_ALL}\n     * byte.\n     *\n     * @returns {string[]} array of input signatures, one per input\n     */\n\n  }, {\n    key: \"run\",\n    value: function run() {\n      var _this7 = this;\n\n      return this.withApp(\n      /*#__PURE__*/\n      function () {\n        var _ref10 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee10(app, transport) {\n          var transactionSignature;\n          return regeneratorRuntime.wrap(function _callee10$(_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  // FIXME: Explain the rationale behind this choice.\n                  transport.setExchangeTimeout(20000 * _this7.outputs.length);\n                  _context10.next = 3;\n                  return app.signP2SHTransaction({\n                    inputs: _this7.ledgerInputs(),\n                    associatedKeysets: _this7.ledgerKeysets(),\n                    outputScriptHex: _this7.ledgerOutputScriptHex(),\n                    lockTime: 0,\n                    // locktime, 0 is no locktime\n                    sigHashType: 1,\n                    // sighash type, 1 is SIGHASH_ALL\n                    segwit: _this7.anySegwitInputs(),\n                    transactionVersion: 1 // tx version\n\n                  });\n\n                case 3:\n                  transactionSignature = _context10.sent;\n                  return _context10.abrupt(\"return\", (transactionSignature || []).map(function (inputSignature) {\n                    return inputSignature.endsWith('01') ? inputSignature : \"\".concat(inputSignature, \"01\");\n                  }));\n\n                case 5:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee10);\n        }));\n\n        return function (_x6, _x7) {\n          return _ref10.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"ledgerInputs\",\n    value: function ledgerInputs() {\n      return this.inputs.map(function (input) {\n        var addressType = (0, _unchainedBitcoin.multisigAddressType)(input.multisig);\n        var inputTransaction = (0, _splitTransaction.splitTransaction)(input.transactionHex, true); // FIXME: should the 2nd parameter here always be true?\n\n        var scriptFn = addressType === _unchainedBitcoin.P2SH ? _unchainedBitcoin.multisigRedeemScript : _unchainedBitcoin.multisigWitnessScript;\n        var scriptHex = (0, _unchainedBitcoin.scriptToHex)(scriptFn(input.multisig));\n        return [inputTransaction, input.index, scriptHex]; // can add sequence number for RBF as an additional element\n      });\n    }\n  }, {\n    key: \"ledgerKeysets\",\n    value: function ledgerKeysets() {\n      var _this8 = this;\n\n      return this.bip32Paths.map(function (bip32Path) {\n        return _this8.ledgerBIP32Path(bip32Path);\n      });\n    }\n  }, {\n    key: \"ledgerOutputScriptHex\",\n    value: function ledgerOutputScriptHex() {\n      var txHex = (0, _unchainedBitcoin.unsignedMultisigTransaction)(this.network, this.inputs, this.outputs).toHex();\n      var splitTx = (0, _splitTransaction.splitTransaction)(txHex, this.anySegwitInputs());\n      return (0, _serializeTransaction.serializeTransactionOutputs)(splitTx).toString('hex');\n    }\n  }, {\n    key: \"ledgerBIP32Path\",\n    value: function ledgerBIP32Path(bip32Path) {\n      return bip32Path.split(\"/\").slice(1).join(\"/\");\n    }\n  }, {\n    key: \"anySegwitInputs\",\n    value: function anySegwitInputs() {\n      for (var i = 0; i < this.inputs.length; i++) {\n        var input = this.inputs[i];\n        var addressType = (0, _unchainedBitcoin.multisigAddressType)(input.multisig);\n\n        if (addressType === _unchainedBitcoin.P2SH_P2WSH || addressType === _unchainedBitcoin.P2WSH) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return LedgerSignMultisigTransaction;\n}(LedgerBitcoinInteraction);\n\nexports.LedgerSignMultisigTransaction = LedgerSignMultisigTransaction;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseHermitQRCodeData = parseHermitQRCodeData;\nexports.encodeHermitQRCodeData = encodeHermitQRCodeData;\nexports.HermitSignTransaction = exports.HermitExportExtendedPublicKey = exports.HermitExportPublicKey = exports.HermitDisplayer = exports.HermitReader = exports.HermitInteraction = exports.HERMIT = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.reflect.get\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.object.define-properties\");\n\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es7.object.values\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.reflect.delete-property\");\n\nrequire(\"core-js/modules/es6.string.starts-with\");\n\nvar _hiBase = _interopRequireDefault(require(\"hi-base32\"));\n\nvar _pako = _interopRequireDefault(require(\"pako\"));\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nvar _unchainedBitcoin = require(\"unchained-bitcoin\");\n\nvar _interaction = require(\"./interaction\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar HERMIT = 'hermit';\n/**\n * Parse the data from a Hermit-created QR-code.\n *\n * @param {string} encodedString - base32-encoded, gzipped, JSON data\n * @returns {object} the parsed data\n */\n\nexports.HERMIT = HERMIT;\n\nfunction parseHermitQRCodeData(encodedString) {\n  var errorPrefix = \"Unable to parse QR code\";\n\n  try {\n    var compressedBytes = _hiBase[\"default\"].decode.asBytes(encodedString);\n\n    try {\n      var json = _pako[\"default\"].inflate(compressedBytes, {\n        to: 'string'\n      });\n\n      try {\n        return JSON.parse(json);\n      } catch (e) {\n        throw new Error(\"\".concat(errorPrefix, \" (JSON parse error)\"));\n      }\n    } catch (e) {\n      if (e.message && e.message.startsWith(errorPrefix)) {\n        throw e;\n      } else {\n        throw new Error(\"\".concat(errorPrefix, \" (gzip decompression error)\"));\n      }\n    }\n  } catch (e) {\n    if (e.message && e.message.startsWith(errorPrefix)) {\n      throw e;\n    } else {\n      throw new Error(\"\".concat(errorPrefix, \" (Base32 decode error)\"));\n    }\n  }\n}\n/**\n * Encode the given `data` as a string to be put into a\n * Hermit-readable QR code.\n *\n * @param {object} data plain JavaScript object to encode\n * @returns {string} base32-encoded, gzipped, JSON data\n */\n\n\nfunction encodeHermitQRCodeData(data) {\n  var errorPrefix = \"Unable to create QR code\";\n\n  try {\n    var jsonString = JSON.stringify(data);\n\n    try {\n      var compressedBytes = _pako[\"default\"].deflate(jsonString, {\n        gzip: true\n      });\n\n      try {\n        return _hiBase[\"default\"].encode(compressedBytes);\n      } catch (e) {\n        throw new Error(\"\".concat(errorPrefix, \" (Base32 encode error)\"));\n      }\n    } catch (e) {\n      if (e.message && e.message.startsWith(errorPrefix)) {\n        throw e;\n      } else {\n        throw new Error(\"\".concat(errorPrefix, \" (gzip compression error)\"));\n      }\n    }\n  } catch (e) {\n    if (e.message && e.message.startsWith(errorPrefix)) {\n      throw e;\n    } else {\n      throw new Error(\"\".concat(errorPrefix, \" (JSON encode error)\"));\n    }\n  }\n}\n\nfunction commandMessage(data) {\n  return _objectSpread({}, {\n    state: _interaction.PENDING,\n    level: _interaction.INFO,\n    code: \"hermit.command\",\n    mode: \"wallet\"\n  }, {}, {\n    text: \"\".concat(data.instructions, \" '\").concat(data.command, \"'\")\n  }, {}, data);\n}\n/**\n * Base class for interactions with Hermit.\n *\n * @extends {module:interaction.IndirectKeystoreInteraction}\n */\n\n\nvar HermitInteraction =\n/*#__PURE__*/\nfunction (_IndirectKeystoreInte) {\n  _inherits(HermitInteraction, _IndirectKeystoreInte);\n\n  function HermitInteraction() {\n    _classCallCheck(this, HermitInteraction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HermitInteraction).apply(this, arguments));\n  }\n\n  return HermitInteraction;\n}(_interaction.IndirectKeystoreInteraction);\n/**\n * Base class for interactions which read a QR code displayed by a\n * Hermit command.\n *\n * @extends {module:hermit.HermitInteraction}\n */\n\n\nexports.HermitInteraction = HermitInteraction;\n\nvar HermitReader =\n/*#__PURE__*/\nfunction (_HermitInteraction) {\n  _inherits(HermitReader, _HermitInteraction);\n\n  function HermitReader() {\n    var _this;\n\n    _classCallCheck(this, HermitReader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HermitReader).call(this));\n    _this.reader = true;\n    return _this;\n  }\n\n  _createClass(HermitReader, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(HermitReader.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        code: \"hermit.scanning\",\n        text: \"Scan Hermit QR code now.\"\n      });\n      return messages;\n    }\n  }]);\n\n  return HermitReader;\n}(HermitInteraction);\n/**\n * Base class for interactions which display data as a QR code for\n * Hermit to read and then read the QR code Hermit displays in\n * response.\n *\n * @extends {module:hermit.HermitInteraction}\n */\n\n\nexports.HermitReader = HermitReader;\n\nvar HermitDisplayer =\n/*#__PURE__*/\nfunction (_HermitReader) {\n  _inherits(HermitDisplayer, _HermitReader);\n\n  function HermitDisplayer() {\n    var _this2;\n\n    _classCallCheck(this, HermitDisplayer);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(HermitDisplayer).call(this));\n    _this2.displayer = true;\n    return _this2;\n  }\n\n  return HermitDisplayer;\n}(HermitReader);\n/**\n * Reads a public key from data in a Hermit QR code.\n *\n * @extends {module:hermit.HermitReader}\n * @example\n * const interaction = new HermitExportPublicKey();\n * const encodedString = readHermitQRCode(); // application dependent\n * const {pubkey, bip32Path} = interaction.parse(encoodedString);\n * console.log(pubkey);\n * // \"03...\"\n * console.log(bip32Path);\n * // \"m/45'/0'/0'/0/0\"\n */\n\n\nexports.HermitDisplayer = HermitDisplayer;\n\nvar HermitExportPublicKey =\n/*#__PURE__*/\nfunction (_HermitReader2) {\n  _inherits(HermitExportPublicKey, _HermitReader2);\n\n  function HermitExportPublicKey(_ref) {\n    var _this3;\n\n    var bip32Path = _ref.bip32Path;\n\n    _classCallCheck(this, HermitExportPublicKey);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(HermitExportPublicKey).call(this));\n    _this3.bip32Path = bip32Path;\n    return _this3;\n  }\n\n  _createClass(HermitExportPublicKey, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(HermitExportPublicKey.prototype), \"messages\", this).call(this);\n\n      messages.push(commandMessage({\n        instructions: \"Run the following Hermit command, replacing the BIP32 path if you need to:\",\n        command: \"export-pub \".concat(this.bip32Path)\n      }));\n      return messages;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(encodedString) {\n      var result = parseHermitQRCodeData(encodedString);\n      var xpub = result.xpub,\n          pubkey = result.pubkey;\n      var bip32Path = result.bip32_path;\n\n      if (!pubkey) {\n        if (xpub) {\n          throw new Error(\"Make sure you export a plain public key and NOT an extended public key.\");\n        } else {\n          throw new Error(\"No public key in QR code.\");\n        }\n      }\n\n      if (!bip32Path) {\n        throw new Error(\"No BIP32 path in QR code.\");\n      }\n\n      result.bip32Path = bip32Path;\n      Reflect.deleteProperty(result, \"bip32_path\");\n      return result;\n    }\n  }]);\n\n  return HermitExportPublicKey;\n}(HermitReader);\n/**\n * Reads an extended public key from data in a Hermit QR code.\n *\n * @extends {module:hermit.HermitReader}\n * @example\n * const interaction = new HermitExportExtendedPublicKey();\n * const encodedString = readHermitQRCode(); // application dependent\n * const {xpub, bip32Path} = interaction.parse(encoodedString);\n * console.log(xpub);\n * // \"xpub...\"\n * console.log(bip32Path);\n * // \"m/45'/0'/0'\"\n */\n\n\nexports.HermitExportPublicKey = HermitExportPublicKey;\n\nvar HermitExportExtendedPublicKey =\n/*#__PURE__*/\nfunction (_HermitReader3) {\n  _inherits(HermitExportExtendedPublicKey, _HermitReader3);\n\n  function HermitExportExtendedPublicKey(_ref2) {\n    var _this4;\n\n    var bip32Path = _ref2.bip32Path;\n\n    _classCallCheck(this, HermitExportExtendedPublicKey);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(HermitExportExtendedPublicKey).call(this));\n    _this4.bip32Path = bip32Path;\n    return _this4;\n  }\n\n  _createClass(HermitExportExtendedPublicKey, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(HermitExportExtendedPublicKey.prototype), \"messages\", this).call(this);\n\n      messages.push(commandMessage({\n        instructions: \"Run the following Hermit command, replacing the BIP32 path if you need to:\",\n        command: \"export-xpub \".concat(this.bip32Path)\n      }));\n      return messages;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(encodedString) {\n      var result = parseHermitQRCodeData(encodedString);\n      var xpub = result.xpub,\n          pubkey = result.pubkey;\n      var bip32Path = result.bip32_path;\n\n      if (!xpub) {\n        if (pubkey) {\n          throw new Error(\"Make sure you export an extended public key and NOT a plain public key.\");\n        } else {\n          throw new Error(\"No extended public key in QR code.\");\n        }\n      }\n\n      if (!bip32Path) {\n        throw new Error(\"No BIP32 path in QR code.\");\n      }\n\n      result.bip32Path = bip32Path;\n      Reflect.deleteProperty(result, \"bip32_path\");\n      return result;\n    }\n  }]);\n\n  return HermitExportExtendedPublicKey;\n}(HermitReader);\n/**\n * Returns signature request data to display in a QR code for Hermit\n * and reads the signature data passed back by Hermit in another QR\n * code.\n *\n * NOTE: Transactions with inputs & outputs to non-P2SH addresses are not supported by Hermit.\n *\n * @extends {module:hermit.HermitDisplayer}\n * @example\n * const interaction = new HermitSignTransaction({inputs, outputs, bip32Paths});\n * console.log(interaction.request());\n * // \"IJQXGZI...\"\n *\n * // Display a QR code containing the above data to Hermit running\n * // `sign-bitcoin` and it will return another QR code which needs\n * // parsed.\n * const encodedString = readHermitQRCode(); // application dependent\n * const signatures = interaction.parse(encoodedString);\n * console.log(signatures);\n * // [\"ababa...01\", ... ]\n *\n */\n\n\nexports.HermitExportExtendedPublicKey = HermitExportExtendedPublicKey;\n\nvar HermitSignTransaction =\n/*#__PURE__*/\nfunction (_HermitDisplayer) {\n  _inherits(HermitSignTransaction, _HermitDisplayer);\n\n  /**\n   *\n   * @param {object} options - options argument\n   * @param {array<object>} options.inputs - inputs for the transaction\n   * @param {array<object>} options.outputs - outputs for the transaction\n   * @param {array<string>} options.bip32Paths - BIP32 paths\n   */\n  function HermitSignTransaction(_ref3) {\n    var _this5;\n\n    var inputs = _ref3.inputs,\n        outputs = _ref3.outputs,\n        bip32Paths = _ref3.bip32Paths;\n\n    _classCallCheck(this, HermitSignTransaction);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(HermitSignTransaction).call(this));\n    _this5.inputs = inputs;\n    _this5.outputs = outputs;\n    _this5.bip32Paths = bip32Paths;\n    _this5.inputAddressType = '';\n    return _this5;\n  }\n\n  _createClass(HermitSignTransaction, [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return this.inputsAreSupported() && this.outputsAreSupported();\n    }\n  }, {\n    key: \"outputsAreSupported\",\n    value: function outputsAreSupported() {\n      if (this.outputs && this.outputs.length) {\n        for (var i = 0; i < this.outputs.length; i++) {\n          var output = this.outputs[i];\n\n          if (output.address.match(/^(tb|bc)/)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"inputsAreSupported\",\n    value: function inputsAreSupported() {\n      if (this.inputs && this.inputs.length) {\n        for (var i = 0; i < this.inputs.length; i++) {\n          var input = this.inputs[i];\n          var inputAddressType = (0, _unchainedBitcoin.multisigAddressType)(input.multisig);\n\n          if (inputAddressType !== _unchainedBitcoin.MULTISIG_ADDRESS_TYPES.P2SH) {\n            this.inputAddressType = inputAddressType;\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(HermitSignTransaction.prototype), \"messages\", this).call(this);\n\n      if (!this.inputsAreSupported()) {\n        messages.push({\n          state: _interaction.UNSUPPORTED,\n          level: _interaction.ERROR,\n          code: \"hermit.unsupported.inputaddress\",\n          text: \"Unsupported input address type \".concat(this.inputAddressType, \", must be P2SH.\")\n        });\n      }\n\n      if (!this.outputsAreSupported()) {\n        messages.push({\n          state: _interaction.UNSUPPORTED,\n          level: _interaction.ERROR,\n          code: \"hermit.unsupported.outputaddress\",\n          text: \"Unsupported output address type. bech32 addresses are unsupported.\"\n        });\n      }\n\n      if (!this.inputsAreSupported() || !this.outputsAreSupported()) return messages;\n      messages.push(commandMessage({\n        instructions: \"Scan this QR code into Hermit by running the following command:\",\n        command: \"sign-bitcoin\"\n      }));\n      return messages;\n    }\n  }, {\n    key: \"request\",\n    value: function request() {\n      var data = this.signatureRequestData();\n      return encodeHermitQRCodeData(data);\n    }\n  }, {\n    key: \"signatureRequestData\",\n    value: function signatureRequestData() {\n      var hermitInputsByRedeemScript = {};\n\n      for (var i = 0; i < this.inputs.length; i++) {\n        var input = this.inputs[i];\n        var bip32Path = this.bip32Paths[i];\n        var redeemScriptHex = (0, _unchainedBitcoin.scriptToHex)((0, _unchainedBitcoin.multisigRedeemScript)(input.multisig));\n\n        if (!hermitInputsByRedeemScript[redeemScriptHex]) {\n          hermitInputsByRedeemScript[redeemScriptHex] = [redeemScriptHex, bip32Path];\n        }\n\n        hermitInputsByRedeemScript[redeemScriptHex].push({\n          txid: input.txid,\n          index: input.index,\n          amount: new _bignumber[\"default\"](input.amountSats).toNumber()\n        });\n      }\n\n      return {\n        inputs: Object.values(hermitInputsByRedeemScript),\n        outputs: this.outputs.map(function (output) {\n          return {\n            address: output.address,\n            amount: new _bignumber[\"default\"](output.amountSats).toNumber()\n          };\n        })\n      };\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(encodedString) {\n      var result = parseHermitQRCodeData(encodedString);\n      var signatures = result.signatures;\n\n      if (!signatures || signatures.length === 0) {\n        throw new Error(\"No signatures in QR code.\");\n      }\n\n      return (signatures || []).map(function (inputSignature) {\n        return \"\".concat(inputSignature, \"01\");\n      });\n    }\n  }]);\n\n  return HermitSignTransaction;\n}(HermitDisplayer);\n\nexports.HermitSignTransaction = HermitSignTransaction;","module.exports = __webpack_public_path__ + \"static/media/logo.66481e66.png\";","import BigNumber from \"bignumber.js\";\nimport { satoshisToBitcoins } from \"unchained-bitcoin\";\n\nexport const DUST_IN_SATOSHIS = 546;\nexport const DUST_IN_BTC = satoshisToBitcoins(BigNumber(DUST_IN_SATOSHIS));\nexport const DEFAULT_PREFIX = \"m\";\nexport const CHANGE_INDEX = \"/1\";\nexport const DEFAULT_CHANGE_PREFIX = DEFAULT_PREFIX + CHANGE_INDEX;\n","import React from \"react\";\n\nexport default (url, text) => (\n  <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n);\n","import BigNumber from \"bignumber.js\";\nimport { estimateMultisigTransactionFee } from \"unchained-bitcoin/lib/fees\";\n\nimport { DUST_IN_SATOSHIS } from \"./constants\";\n\nexport { default as externalLink } from \"./ExternalLink\";\nexport { default as wrapText } from \"./WrapText\";\n\nexport function validatePositiveInteger(numberString) {\n  if (\n    numberString === null ||\n    numberString === undefined ||\n    numberString === \"\"\n  ) {\n    return \"Cannot be blank.\";\n  }\n  const number = parseInt(numberString, 10);\n  if (\n    Number.isNaN(number) ||\n    number.toString().length !== numberString.length ||\n    number <= 0\n  ) {\n    return \"Must be a positive whole number.\";\n  }\n\n  return \"\";\n}\n\nexport function downloadFile(body, filename) {\n  const blob = new Blob([body], { type: \"text/plain\" });\n  if (window.navigator.msSaveOrOpenBlob) {\n    window.navigator.msSaveBlob(blob, filename);\n  } else {\n    const elem = window.document.createElement(\"a\");\n    elem.href = window.URL.createObjectURL(blob);\n    elem.download = filename;\n    document.body.appendChild(elem);\n    elem.click();\n    document.body.removeChild(elem);\n  }\n}\n\n/**\n * @description A utility function to determine if a spend is a valid\n * \"spend all\" transaction,\n * @param {Object} options - set of options used to determine if is spend all\n * @param {Object[]} options.outputs\n * @param {string} options.outputs[].amountSats\n * @param {string} options.walletBalance\n * @param {string} options.feesPerByteInSatoshis\n * @param {number} options.numInputs\n * @param {string} options.addressType\n * @param {number} options.m\n * @param {number} options.n\n * @returns {boolean} whether or not conditions are met to be \"spendAll\"\n */\nexport function isSpendAll(options) {\n  const config = {\n    ...options,\n    numOutputs: options.outputs.length,\n  };\n  const estimatedFees = estimateMultisigTransactionFee(config).toNumber();\n  const outputTotal = config.outputs.reduce((balance, output) => {\n    return balance.plus(output.amountSats);\n  }, new BigNumber(0));\n\n  if (outputTotal.plus(estimatedFees).isGreaterThan(options.walletBalance))\n    throw new Error(\"Wallet balance is insufficient to fund transaction\");\n\n  // if the difference between walletBalance minus fees\n  // and the output total is less than or equal to dust\n  // then this is a spend all.\n  return new BigNumber(options.walletBalance)\n    .minus(estimatedFees)\n    .minus(outputTotal)\n    .isLessThanOrEqualTo(DUST_IN_SATOSHIS);\n}\n\n/**\n * @description a naive coin selection algorithm that goes through available,\n * spendable slices, adding them together to sufficiently fund a tx with a\n * given set of outputs and address/wallet type.\n * **IMPORTANT**: this assumes no change output in the set of outputs given.\n * and it will indicate if the returned set of utxos sufficiently cover the output\n * and fees w/o need of change.\n * @param {Object} options - set of options used to determine if is spend all\n * @param {Object[]} options.outputs\n * @param {string} options.feesPerByteInSatoshis\n * @param {number} options.slices - spendable slices to select utxos from\n * @param {string} options.addressType\n * @param {number} options.m\n * @param {number} options.n\n * @returns {Array.<Object[]|boolean>} a tuple where the first index is the list of\n * inputs and the second index is a bool representing whether a change address is needed\n */\nexport function naiveCoinSelection(options) {\n  const { slices, outputs } = options;\n  const { count: numInputs, balance: walletBalance } = slices.reduce(\n    ({ count, balance }, slice) => {\n      return {\n        count: count + slice.utxos.length,\n        balance: slice.balanceSats.plus(balance),\n      };\n    },\n    {\n      count: 0,\n      balance: new BigNumber(0),\n    }\n  );\n\n  const outputTotal = outputs.reduce(\n    (total, output) => total.plus(output.amountSats),\n    new BigNumber(0)\n  );\n\n  const selectedUtxos = [];\n  let changeRequired;\n  let inputTotal = new BigNumber(0);\n\n  // checking if is a spendall to confirm that change is not required\n  const spendAll = isSpendAll({\n    ...options,\n    walletBalance,\n    numInputs,\n  });\n\n  if (spendAll) changeRequired = false;\n\n  // loop through each slice\n  for (let i = 0; i < slices.length; i += 1) {\n    const slice = slices[i];\n    const { utxos } = slice;\n    // add each utxo from the slice to the inputs array\n    for (let j = 0; j < utxos.length; j += 1) {\n      selectedUtxos.push({\n        ...utxos[j],\n        multisig: slice.multisig,\n        bip32Path: slice.bip32Path,\n        change: slice.change,\n      });\n    }\n    // add slice's balance to the inputs total\n    inputTotal = inputTotal.plus(slice.balanceSats);\n\n    // we can skip the following checks if it is a spend all tx\n    if (!spendAll) {\n      // calculate fees with a change address and without\n      // to evaluate if we need to keep going or not\n      const feesWithoutChange = estimateMultisigTransactionFee({\n        ...options,\n        numInputs: selectedUtxos.length,\n        numOutputs: outputs.length,\n      });\n      const feesWithChange = estimateMultisigTransactionFee({\n        ...options,\n        numInputs: selectedUtxos.length,\n        numOutputs: outputs.length + 1,\n      });\n\n      const inputOutputDiff = inputTotal.minus(outputTotal);\n      if (\n        inputOutputDiff\n          .minus(feesWithoutChange)\n          .isLessThanOrEqualTo(DUST_IN_SATOSHIS) &&\n        inputOutputDiff.minus(feesWithoutChange).isGreaterThanOrEqualTo(0)\n      ) {\n        // if value of inputs covers outputs and fees w/o change output and\n        // has only dust left over, then no change is required and we're done\n        changeRequired = false;\n        break;\n      } else if (inputOutputDiff.isGreaterThan(feesWithChange)) {\n        // value of current inputs covers outputs and fees w/ change output\n        // so our tx is funded but needs change.\n        changeRequired = true;\n        break;\n      }\n      // if inputs don't cover outputs plus change output and fees,\n      // then the loop will continue to add more inputs\n    }\n  }\n  return [selectedUtxos, changeRequired];\n}\n","import React from \"react\";\n\n// Components\nimport { Card, CardHeader, CardContent } from \"@material-ui/core\";\n\nconst Disclaimer = () => (\n  <Card>\n    <CardHeader title=\"Disclaimer\" />\n    <CardContent>\n      <small>\n        This application is in “alpha” state and is presented for evaluation and\n        testing only. It is provided “as is,” and any express or implied\n        warranties, including but not limited to the implied warranties of\n        merchantability and fitness for a particular purpose, are disclaimed. By\n        using this application, you accept all risks of such use, including full\n        responsibility for any direct or indirect loss of any kind resulting\n        from the use of this application, which may involve complete loss of any\n        Bitcoin or other coins associated with addresses used with this\n        application. In no event shall Unchained Capital, Inc., its employees\n        and affiliates, or developers of this application be liable for any\n        direct, indirect, incidental, special, exemplary, or consequential\n        damages (including, but not limited to, procurement of substitute goods\n        or services; loss of use, data, or profits; or business interruption)\n        however caused and on any theory of liability, whether in contract,\n        strict liability, or tort (including negligence or otherwise) arising in\n        any way out of the use of this application, even if advised of the\n        possibility of such damage.\n      </small>\n    </CardContent>\n  </Card>\n);\n\nexport default Disclaimer;\n","import React from \"react\";\n\n// Components\nimport {\n  Box,\n  Typography,\n  CardHeader,\n  CardContent,\n  Grid,\n  Card,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  CardActions,\n} from \"@material-ui/core\";\nimport {\n  Description,\n  GitHub,\n  YouTube,\n  BugReport,\n  Speed,\n  AccountBalanceWallet,\n  SportsVolleyball,\n} from \"@material-ui/icons\";\nimport { externalLink } from \"../utils\";\nimport Disclaimer from \"./Disclaimer\";\n\nconst Help = () => (\n  <div>\n    <Box mt={4} mb={2}>\n      <Typography variant=\"h2\">Welcome to Caravan!</Typography>\n    </Box>\n\n    <Grid container spacing={3}>\n      <Grid container item md={8} spacing={2} direction=\"column\">\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Get Started\" />\n            <CardContent>\n              <Box mb={3}>\n                <Typography>\n                  Start using caravan by choosing to either make a multisig\n                  wallet or fully stateless address.\n                </Typography>\n              </Box>\n              <Grid container alignItems=\"center\" justify=\"center\" spacing={3}>\n                <Grid item xs={10} md={4}>\n                  <Button\n                    variant=\"contained\"\n                    data-cy=\"setup-wallet-button\"\n                    size=\"large\"\n                    color=\"primary\"\n                    href=\"#/wallet\"\n                    startIcon={<AccountBalanceWallet />}\n                  >\n                    Wallet\n                  </Button>\n                </Grid>\n                <Grid item xs={10} md={4}>\n                  <Button\n                    variant=\"contained\"\n                    data-cy=\"setup-address-button\"\n                    size=\"large\"\n                    color=\"default\"\n                    href=\"#/address\"\n                    startIcon={<SportsVolleyball />}\n                  >\n                    Address\n                  </Button>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Stateless Multisig Coordinator\" />\n\n            <CardContent>\n              <p>\n                Caravan makes bitcoin multisig custody easier and safer through\n                transparency and standards.\n              </p>\n\n              <p>\n                Caravan is a <strong>coordination software</strong> for multisig\n                addresses and wallets. Caravan can be used to build a multisig\n                wallet derived from xpubs, or individual multisig addresses\n                derived from pubkeys. In both cases, in order to transact from\n                the wallet or address, you must also have your private keys and\n                BIP32 paths.\n              </p>\n\n              <p>\n                Caravan is <strong>stateless</strong>. It does not itself store\n                any data outside your current browser session. You must safekeep\n                the wallet details (xpubs, BIP32 paths) and addresses (redeem\n                scripts, BIP32 paths) that you create.\n              </p>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Keys\" />\n            <CardContent>\n              <p>All bitcoin is ultimately protected by private keys.</p>\n\n              <p>\n                Your private key may live on a piece of paper, a hardware\n                wallet, some software on a laptop, or even just in your mind.\n                Caravan, being stateless, does not store or ask for your private\n                key but it can talk to hardware devices or software applications\n                which do.\n              </p>\n\n              <p>\n                Caravan supports entering public keys and signatures via text,\n                so any wallet which can export such data can be made compatible\n                with Caravan.\n              </p>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Consensus\" />\n            <CardContent>\n              <p>\n                In order to look up wallet addresses and their balances, and\n                broadcast transactions, Caravan requires knowledge of the\n                constantly changing bitcoin network.\n              </p>\n\n              <p>\n                Running a full bitcoin node is the most private way to determine\n                the current state of the bitcoin network. Caravan can be easily\n                configured to use your own node for consensus information and\n                broadcasting transactions.\n              </p>\n\n              <p>\n                If you don&apos;t want to or cannot run your own full node,\n                Caravan defaults to using the freely available API at\n                <code> blockstream.info</code>.\n              </p>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      <Grid container item md={4} spacing={4} direction=\"column\">\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Learn More\" />\n            <CardContent>\n              <List>\n                <ListItem>\n                  <ListItemIcon>\n                    <Description />\n                  </ListItemIcon>\n                  <ListItemText>\n                    {externalLink(\n                      \"https://unchained-capital.com/blog/gearing-up-the-caravan/\",\n                      \"Blog Post\"\n                    )}\n                  </ListItemText>\n                </ListItem>\n\n                <ListItem>\n                  <ListItemIcon>\n                    <YouTube />\n                  </ListItemIcon>\n                  <ListItemText>\n                    {externalLink(\n                      \"https://www.youtube.com/playlist?list=PLUM8mrUjWoPRsVGEZ1gTntqPd4xrQZoiH\",\n                      \"Video Tutorials\"\n                    )}\n                  </ListItemText>\n                </ListItem>\n\n                <ListItem>\n                  <ListItemIcon>\n                    <GitHub />\n                  </ListItemIcon>\n                  <ListItemText>\n                    {externalLink(\n                      \"https://github.com/unchained-capital/caravan\",\n                      \"Source Code\"\n                    )}\n                  </ListItemText>\n                </ListItem>\n              </List>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Supported Devices\" />\n            <CardContent>\n              Caravan has been <a href=\"#/test\">tested</a> with the following\n              hardware wallets:\n              <ul>\n                <li>\n                  {externalLink(\n                    \"https://shop.trezor.io/product/trezor-one-white\",\n                    \"Trezor One\"\n                  )}\n                </li>\n                <li>\n                  {externalLink(\n                    \"https://shop.trezor.io/product/trezor-model-t\",\n                    \"Trezor Model T\"\n                  )}\n                </li>\n                <li>\n                  {externalLink(\n                    \"https://www.ledger.com/products/ledger-nano-s\",\n                    \"Ledger Nano S\"\n                  )}\n                </li>\n                <li>\n                  {externalLink(\n                    \"https://www.ledger.com/products/ledger-nano-x\",\n                    \"Ledger Nano X\"\n                  )}\n                </li>\n              </ul>\n              And web browsers:\n              <ul>\n                <li>\n                  {externalLink(\"https://www.google.com/chrome/\", \"Chrome\")}\n                </li>\n                <li>\n                  {externalLink(\n                    \"https://www.mozilla.org/en-US/firefox/new/\",\n                    \"Firefox\"\n                  )}\n                </li>\n              </ul>\n              Seeing a bug or need a feature?\n            </CardContent>\n            <CardActions>\n              <Button href=\"https://github.com/unchained-capital/caravan/issues\">\n                <BugReport /> &nbsp; Report Issue\n              </Button>\n              <Button data-cy=\"run-tests-button\" href=\"#/test\">\n                <Speed /> &nbsp; Run Tests\n              </Button>\n            </CardActions>\n          </Card>\n        </Grid>\n      </Grid>\n    </Grid>\n\n    <Box mt={2}>\n      <Disclaimer />\n    </Box>\n  </div>\n);\n\nexport default Help;\n","import axios from \"axios\";\nimport BigNumber from \"bignumber.js\";\nimport { satoshisToBitcoins, blockExplorerAPIURL } from \"unchained-bitcoin\";\n\n/**\n * Fetch information for signing transactions from block explorer API\n * @param {string} address - The address from which to obtain the information\n * @param {string} network - The network for the transaction to sign (mainnet|testnet)\n * @returns {multisig.UTXO} object for signing transaction inputs\n */\nexport async function blockExplorerGetAddresesUTXOs(address, network) {\n  try {\n    const utxosResult = await axios.get(\n      blockExplorerAPIURL(`/address/${address}/utxo`, network)\n    );\n    const utxos = utxosResult.data;\n    return await Promise.all(\n      utxos.map(async (utxo) => {\n        // FIXME: inefficient, need to cache here by utxo.txid\n        const transactionResult = await axios.get(\n          blockExplorerAPIURL(`/tx/${utxo.txid}/hex`, network)\n        );\n        const transactionHex = transactionResult.data;\n        const amount = new BigNumber(utxo.value);\n        return {\n          confirmed: utxo.status.confirmed,\n          txid: utxo.txid,\n          index: utxo.vout,\n          amount: satoshisToBitcoins(amount).toFixed(8),\n          amountSats: amount,\n          transactionHex,\n          time: utxo.status.block_time,\n        };\n      })\n    );\n  } catch (e) {\n    throw (e.response && e.response.data) || e;\n  }\n}\n\nexport async function blockExplorerGetAddressStatus(address, network) {\n  try {\n    const addressesult = await axios.get(\n      blockExplorerAPIURL(`/address/${address}`, network)\n    );\n    const addressData = addressesult.data;\n    return {\n      used:\n        addressData.chain_stats.funded_txo_count > 0 ||\n        addressData.mempool_stats.funded_txo_count > 0,\n    };\n  } catch (e) {\n    throw (e.response && e.response.data) || e;\n  }\n}\n\nexport async function blockExplorerGetFeeEstimate(network) {\n  try {\n    const feeEstimatesResult = await axios.get(\n      blockExplorerAPIURL(\"/fee-estimates\", network)\n    );\n    const feeEstimates = feeEstimatesResult.data;\n    return Math.ceil(feeEstimates[2]);\n  } catch (e) {\n    throw (e.response && e.response.data) || e;\n  }\n}\n\nexport async function blockExplorerBroadcastTransaction(\n  transactionHex,\n  network\n) {\n  try {\n    const broadcastResult = await axios.post(\n      blockExplorerAPIURL(\"/tx\", network),\n      transactionHex\n    );\n    return broadcastResult.data;\n  } catch (e) {\n    throw (e.response && e.response.data) || e;\n  }\n}\n\n/**\n * @module block_explorer\n */\n","import axios from \"axios\";\nimport BigNumber from \"bignumber.js\";\nimport { bitcoinsToSatoshis } from \"unchained-bitcoin\";\n\nasync function callBitcoind(url, auth, method, params = []) {\n  // FIXME\n  // eslint-disable-next-line no-async-promise-executor\n  return new Promise(async (resolve, reject) => {\n    axios(url, {\n      method: \"post\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      auth,\n      data: {\n        jsonrpc: \"2.0\",\n        id: 0,\n        method: `${method}`,\n        params,\n      },\n    })\n      .then((resp) => resolve(resp.data))\n      .catch(reject);\n  });\n}\n\n/**\n * check if error from bitcoind is address not found in wallet\n * this allows client side interpretation of the error\n * @param {Error} e - the error object to check\n * @returns {boolean} true if the desired error\n */\nexport function isWalletAddressNotFoundError(e) {\n  return (\n    e.response &&\n    e.response.data &&\n    e.response.data.error &&\n    e.response.data.error.code === -4\n  );\n}\n\nexport function bitcoindParams(client) {\n  const { url, username, password } = client;\n  const auth = { username, password };\n  return { url, auth };\n}\n\n/**\n * Fetch unspent outputs for a single or set of addresses\n * @param {Object} options - what is needed to communicate with the RPC\n * @param {string} options.url - where to connect\n * @param {AxiosBasicCredentials} options.auth - username and password\n * @param {string} options.address - The address from which to obtain the information\n * @returns {UTXO} object for signing transaction inputs\n */\nexport async function bitcoindListUnspent({ url, auth, address, addresses }) {\n  try {\n    const addressParam = addresses || [address];\n    const resp = await callBitcoind(url, auth, \"listunspent\", [\n      0,\n      9999999,\n      addressParam,\n    ]);\n    const promises = [];\n    resp.result.forEach((utxo) => {\n      promises.push(callBitcoind(url, auth, \"gettransaction\", [utxo.txid]));\n    });\n    const previousTransactions = await Promise.all(promises);\n    return resp.result.map((utxo, mapindex) => {\n      const amount = new BigNumber(utxo.amount);\n      return {\n        confirmed: (utxo.confirmations || 0) > 0,\n        txid: utxo.txid,\n        index: utxo.vout,\n        amount: amount.toFixed(8),\n        amountSats: bitcoinsToSatoshis(amount),\n        transactionHex: previousTransactions[mapindex].result.hex,\n        time: previousTransactions[mapindex].result.blocktime,\n      };\n    });\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(\"There was a problem:\", e.message);\n    return e;\n  }\n}\n\nexport async function bitcoindGetAddressStatus({ url, auth, address }) {\n  try {\n    const resp = await callBitcoind(url, auth, \"getreceivedbyaddress\", [\n      address,\n    ]);\n    if (typeof resp.result === \"undefined\") {\n      throw new Error(`Error: invalid response from ${url}`);\n    }\n    return {\n      used: resp.result > 0,\n    };\n  } catch (e) {\n    if (isWalletAddressNotFoundError(e))\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Address ${address} not found in bitcoind's wallet. Query failed.`\n      );\n    else console.error(e.message); // eslint-disable-line no-console\n    return e;\n  }\n}\n\nexport async function bitcoindEstimateSmartFee({ url, auth, numBlocks = 2 }) {\n  const resp = await callBitcoind(url, auth, \"estimatesmartfee\", [numBlocks]);\n  const feeRate = resp.result.feerate;\n  return Math.ceil(feeRate * 100000);\n}\n\nexport async function bitcoindSendRawTransaction({ url, auth, hex }) {\n  try {\n    const resp = await callBitcoind(url, auth, \"sendrawtransaction\", [hex]);\n    return resp.result;\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log(\"send tx error\", e);\n    throw (e.response && e.response.data.error.message) || e;\n  }\n}\n\nexport function bitcoindImportMulti({ url, auth, addresses, label, rescan }) {\n  const imports = addresses.map((address) => {\n    return {\n      scriptPubKey: {\n        address,\n      },\n      label,\n      timestamp: 0, // TODO: better option to ensure address history is picked up?\n    };\n  });\n  const params = [url, auth, \"importmulti\", [imports, { rescan }]];\n  if (rescan) {\n    callBitcoind(...params); // TODO: what to do on catch?\n    return new Promise((resolve) => resolve({ result: [] }));\n  }\n  return callBitcoind(...params);\n}\n","import { sortInputs } from \"unchained-bitcoin\";\nimport BigNumber from \"bignumber.js\";\nimport {\n  blockExplorerGetAddresesUTXOs,\n  blockExplorerGetFeeEstimate,\n  blockExplorerBroadcastTransaction,\n  blockExplorerGetAddressStatus,\n} from \"./block_explorer\";\nimport {\n  bitcoindListUnspent,\n  bitcoindEstimateSmartFee,\n  bitcoindSendRawTransaction,\n  bitcoindParams,\n  bitcoindGetAddressStatus,\n  isWalletAddressNotFoundError,\n} from \"./bitcoind\";\n\nexport const BLOCK_EXPLORER = \"public\";\nexport const BITCOIND = \"private\";\n\nfunction fetchAddressUTXOsUnsorted(address, network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerGetAddresesUTXOs(address, network);\n  }\n  return bitcoindListUnspent({\n    ...bitcoindParams(client),\n    ...{ address },\n  });\n}\n\n/**\n * Fetch utxos for an address, calculate total balances\n * and return an object describing the addresses state\n * @param {string} address\n * @param {string} network\n * @param {object} client\n * @returns {object} slice object with information gathered for that address\n */\nexport async function fetchAddressUTXOs(address, network, client) {\n  let unsortedUTXOs;\n\n  let updates = {\n    utxos: [],\n    balanceSats: BigNumber(0),\n    fetchedUTXOs: false,\n    fetchUTXOsError: \"\",\n  };\n  try {\n    unsortedUTXOs = await fetchAddressUTXOsUnsorted(address, network, client);\n  } catch (e) {\n    if (client.type === \"private\" && isWalletAddressNotFoundError(e)) {\n      updates = {\n        utxos: [],\n        balanceSats: BigNumber(0),\n        addressKnown: false,\n        fetchedUTXOs: true,\n        fetchUTXOsError: \"\",\n      };\n    } else {\n      updates = { fetchUTXOsError: e.toString() };\n    }\n  }\n\n  // if no utxos then return updates object as is\n  if (!unsortedUTXOs) return updates;\n\n  // sort utxos\n  const utxos = sortInputs(unsortedUTXOs);\n\n  // calculate the total balance from all utxos\n  const balanceSats = utxos\n    .map((utxo) => utxo.amountSats)\n    .reduce(\n      (accumulator, currentValue) => accumulator.plus(currentValue),\n      new BigNumber(0)\n    );\n\n  return {\n    ...updates,\n    balanceSats,\n    utxos,\n    fetchedUTXOs: true,\n    fetchUTXOsError: \"\",\n  };\n}\n\nexport function getAddressStatus(address, network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerGetAddressStatus(address, network);\n  }\n  return bitcoindGetAddressStatus({\n    ...bitcoindParams(client),\n    ...{ address },\n  });\n}\n\nexport function fetchFeeEstimate(network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerGetFeeEstimate(network);\n  }\n  return bitcoindEstimateSmartFee({\n    ...bitcoindParams(client),\n    ...{ numBlocks: 1 },\n  });\n}\n\nexport function broadcastTransaction(transactionHex, network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerBroadcastTransaction(transactionHex, network);\n  }\n  return bitcoindSendRawTransaction({\n    ...bitcoindParams(client),\n    ...{ hex: transactionHex },\n  });\n}\n","import { DEFAULT_CHANGE_PREFIX, CHANGE_INDEX } from \"./constants\";\n\nconst initSortDir = (order) => (order === \"asc\" ? -1 : 1);\n\n/**\n * Function to compare two slices and determine sort\n * order by BIP32 path\n * @param {object} a - slice a for comparison\n * @param {object} b - slice b for comparison\n * @param {string} [orderDir = \"asc\"] - direction for ordering (desc or asc)\n */\nexport function compareSlicesByPath(a, b, orderDir = \"asc\") {\n  if (!a.bip32Path && !b.bip32Path)\n    throw new Error(\"Mising BIP32 path for comparing slices.\");\n\n  const direction = initSortDir(orderDir);\n\n  if (a.change && !b.change) return direction;\n  if (!a.change && b.change) return -direction;\n  const aint = parseInt(a.bip32Path.split(\"/\").reverse()[0], 10);\n  const bint = parseInt(b.bip32Path.split(\"/\").reverse()[0], 10);\n  return aint > bint ? direction : -direction;\n}\n\n/**\n * Function to compare two slices and determine sort\n * order by balance\n * @param {object} a - slice a for comparison\n * @param {object} b - slice b for comparison\n * @param {string} [orderDir = \"asc\"] - direction for ordering (desc or asc)\n */\nexport function compareSlicesByBalance(a, b, orderDir = \"asc\") {\n  if (!a.balanceSats && !b.balanceSats)\n    throw new Error(\"Missing balance for comparing slices\");\n\n  const direction = initSortDir(orderDir);\n\n  if (a.balanceSats.isEqualTo(b.balanceSats)) return 0;\n  return a.balanceSats.isGreaterThan(b.balanceSats) ? direction : -direction;\n}\n\n/**\n * Function to compare two slices and determine sort\n * order by total UTXO count\n * @param {object} a - slice a for comparison\n * @param {object} b - slice b for comparison\n * @param {string} [orderDir = \"asc\"] - direction for ordering (desc or asc)\n */\nexport function compareSlicesByUTXOCount(a, b, orderDir = \"asc\") {\n  if (!a.utxos && !b.utxos)\n    throw new Error(\"Missing utxo array for comparing slices\");\n  const direction = initSortDir(orderDir);\n  if (a.utxos.length === b.utxos.length) return 0;\n  return a.utxos.length > b.utxos.length ? direction : -direction;\n}\n\n/**\n * Function to compare two slices and determine sort\n * order by lastUsed time\n * @param {object} a - slice a for comparison\n * @param {object} b - slice b for comparison\n * @param {string} [orderDir = \"asc\"] - direction for ordering (desc or asc)\n * @returns {number}\n */\nexport function compareSlicesByTime(a, b, orderDir = \"asc\") {\n  const direction = initSortDir(orderDir);\n  if (!a.utxos && !b.utxos && !a.lastUsed && !b.lastUsed) return 0;\n\n  // when ascending, spent is after unused but before used and unspent\n  if (a.lastUsed === \"Spent\")\n    return b.lastUsed && b.lastUsed !== \"Spent\" ? -direction : direction;\n  if (b.lastUsed === \"Spent\")\n    return a.lastUsed && a.lastUsed !== \"Spent\" ? direction : -direction;\n\n  // if there is a last used param then we should be able to compare those\n  if (a.lastUsed && b.lastUsed) {\n    if (a.lastUsed === b.lastUsed) return 0;\n    return a.lastUsed >= b.lastUsed ? direction : -direction;\n  }\n\n  if (a.lastUsed && (!b.lastUsed || b.utxos.length === 0)) {\n    return direction;\n  }\n\n  if (b.lastUsed && (!a.lastUsed || a.utxos.length === 0)) {\n    return -direction;\n  }\n\n  if (a.utxos.length === 0) {\n    return b.utxos.length === 0 ? 0 : direction;\n  }\n  if (b.utxos.length === 0) {\n    return a.utxos.length === 0 ? 0 : -direction;\n  }\n  const amin = Math.min(...a.utxos.map((utxo) => utxo.time));\n  const bmin = Math.min(...b.utxos.map((utxo) => utxo.time));\n\n  if (Number.isNaN(amin) && Number.Number.isNaN(bmin)) return 0;\n  if (Number.isNaN(amin)) return direction;\n  if (Number.isNaN(bmin)) return -direction;\n  return amin > bmin ? direction : -direction;\n}\n\nexport function isChange(path) {\n  // if the prefix matches the change prefix\n  // and there is only 1 more index after, then it is change\n  const prefixLength = DEFAULT_CHANGE_PREFIX.length;\n  if (\n    path.slice(0, prefixLength) === DEFAULT_CHANGE_PREFIX &&\n    // this checks that the only thing after the change prefix is an index\n    path.slice(prefixLength).match(/^([0-9]+)$/g)\n  )\n    return true;\n\n  // if the last two indexes are not hardened and the second to last\n  // index in the path is the change index, then it is change\n  const pathIndexMatcher = /\\/([0-9]+('?))/g;\n  const indexes = path.match(pathIndexMatcher).slice(-2);\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const index of indexes) {\n    // neither of the final two indexes should be hardened\n    // if it is change\n    if (index.includes(\"'\")) return false;\n  }\n\n  // if two matching indexes found and first is change, e.g. /1/0\n  // then it is change\n  if (indexes[0] === CHANGE_INDEX && indexes.length === 2) return true;\n  return false;\n}\n","import { createSelector } from \"reselect\";\n\n// convert slice objects to array of slice values\n// only care about inbound to deposit account, not change\nconst getDepositSlices = (state) => Object.values(state.wallet.deposits.nodes);\nconst getWalletSlices = (state) => [\n  ...Object.values(state.wallet.deposits.nodes),\n  ...Object.values(state.wallet.change.nodes),\n];\n\n/**\n * @description cycle through all slices to calculate total balance of all utxos\n * from all slices including pending.\n */\nexport const getTotalbalance = createSelector(getWalletSlices, (slices) => {\n  return slices.reduce((balance, slice) => {\n    const sliceTotal = slice.utxos.reduce((total, utxo) => {\n      return total + parseInt(utxo.amountSats, 10);\n    }, 0);\n    return balance + sliceTotal;\n  }, 0);\n});\n\nexport const getPendingBalance = createSelector(\n  getDepositSlices,\n  // iterate through all slices to add up the pending balance\n  (slices) => {\n    // reduce slices to calculate unconfirmed utxos from each slice\n    return slices.reduce((balance, currentSlice) => {\n      // if the current slice has no UTXOs, then continue\n      if (!currentSlice.utxos.length) return balance;\n      // otherwise, loop through available utxos and add balance of those\n      // that are unconfirmed\n      const sliceBalance = currentSlice.utxos.reduce((total, utxo) => {\n        if (!utxo.confirmed) return total + parseInt(utxo.amountSats, 10);\n        return total;\n      }, 0);\n\n      // add slice's pending balance to aggregated balance\n      return sliceBalance + balance;\n    }, 0);\n  }\n);\n\n/**\n * @description selector that subtracts pending balance (calculated with\n * other selector) from total balance of each braid which is stored in the state\n */\nexport const getConfirmedBalance = createSelector(\n  [getTotalbalance, getPendingBalance],\n  (totalBalance, pendingBalance) => totalBalance - pendingBalance\n);\n\n/**\n * @description Returns a selector with all slices from both deposit and change braids\n * also adds a \"lastUsed\" property for each slice\n */\nexport const getSlicesWithLastUsed = createSelector(\n  getWalletSlices,\n  (slices) => {\n    return slices.map((slice) => {\n      if (!slice.utxos.length && slice.addressUsed)\n        return { ...slice, lastUsed: \"Spent\" };\n\n      // if no utxos and no recorded balanceSats then just return the slice unchanged\n      if (!slice.utxos.length && slice.balanceSats.isEqualTo(0)) return slice;\n\n      // find the last UTXO time for the last used time for that slice\n      const maxtime = Math.max(...slice.utxos.map((utxo) => utxo.time));\n\n      // if no max was able to be found, but we still have a balanceSats\n      // then we can can assume the utxo is pending\n      if (\n        Number.isNaN(maxtime) ||\n        (slice.balanceSats.isGreaterThan(0) && !slice.utxos.length)\n      )\n        return { ...slice, lastUsed: \"Pending\" };\n      return {\n        ...slice,\n        lastUsed: new Date(1000 * maxtime).toLocaleDateString(),\n      };\n    });\n  }\n);\n\n/**\n * Gets the set of spendable slices, i.e. ones that don't have a\n * pending utxo and are not spent\n */\nexport const getSpendableSlices = createSelector(\n  getSlicesWithLastUsed,\n  (slices) => {\n    return slices.filter(\n      (slice) =>\n        // pending change is considered spendable\n        (slice.lastUsed !== \"Pending\" || slice.change) &&\n        slice.lastUsed !== \"Spent\" &&\n        slice.utxos.length\n    );\n  }\n);\n\n/**\n * @description Returns a selector that provides all spent slices, i.e.\n * All slices that have been used but have no balance left.\n */\nexport const getSpentSlices = createSelector(getSlicesWithLastUsed, (slices) =>\n  slices.filter((slice) => slice.addressUsed && slice.balanceSats.isEqualTo(0))\n);\n\n/**\n * @description Returns a selector that provides all slices with an active balance\n */\nexport const getSlicesWithBalance = createSelector(\n  getSlicesWithLastUsed,\n  (slices) => slices.filter((slice) => slice.balanceSats.isGreaterThan(0))\n);\n\n/**\n * @description Returns a selector that provides all unused slices,\n * i.e. where the balance is zero and the address has not been used\n */\nexport const getZeroBalanceSlices = createSelector(\n  getSlicesWithLastUsed,\n  (slices) =>\n    slices.filter(\n      (slice) => slice.balanceSats.isEqualTo(0) && !slice.addressUsed\n    )\n);\n\n/**\n * @description Returns a selector of all wallet slices\n * where the status of that slice is not known.\n */\nexport const getUnknownAddressSlices = createSelector(\n  getWalletSlices,\n  (slices) => slices.filter((slice) => !slice.addressKnown)\n);\n\n/**\n * @description returns an array of all addresses of slices\n * where the state of that slice is not known\n */\nexport const getUnknownAddresses = createSelector(\n  [getWalletSlices, getUnknownAddressSlices],\n  (slices) => slices.map((slice) => slice.multisig.address)\n);\n\n/**\n * @description Returns a selector of all slices from the _deposit_ braid\n * where the address hasn't been used yet.\n */\nexport const getDepositableSlices = createSelector(getDepositSlices, (slices) =>\n  slices.filter((slice) => slice.balanceSats.isEqualTo(0) && !slice.addressUsed)\n);\n","import BigNumber from \"bignumber.js\";\nimport {\n  estimateMultisigTransactionFee,\n  satoshisToBitcoins,\n} from \"unchained-bitcoin\";\n\nimport { getSpendableSlices, getConfirmedBalance } from \"../selectors/wallet\";\nimport { DUST_IN_BTC } from \"../utils/constants\";\n\nexport const CHOOSE_PERFORM_SPEND = \"CHOOSE_PERFORM_SPEND\";\n\nexport const SET_REQUIRED_SIGNERS = \"SET_REQUIRED_SIGNERS\";\nexport const SET_TOTAL_SIGNERS = \"SET_TOTAL_SIGNERS\";\n\nexport const SET_INPUTS = \"SET_INPUTS\";\n\nexport const ADD_OUTPUT = \"ADD_OUTPUT\";\nexport const SET_OUTPUT_ADDRESS = \"SET_OUTPUT_ADDRESS\";\nexport const SET_OUTPUT_AMOUNT = \"SET_OUTPUT_AMOUNT\";\nexport const DELETE_OUTPUT = \"DELETE_OUTPUT\";\n\nexport const SET_FEE_RATE = \"SET_FEE_RATE\";\nexport const SET_FEE = \"SET_FEE\";\n\nexport const FINALIZE_OUTPUTS = \"FINALIZE_OUTPUTS\";\nexport const RESET_OUTPUTS = \"RESET_OUTPUTS\";\n\nexport const SET_TXID = \"SET_TXID\";\nexport const RESET_TRANSACTION = \"RESET_TRANSACTION\";\nexport const SET_IS_WALLET = \"SET_IS_WALLET\";\nexport const SET_CHANGE_OUTPUT_INDEX = \"SET_CHANGE_OUTPUT_INDEX\";\nexport const UPDATE_AUTO_SPEND = \"UPDATE_AUTO_SPEND\";\nexport const SET_CHANGE_ADDRESS = \"SET_CHANGE_ADDRESS\";\nexport const SET_SIGNING_KEY = \"SET_SIGNING_KEY\";\nexport const SET_SPEND_STEP = \"SET_SPEND_STEP\";\nexport const SET_BALANCE_ERROR = \"SET_BALANCE_ERROR\";\nexport const SPEND_STEP_CREATE = 0;\nexport const SPEND_STEP_PREVIEW = 1;\nexport const SPEND_STEP_SIGN = 2;\n\nexport function choosePerformSpend() {\n  return {\n    type: CHOOSE_PERFORM_SPEND,\n  };\n}\n\nexport function setRequiredSigners(number) {\n  return {\n    type: SET_REQUIRED_SIGNERS,\n    value: number,\n  };\n}\n\nexport function setTotalSigners(number) {\n  return {\n    type: SET_TOTAL_SIGNERS,\n    value: number,\n  };\n}\n\nexport function setInputs(inputs) {\n  return {\n    type: SET_INPUTS,\n    value: inputs,\n  };\n}\n\nexport function addOutput() {\n  return {\n    type: ADD_OUTPUT,\n  };\n}\n\nexport function setChangeOutputIndex(number) {\n  return {\n    type: SET_CHANGE_OUTPUT_INDEX,\n    value: number,\n  };\n}\n\nexport function setOutputAddress(number, address) {\n  return {\n    type: SET_OUTPUT_ADDRESS,\n    number,\n    value: address,\n  };\n}\n\nexport function setOutputAmount(number, amountString) {\n  return {\n    type: SET_OUTPUT_AMOUNT,\n    number,\n    value: amountString,\n  };\n}\n\nexport function setChangeAddressAction(value) {\n  return {\n    type: SET_CHANGE_ADDRESS,\n    value,\n  };\n}\n\nexport function setChangeOutput({ value, address }) {\n  return (dispatch, getState) => {\n    const {\n      spend: {\n        transaction: { outputs, changeOutputIndex },\n      },\n    } = getState();\n    // add output for change if there's none set (or it's set to zero)\n    // if there's a change index then we use that\n    // otherwise put it at the end of the outputs\n    if (!changeOutputIndex) dispatch(addOutput());\n\n    // output/change indexes are not zero-indexed\n    const index = changeOutputIndex || outputs.length + 1;\n    dispatch(setChangeOutputIndex(index));\n    dispatch(setChangeAddressAction(address));\n    dispatch(setOutputAddress(index, address));\n    dispatch(setOutputAmount(index, value));\n  };\n}\n\nexport function deleteOutput(number) {\n  return {\n    type: DELETE_OUTPUT,\n    number,\n  };\n}\n\nexport function deleteChangeOutput() {\n  return (dispatch, getState) => {\n    const { changeOutputIndex } = getState().spend.transaction;\n    if (!changeOutputIndex) return;\n\n    dispatch(deleteOutput(changeOutputIndex));\n  };\n}\n\nexport function setFeeRate(valueString) {\n  return {\n    type: SET_FEE_RATE,\n    value: valueString,\n  };\n}\n\nexport function setFee(valueString) {\n  return {\n    type: SET_FEE,\n    value: valueString,\n  };\n}\n\nexport function finalizeOutputs(finalized) {\n  return {\n    type: FINALIZE_OUTPUTS,\n    value: finalized,\n  };\n}\n\nexport function resetOutputs() {\n  return {\n    type: RESET_OUTPUTS,\n  };\n}\n\nexport function setBalanceError(message) {\n  return {\n    type: SET_BALANCE_ERROR,\n    value: message,\n  };\n}\n\nexport function resetTransaction() {\n  return {\n    type: RESET_TRANSACTION,\n  };\n}\n\nexport function setTXID(txid) {\n  return {\n    type: SET_TXID,\n    value: txid,\n  };\n}\n\nexport function setIsWallet() {\n  return {\n    type: SET_IS_WALLET,\n  };\n}\n\nexport function updateAutoSpendAction(value) {\n  return {\n    type: UPDATE_AUTO_SPEND,\n    value,\n  };\n}\n\nexport function setSigningKey(number, extendedPublicKeyImporterIndex) {\n  return {\n    type: SET_SIGNING_KEY,\n    number,\n    value: extendedPublicKeyImporterIndex,\n  };\n}\n\nexport function setSpendStep(value) {\n  return {\n    type: SET_SPEND_STEP,\n    value,\n  };\n}\n\n/**\n * @description Given an output index and the current state of the transaction,\n * calculate an estimated fee for a tx with all spendable utxos as inputs,\n * and then use that to determine value of an output that spends all spendable funds\n * minus fee. Dispatches an action to add that value to the given output.\n * @param {Number} outputIndex - 1-indexed location of the output\n * to add all remaining spendable funds to\n */\nexport function setMaxSpendOnOutput(outputIndex) {\n  return (dispatch, getState) => {\n    const spendableSlices = getSpendableSlices(getState());\n    const confirmedBalance = getConfirmedBalance(getState());\n    const {\n      settings: { addressType, requiredSigners, totalSigners },\n      spend: {\n        transaction: { outputs, feeRate },\n      },\n    } = getState();\n    const numInputs = spendableSlices.reduce(\n      (count, slice) => count + slice.utxos.length,\n      0\n    );\n    const estimatedFee = estimateMultisigTransactionFee({\n      addressType,\n      numInputs,\n      numOutputs: outputs.length,\n      m: requiredSigners,\n      n: totalSigners,\n      feesPerByteInSatoshis: feeRate,\n    });\n\n    const totalOutputValue = outputs.reduce(\n      (total, output) =>\n        total.plus(output.amount.length ? output.amountSats : 0),\n      new BigNumber(0)\n    );\n\n    const spendAllAmount = satoshisToBitcoins(\n      new BigNumber(confirmedBalance)\n        .minus(outputs.length > 1 ? totalOutputValue : 0)\n        .minus(estimatedFee)\n    );\n\n    if (\n      (spendAllAmount.isLessThanOrEqualTo(satoshisToBitcoins(estimatedFee)) &&\n        outputs.length > 1) ||\n      spendAllAmount.isLessThan(DUST_IN_BTC)\n    )\n      return dispatch(\n        setBalanceError(\n          \"Not enough available funds for max spend. Clear other outputs or wait for incoming deposits to confirm.\"\n        )\n      );\n    return dispatch(setOutputAmount(outputIndex, spendAllAmount.toFixed()));\n  };\n}\n","export const SET_ERROR_NOTIFICATION = \"SET_ERROR_NOTIFICATION\";\nexport const CLEAR_ERROR_NOTIFICATION = \"CLEAR_ERROR_NOTIFICATION\";\n\nexport function setErrorNotification(message) {\n  return {\n    type: SET_ERROR_NOTIFICATION,\n    value: message,\n  };\n}\n\nexport function clearErrorNotification() {\n  return {\n    type: CLEAR_ERROR_NOTIFICATION,\n  };\n}\n","import {\n  estimateMultisigTransactionFee,\n  satoshisToBitcoins,\n} from \"unchained-bitcoin\";\n\nimport BigNumber from \"bignumber.js\";\nimport { fetchAddressUTXOs } from \"../blockchain\";\nimport { isChange } from \"../utils/slices\";\nimport { naiveCoinSelection } from \"../utils\";\nimport {\n  setBalanceError,\n  setChangeOutput,\n  setInputs,\n  setFee,\n  finalizeOutputs,\n} from \"./transactionActions\";\nimport { setErrorNotification } from \"./errorNotificationActions\";\nimport { getSpendableSlices } from \"../selectors/wallet\";\n\nexport const UPDATE_DEPOSIT_SLICE = \"UPDATE_DEPOSIT_SLICE\";\nexport const UPDATE_CHANGE_SLICE = \"UPDATE_CHANGE_SLICE\";\nexport const RESET_NODES_SPEND = \"RESET_NODES_SPEND\";\nexport const UPDATE_WALLET_NAME = \"UPDATE_WALLET_NAME\";\nexport const UPDATE_WALLET_MODE = \"UPDATE_WALLET_MODE\";\nexport const RESET_WALLET_VIEW = \"RESET_WALLET_VIEW\";\nexport const RESET_WALLET = \"RESET_WALLET\";\nexport const SPEND_SLICES = \"SPEND_SLICES\";\nexport const INITIAL_LOAD_COMPLETE = \"INITIAL_LOAD_COMPLETE\";\nexport const RESET_NODES_FETCH_ERRORS = \"RESET_NODES_FETCH_ERRORS\";\n\nexport const WALLET_MODES = {\n  VIEW: 0,\n  DEPOSIT: 1,\n  SPEND: 2,\n};\n\nexport function updateDepositSliceAction(value) {\n  return {\n    type: UPDATE_DEPOSIT_SLICE,\n    value: {\n      ...value,\n      ...{ change: false },\n    },\n  };\n}\n\nexport function updateChangeSliceAction(value) {\n  return {\n    type: UPDATE_CHANGE_SLICE,\n    value: {\n      ...value,\n      ...{ change: true },\n    },\n  };\n}\n\nexport function resetNodesSpend() {\n  return {\n    type: RESET_NODES_SPEND,\n  };\n}\n\n/**\n * @description This dispatcher goes through the necessary steps and dispatching\n * related actions for the process of selecting coins for a transaction.\n * 1. Get all spendable slices that can be used for inputs\n * 2. Select the utxos needed to fund the tx and determine if change is needed\n * 3. Set a change output if necessary\n * 4. Determine and set fee\n * 5. Mark all slices being spent so the store is aware that they've been selected\n */\nexport function autoSelectCoins() {\n  // eslint-disable-next-line consistent-return\n  return (dispatch, getState) => {\n    const {\n      settings,\n      spend: { transaction },\n      wallet: {\n        change: {\n          nextNode: {\n            multisig: { address: changeAddress },\n          },\n        },\n      },\n    } = getState();\n    const { totalSigners: n, requiredSigners: m, addressType } = settings;\n    const { outputs, feeRate: feesPerByteInSatoshis } = transaction;\n    const spendableSlices = getSpendableSlices(getState());\n\n    let selectedUtxos;\n    let changeRequired;\n\n    // select coins and catch error if any occurs during selection\n    try {\n      [selectedUtxos, changeRequired] = naiveCoinSelection({\n        outputs,\n        feesPerByteInSatoshis,\n        m,\n        n,\n        addressType,\n        slices: spendableSlices,\n      });\n    } catch (e) {\n      return dispatch(setBalanceError(e.message));\n    }\n\n    // determine fee based on rate, selected utxos and\n    // if change output is required\n    let fee;\n    const options = {\n      addressType,\n      numInputs: selectedUtxos.length,\n      m,\n      n,\n      feesPerByteInSatoshis,\n    };\n\n    // add change output if necessary and make fee calculation\n    if (changeRequired) {\n      // calculate output, input, and fee totals to determine change amount\n      const outputsTotal = outputs.reduce(\n        (total, output) => total.plus(output.amountSats),\n        new BigNumber(0)\n      );\n      const inputsTotalSats = selectedUtxos.reduce(\n        (total, utxo) => total.plus(utxo.amountSats),\n        new BigNumber(0)\n      );\n      fee = estimateMultisigTransactionFee({\n        ...options,\n        numOutputs: outputs.length + 1,\n      });\n\n      const changeAmount = inputsTotalSats\n        .minus(fee)\n        .minus(outputsTotal)\n        .toFixed(8);\n\n      dispatch(\n        setChangeOutput({\n          address: changeAddress,\n          value: satoshisToBitcoins(changeAmount).toFixed(),\n        })\n      );\n    } else {\n      fee = estimateMultisigTransactionFee({\n        ...options,\n        numOutputs: outputs.length,\n      });\n    }\n\n    dispatch(setFee(satoshisToBitcoins(fee).toFixed()));\n    // set chosen selectedUtxos in the transaction store\n    dispatch(setInputs(selectedUtxos));\n    dispatch(finalizeOutputs(true));\n  };\n}\n\n/**\n * @description Given the state of the transaction store, check status of\n * the slices being used in the spend tx and update them once changed state is confirmed.\n * @param {Object} changeSlice - the slice that was chosen as the change output\n */\nexport function updateTxSlices(\n  changeSlice,\n  retries = 10,\n  skipAddresses = new Set()\n) {\n  // eslint-disable-next-line consistent-return\n  return async (dispatch, getState) => {\n    const {\n      settings: { network },\n      client,\n      spend: {\n        transaction: { changeAddress, inputs, txid },\n      },\n      wallet: {\n        deposits: { nextNode: nextDepositSlice, nodes: depositSlices },\n        change: { nodes: changeSlices },\n      },\n    } = getState();\n\n    // utility function for getting utxo set of an address\n    // and formatting the result in a way we can use\n    const fetchSliceStatus = async (address, bip32Path) => {\n      const utxos = await fetchAddressUTXOs(address, network, client);\n      return {\n        addressUsed: true,\n        change: isChange(bip32Path),\n        address,\n        bip32Path,\n        ...utxos,\n      };\n    };\n\n    // array of slices we want to query\n    const slices = [...inputs];\n\n    // if there is a change address in the transaction\n    // then we want to query the state of that slice as well\n    if (changeSlice && changeSlice.multisig.address === changeAddress) {\n      slices.push(changeSlice);\n    }\n\n    // array to store results from queries for each slice\n    const sliceUpdates = [];\n\n    // track which slices are already being queried since\n    // the fetch command will get all utxos for an address\n    // and some inputs might be for the same address\n    const addressSet = new Set();\n\n    // go through each slice and see if it needs to be queried\n    slices.forEach((slice) => {\n      const { address } = slice.multisig;\n      // if address isn't already being queried and isn't in the\n      // set of addresses to skip (which means it's already been\n      // successfully updated), then fetchSliceStatus\n      if (!addressSet.has(address) && !skipAddresses.has(address)) {\n        addressSet.add(address);\n        // setting up async network calls to await all of them\n        sliceUpdates.push(fetchSliceStatus(address, slice.bip32Path));\n      }\n    });\n\n    let queriedSlices;\n    try {\n      queriedSlices = await Promise.all(sliceUpdates);\n    } catch (e) {\n      return dispatch(\n        setErrorNotification(\n          `There was a problem updating wallet state. Try a refresh. Error: ${e.message}`\n        )\n      );\n    }\n\n    // once all queries have completed we can confirm which have been updated\n    // and dispatch the changes to the store\n    for (let i = 0; i < queriedSlices.length; i += 1) {\n      const slice = queriedSlices[i];\n      const utxoCount = slice.change\n        ? changeSlices[slice.bip32Path].utxos.length\n        : depositSlices[slice.bip32Path].utxos.length;\n\n      // if the utxo count is not the same then we can reliably update\n      // this slice and can skip in any future calls\n      if (slice && slice.utxos && slice.utxos.length !== utxoCount) {\n        dispatch({\n          type: slice.change ? UPDATE_CHANGE_SLICE : UPDATE_DEPOSIT_SLICE,\n          value: slice,\n        });\n        skipAddresses.add(slice.address);\n      }\n    }\n\n    // if not all slices queried were successful, then we want to recursively call\n    // updateTxSlices, counting down retries and with the full set of successful queries\n    // ALL input slices must return a different utxo set otherwise something went wrong\n    if (skipAddresses.size !== queriedSlices.length && retries)\n      return setTimeout(\n        () => dispatch(updateTxSlices(changeSlice, retries - 1, skipAddresses)),\n        750\n      );\n\n    // if we're out of retries and counts are still the same\n    // then we're done trying and should show an error\n    if (!retries) {\n      let message = `There was a problem updating the wallet balance.\n      It is recommended you refresh the wallet to make sure UTXO current set is up to date.`;\n      if (txid && txid.length) message += ` Transaction ID: ${txid}`;\n      return dispatch(setErrorNotification(message));\n    }\n\n    // Check the next deposit slice just in case a spend is to own wallet.\n    // This doesn't catch all self-spend cases but should catch the majority\n    // to avoid any confusion for less technical users.\n    const updatedSlice = await fetchSliceStatus(\n      nextDepositSlice.multisig.address,\n      nextDepositSlice.bip32Path\n    );\n\n    // if its status has changed and the utxo set for the next\n    // deposit slice is different, then update it as well\n    if (\n      updatedSlice.utxos.length !==\n      depositSlices[updatedSlice.bip32Path].utxos.length\n    )\n      return dispatch({ type: UPDATE_DEPOSIT_SLICE, value: updatedSlice });\n  };\n}\n\nexport function setWalletModeAction(value) {\n  return {\n    type: UPDATE_WALLET_MODE,\n    value,\n  };\n}\n\nexport function updateWalletNameAction(number, value) {\n  return {\n    type: UPDATE_WALLET_NAME,\n    value,\n  };\n}\n\nexport function resetWalletView() {\n  return {\n    type: RESET_WALLET_VIEW,\n  };\n}\n\nexport function resetWallet() {\n  return {\n    type: RESET_WALLET,\n  };\n}\n\nexport function initialLoadComplete() {\n  return {\n    type: INITIAL_LOAD_COMPLETE,\n  };\n}\n\nexport function resetNodesFetchErrors() {\n  return {\n    type: RESET_NODES_FETCH_ERRORS,\n  };\n}\n","import {\n  updateDepositSliceAction,\n  updateChangeSliceAction,\n} from \"./walletActions\";\nimport { fetchAddressUTXOs, getAddressStatus } from \"../blockchain\";\nimport { setErrorNotification } from \"./errorNotificationActions\";\n\nexport const UPDATE_BRAID_SLICE = \"UPDATE_BRAID_SLICE\";\n\n/**\n * Given an array of slices from one or more braids,\n * query the utxos for that slice (i.e. at that address) and\n * check if the address is \"used\". Will then dispatch actions\n * to update the data for each slice\n * @param {array<object>} slices - array of slices from one or more braids\n */\nexport const fetchSliceData = async (slices) => {\n  return async (dispatch, getState) => {\n    const { network } = getState().settings;\n    const { client } = getState();\n\n    try {\n      // Create a list of the async calls for updating the slice data.\n      // This lets us run these requests in parallel with a Promise.all\n      const sliceDataPromises = slices.map((slice) => {\n        const { address } = slice.multisig;\n        // creating a tuple of async calls that will need to be resolved\n        // for each slice we're querying for\n        return Promise.all([\n          fetchAddressUTXOs(address, network, client),\n          getAddressStatus(address, network, client),\n        ]);\n      });\n\n      // wait until we've gotten the updates for each slice\n      const queriedSlices = await Promise.all(sliceDataPromises);\n\n      // each slice had two queries and should be in a tuple\n      queriedSlices.forEach(([addressData, addressStatus], index) => {\n        // reference to the original slice object passed into action creator\n        const slice = slices[index];\n\n        // for each queried slice, we need to check if there are utxos\n        // skip if no updates\n        if (!addressData || !addressData.utxos.length) return;\n\n        const updater = slice.change\n          ? updateChangeSliceAction\n          : updateDepositSliceAction;\n        const updatedSlice = {\n          bip32Path: slice.bip32Path,\n          addressKnown: true,\n          ...addressData,\n          addressStatus,\n        };\n        dispatch(updater(updatedSlice));\n      });\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(\n        \"There was a problem getting updated braid data:\",\n        e.message\n      );\n      dispatch(setErrorNotification(e.message));\n    }\n  };\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { SvgIcon } from \"@material-ui/core\";\nimport { MAINNET } from \"unchained-bitcoin\";\n\nconst BitcoinIcon = ({ network }) => (\n  <SvgIcon\n    data-cy=\"bitcoin-icon\"\n    htmlColor={network === MAINNET ? \"orange\" : \"grey\"}\n  >\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      aria-hidden=\"true\"\n      focusable=\"false\"\n      data-prefix=\"fab\"\n      data-icon=\"bitcoin\"\n      className=\"svg-inline--fa fa-bitcoin fa-w-16\"\n      role=\"img\"\n      viewBox=\"0 0 512 512\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zm-141.651-35.33c4.937-32.999-20.191-50.739-54.55-62.573l11.146-44.702-27.213-6.781-10.851 43.524c-7.154-1.783-14.502-3.464-21.803-5.13l10.929-43.81-27.198-6.781-11.153 44.686c-5.922-1.349-11.735-2.682-17.377-4.084l.031-.14-37.53-9.37-7.239 29.062s20.191 4.627 19.765 4.913c11.022 2.751 13.014 10.044 12.68 15.825l-12.696 50.925c.76.194 1.744.473 2.829.907-.907-.225-1.876-.473-2.876-.713l-17.796 71.338c-1.349 3.348-4.767 8.37-12.471 6.464.271.395-19.78-4.937-19.78-4.937l-13.51 31.147 35.414 8.827c6.588 1.651 13.045 3.379 19.4 5.006l-11.262 45.213 27.182 6.781 11.153-44.733a1038.209 1038.209 0 0 0 21.687 5.627l-11.115 44.523 27.213 6.781 11.262-45.128c46.404 8.781 81.299 5.239 95.986-36.727 11.836-33.79-.589-53.281-25.004-65.991 17.78-4.098 31.174-15.792 34.747-39.949zm-62.177 87.179c-8.41 33.79-65.308 15.523-83.755 10.943l14.944-59.899c18.446 4.603 77.6 13.717 68.811 48.956zm8.417-87.667c-7.673 30.736-55.031 15.12-70.393 11.292l13.548-54.327c15.363 3.828 64.836 10.973 56.845 43.035z\"\n      />\n    </svg>\n  </SvgIcon>\n);\n\nBitcoinIcon.propTypes = {\n  network: PropTypes.string,\n};\n\nBitcoinIcon.defaultProps = {\n  network: MAINNET,\n};\n\nexport default BitcoinIcon;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Components\nimport { Grid, IconButton, TextField } from \"@material-ui/core\";\nimport { Check, Clear, Edit } from \"@material-ui/icons\";\n\nclass EditableName extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editing: false,\n      newName: \"\",\n      error: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    const { name } = this.props;\n    this.setState({ newName: name });\n  };\n\n  render = () => {\n    const { name } = this.props;\n    const { editing, newName, error } = this.state;\n    if (editing) {\n      // <Form onSubmit={this.submit} inline>\n      return (\n        <Grid container alignItems=\"center\">\n          <Grid item>\n            <TextField\n              autoFocus\n              label=\"Name\"\n              value={newName}\n              onChange={this.handleChange}\n              error={this.hasError()}\n              helperText={error}\n            />\n          </Grid>\n\n          <Grid item>\n            <IconButton\n              data-cy=\"save-button\"\n              size=\"small\"\n              onClick={this.submit}\n              disabled={this.hasError()}\n            >\n              <Check />\n            </IconButton>\n          </Grid>\n\n          <Grid item>\n            <IconButton\n              data-cy=\"cancel-button\"\n              color=\"secondary\"\n              size=\"small\"\n              onClick={this.cancel}\n            >\n              <Clear />\n            </IconButton>\n          </Grid>\n        </Grid>\n      );\n    }\n    return (\n      <span>\n        <IconButton\n          data-cy=\"edit-button\"\n          size=\"small\"\n          onClick={this.startEditing}\n        >\n          <Edit />\n        </IconButton>\n        &nbsp;\n        <span data-cy=\"editable-name-value\">{name}</span>\n      </span>\n    );\n  };\n\n  hasError = () => {\n    const { error } = this.state;\n    return error !== \"\";\n  };\n\n  startEditing = (event) => {\n    const { name } = this.props;\n    event.preventDefault();\n    this.setState({ editing: true, newName: name });\n  };\n\n  handleChange = (event) => {\n    const newName = event.target.value;\n    let error = \"\";\n    if (newName === null || newName === undefined || newName === \"\") {\n      error = \"Name cannot be blank.\";\n    }\n    this.setState({ newName, error });\n  };\n\n  submit = () => {\n    const { setName, number } = this.props;\n    const { newName } = this.state;\n    setName(number, newName);\n    this.setState({ editing: false });\n  };\n\n  cancel = () => {\n    const { name } = this.props;\n    this.setState({ error: \"\", newName: name, editing: false });\n  };\n}\n\nEditableName.propTypes = {\n  number: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  setName: PropTypes.func.isRequired,\n};\n\nexport default EditableName;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { NETWORKS } from \"unchained-bitcoin\";\n\n// Components\nimport {\n  Card,\n  CardContent,\n  Typography,\n  makeStyles,\n  Grid,\n} from \"@material-ui/core\";\nimport BitcoinIcon from \"../BitcoinIcon\";\nimport EditableName from \"../EditableName\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100%\",\n  },\n  title: {\n    fontSize: \"2rem\",\n    color: \"#212529\",\n  },\n  balance: {\n    fontSize: \"1.2rem\",\n  },\n  gutter: {\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    paddingTop: theme.spacing(2),\n  },\n}));\n\nconst WalletInfoCard = ({\n  walletName,\n  setName,\n  balance = 0,\n  pendingBalance,\n  editable,\n  network,\n}) => {\n  const classes = useStyles();\n  return (\n    <Card data-cy=\"wallet-info-card\" className={classes.root}>\n      <CardContent>\n        <Grid container direction=\"row\" alignItems=\"center\">\n          {editable ? (\n            <Grid item>\n              <Typography variant=\"h1\" className={classes.title}>\n                <EditableName number={0} name={walletName} setName={setName} />\n              </Typography>\n            </Grid>\n          ) : (\n            <>\n              <Grid container alignItems=\"center\" className={classes.gutter}>\n                <Grid item xs={1}>\n                  <BitcoinIcon network={network} />\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h1\" className={classes.title}>\n                    {walletName}\n                  </Typography>\n                </Grid>\n              </Grid>\n              <Grid container className={classes.gutter}>\n                <Grid item xs={12} mt={5}>\n                  <Typography\n                    data-cy=\"balance\"\n                    variant=\"subtitle1\"\n                    className={classes.balance}\n                  >\n                    {balance} BTC\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography data-cy=\"pending-balance\" variant=\"caption\">\n                    {pendingBalance !== 0 ? (\n                      <>\n                        <span\n                          style={{\n                            color: pendingBalance > 0 ? \"green\" : \"red\",\n                            fontWeight: \"bold\",\n                          }}\n                        >\n                          {pendingBalance > 0 ? \"+\" : \"\"}\n                          {pendingBalance} BTC\n                        </span>{\" \"}\n                        (unconfirmed)\n                      </>\n                    ) : (\n                      \"\"\n                    )}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </>\n          )}\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nWalletInfoCard.propTypes = {\n  walletName: PropTypes.string.isRequired,\n  network: PropTypes.string,\n  balance: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  pendingBalance: PropTypes.number,\n  editable: PropTypes.bool.isRequired,\n  setName: PropTypes.func.isRequired,\n};\n\nWalletInfoCard.defaultProps = {\n  network: NETWORKS.TESTNET,\n  balance: 0,\n  pendingBalance: 0,\n};\n\nexport default WalletInfoCard;\n","export const SET_NETWORK = \"SET_NETWORK\";\nexport const SET_TOTAL_SIGNERS = \"SET_TOTAL_SIGNERS\";\nexport const SET_REQUIRED_SIGNERS = \"SET_REQUIRED_SIGNERS\";\nexport const SET_STARTING_ADDRESS_INDEX = \"SET_STARTING_ADDRESS_INDEX\";\nexport const SET_ADDRESS_TYPE = \"SET_ADDRESS_TYPE\";\nexport const SET_FROZEN = \"SET_FROZEN\";\n\nexport function setNetwork(value) {\n  return {\n    type: SET_NETWORK,\n    value,\n  };\n}\n\nexport function setTotalSigners(number) {\n  return {\n    type: SET_TOTAL_SIGNERS,\n    value: number,\n  };\n}\n\nexport function setRequiredSigners(number) {\n  return {\n    type: SET_REQUIRED_SIGNERS,\n    value: number,\n  };\n}\n\nexport function setStartingAddressIndex(number) {\n  return {\n    type: SET_STARTING_ADDRESS_INDEX,\n    value: number,\n  };\n}\n\nexport function setAddressType(value) {\n  return {\n    type: SET_ADDRESS_TYPE,\n    value,\n  };\n}\n\nexport function setFrozen(value) {\n  return {\n    type: SET_FROZEN,\n    value,\n  };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { TESTNET, MAINNET } from \"unchained-bitcoin\";\n\n// Components\n\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  FormControl,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  FormHelperText,\n} from \"@material-ui/core\";\n\n// Actions\nimport { setNetwork as setNetworkAction } from \"../actions/settingsActions\";\n\nclass NetworkPicker extends React.Component {\n  handleNetworkChange = (event) => {\n    const { setNetwork } = this.props;\n    setNetwork(event.target.value);\n  };\n\n  render() {\n    const { network, frozen } = this.props;\n    return (\n      <Card>\n        <CardHeader title=\"Network\" />\n        <CardContent>\n          <FormControl component=\"fieldset\">\n            <RadioGroup>\n              <FormControlLabel\n                id=\"mainnet\"\n                control={<Radio color=\"primary\" />}\n                name=\"network\"\n                value=\"mainnet\"\n                label={<strong>Mainnet</strong>}\n                onChange={this.handleNetworkChange}\n                checked={network === MAINNET}\n                disabled={frozen}\n              />\n              <FormControlLabel\n                id=\"testnet\"\n                control={<Radio color=\"primary\" />}\n                name=\"network\"\n                value=\"testnet\"\n                label=\"Testnet\"\n                onChange={this.handleNetworkChange}\n                checked={network === TESTNET}\n                disabled={frozen}\n              />\n            </RadioGroup>\n            <FormHelperText>\n              <small>\n                Choose &apos;Mainnet&apos; if you don&apos;t understand the\n                difference.\n              </small>\n            </FormHelperText>\n          </FormControl>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nNetworkPicker.propTypes = {\n  network: PropTypes.string.isRequired,\n  frozen: PropTypes.bool.isRequired,\n  setNetwork: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    network: state.settings.network,\n    frozen: state.settings.frozen,\n  };\n}\n\nconst mapDispatchToProps = {\n  setNetwork: setNetworkAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NetworkPicker);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\n// Actions\n\n// Components\nimport {\n  Typography,\n  Grid,\n  IconButton,\n  Card,\n  CardHeader,\n  CardContent,\n  Box,\n} from \"@material-ui/core\";\nimport { AddCircle, RemoveCircle } from \"@material-ui/icons\";\nimport {\n  setTotalSigners as setTotalSignersAction,\n  setRequiredSigners as setRequiredSignersAction,\n} from \"../actions/settingsActions\";\nimport \"./styles.css\";\n\nconst MAX_TOTAL_SIGNERS = 7;\n\nclass QuorumPicker extends React.Component {\n  renderIncrementRequiredSigners = () => {\n    const { requiredSigners, totalSigners, frozen } = this.props;\n    const disabled = requiredSigners === totalSigners || frozen;\n    return (\n      <IconButton\n        color=\"primary\"\n        onClick={this.handleIncrementRequiredSigners}\n        disabled={disabled}\n      >\n        <AddCircle />\n      </IconButton>\n    );\n  };\n\n  renderDecrementRequiredSigners = () => {\n    const { requiredSigners, frozen } = this.props;\n    const disabled = requiredSigners === 1 || frozen;\n    return (\n      <IconButton\n        color=\"secondary\"\n        onClick={this.handleDecrementRequiredSigners}\n        disabled={disabled}\n      >\n        <RemoveCircle />\n      </IconButton>\n    );\n  };\n\n  renderIncrementTotalSigners = () => {\n    const { totalSigners, frozen } = this.props;\n    const disabled = totalSigners === MAX_TOTAL_SIGNERS || frozen;\n    return (\n      <IconButton\n        color=\"primary\"\n        onClick={this.handleIncrementTotalSigners}\n        disabled={disabled}\n      >\n        <AddCircle />\n      </IconButton>\n    );\n  };\n\n  renderDecrementTotalSigners = () => {\n    const { requiredSigners, totalSigners, frozen } = this.props;\n    const disabled =\n      totalSigners === requiredSigners || totalSigners === 2 || frozen;\n    return (\n      <IconButton\n        color=\"secondary\"\n        onClick={this.handleDecrementTotalSigners}\n        disabled={disabled}\n      >\n        <RemoveCircle />\n      </IconButton>\n    );\n  };\n\n  handleIncrementRequiredSigners = (event) => {\n    const { requiredSigners, setRequiredSigners } = this.props;\n    setRequiredSigners(requiredSigners + 1);\n    event.preventDefault();\n  };\n\n  handleDecrementRequiredSigners = (event) => {\n    const { requiredSigners, setRequiredSigners } = this.props;\n    setRequiredSigners(requiredSigners - 1);\n    event.preventDefault();\n  };\n\n  handleIncrementTotalSigners = (event) => {\n    const { totalSigners, setTotalSigners } = this.props;\n    setTotalSigners(totalSigners + 1);\n    event.preventDefault();\n  };\n\n  handleDecrementTotalSigners = (event) => {\n    const { totalSigners, setTotalSigners } = this.props;\n    setTotalSigners(totalSigners - 1);\n    event.preventDefault();\n  };\n\n  render() {\n    const { requiredSigners, totalSigners } = this.props;\n\n    return (\n      <Card>\n        <CardHeader title=\"Quorum\" />\n        <CardContent>\n          <Box>\n            <Grid container justify=\"center\">\n              <Grid container item xs={2} direction=\"column\">\n                &nbsp;\n              </Grid>\n\n              <Grid\n                container\n                item\n                xs={3}\n                direction=\"column\"\n                alignItems=\"center\"\n              >\n                <Grid item>{this.renderIncrementRequiredSigners()}</Grid>\n\n                <Grid item>\n                  <Typography variant=\"h2\">{requiredSigners}</Typography>\n                </Grid>\n\n                <Grid item>\n                  <small>\n                    <p>Required</p>\n                  </small>\n                </Grid>\n\n                <Grid item>{this.renderDecrementRequiredSigners()}</Grid>\n              </Grid>\n\n              <Grid\n                container\n                item\n                xs={2}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n              >\n                <Grid item>\n                  <Typography variant=\"h6\">of</Typography>\n                </Grid>\n              </Grid>\n\n              <Grid\n                item\n                container\n                xs={3}\n                direction=\"column\"\n                alignItems=\"center\"\n              >\n                <Grid item>{this.renderIncrementTotalSigners()}</Grid>\n\n                <Grid item>\n                  <Typography variant=\"h2\">{totalSigners}</Typography>\n                </Grid>\n\n                <Grid item>\n                  <small>\n                    <p>Total</p>\n                  </small>\n                </Grid>\n\n                <Grid item>{this.renderDecrementTotalSigners()}</Grid>\n              </Grid>\n              <Grid container item xs={2} direction=\"column\">\n                &nbsp;\n              </Grid>\n            </Grid>\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nQuorumPicker.propTypes = {\n  totalSigners: PropTypes.number.isRequired,\n  requiredSigners: PropTypes.number.isRequired,\n  frozen: PropTypes.bool.isRequired,\n  setTotalSigners: PropTypes.func.isRequired,\n  setRequiredSigners: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return state.settings;\n}\n\nconst mapDispatchToProps = {\n  setTotalSigners: setTotalSignersAction,\n  setRequiredSigners: setRequiredSignersAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuorumPicker);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { P2SH, P2SH_P2WSH, P2WSH } from \"unchained-bitcoin\";\n\n// Components\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  FormControl,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  FormHelperText,\n} from \"@material-ui/core\";\n// Actions\nimport { setAddressType } from \"../actions/settingsActions\";\n\nclass AddressTypePicker extends React.Component {\n  handleTypeChange = (event) => {\n    const { setType } = this.props;\n    setType(event.target.value);\n  };\n\n  render() {\n    const { addressType, frozen } = this.props;\n    return (\n      <Card>\n        <CardHeader title=\"Address Type\" />\n        <CardContent>\n          <FormControl component=\"fieldset\">\n            <RadioGroup>\n              <FormControlLabel\n                id={P2SH}\n                control={<Radio color=\"primary\" />}\n                name=\"type\"\n                value={P2SH}\n                label={P2SH}\n                onChange={this.handleTypeChange}\n                checked={addressType === P2SH}\n                disabled={frozen}\n              />\n              <FormControlLabel\n                id={P2SH_P2WSH}\n                control={<Radio color=\"primary\" />}\n                name=\"type\"\n                value={P2SH_P2WSH}\n                label={P2SH_P2WSH}\n                onChange={this.handleTypeChange}\n                checked={addressType === P2SH_P2WSH}\n                disabled={frozen}\n              />\n              <FormControlLabel\n                id={P2WSH}\n                control={<Radio color=\"primary\" />}\n                name=\"type\"\n                value={P2WSH}\n                label={P2WSH}\n                onChange={this.handleTypeChange}\n                checked={addressType === P2WSH}\n                disabled={frozen}\n              />\n            </RadioGroup>\n            <FormHelperText>\n              <small>\n                Choose &apos;\n                {P2WSH}\n                &apos; for best practices, &apos;\n                {P2SH}\n                &apos; for greatest compatibility.\n              </small>\n            </FormHelperText>\n          </FormControl>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nAddressTypePicker.propTypes = {\n  addressType: PropTypes.string.isRequired,\n  frozen: PropTypes.bool.isRequired,\n  setType: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return state.settings;\n}\n\nconst mapDispatchToProps = {\n  setType: setAddressType,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressTypePicker);\n","function actionWrapper(type) {\n  return (value) => {\n    return { type, value };\n  };\n}\n\nexport function wrappedActions(mapping) {\n  const wrappedMapping = {};\n  const actionFunctionNames = Object.keys(mapping);\n  let actionIndex;\n  for (\n    actionIndex = 0;\n    actionIndex < actionFunctionNames.length;\n    actionIndex += 1\n  ) {\n    const actionFunctionName = actionFunctionNames[actionIndex];\n    const actionType = mapping[actionFunctionName];\n    wrappedMapping[actionFunctionName] = actionWrapper(actionType);\n  }\n  return wrappedMapping;\n}\n\nfunction numberedActionWrapper(type) {\n  return (number, value) => {\n    return { type, number, value };\n  };\n}\n\nexport function wrappedNumberedActions(mapping) {\n  const wrappedMapping = {};\n  const actionFunctionNames = Object.keys(mapping);\n  let actionIndex;\n  for (\n    actionIndex = 0;\n    actionIndex < actionFunctionNames.length;\n    actionIndex += 1\n  ) {\n    const actionFunctionName = actionFunctionNames[actionIndex];\n    const actionType = mapping[actionFunctionName];\n    wrappedMapping[actionFunctionName] = numberedActionWrapper(actionType);\n  }\n  return wrappedMapping;\n}\n","export const SET_CLIENT_TYPE = \"SET_CLIENT_TYPE\";\nexport const SET_CLIENT_URL = \"SET_CLIENT_URL\";\nexport const SET_CLIENT_USERNAME = \"SET_CLIENT_USERNAME\";\nexport const SET_CLIENT_PASSWORD = \"SET_CLIENT_PASSWORD\";\n\nexport const SET_CLIENT_URL_ERROR = \"SET_CLIENT_URL_ERROR\";\nexport const SET_CLIENT_USERNAME_ERROR = \"SET_CLIENT_USERNAME_ERROR\";\nexport const SET_CLIENT_PASSWORD_ERROR = \"SET_CLIENT_PASSWORD_ERROR\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Components\nimport {\n  Grid,\n  TextField,\n  Button,\n  FormHelperText,\n  Box,\n} from \"@material-ui/core\";\n\nimport { externalLink } from \"../../utils\";\n\nconst PrivateClientSettings = ({\n  handleUrlChange,\n  handleUsernameChange,\n  handlePasswordChange,\n  client,\n  urlError,\n  usernameError,\n  passwordError,\n  privateNotes,\n  connectSuccess,\n  connectError,\n  testConnection,\n}) => (\n  <div>\n    <p>\n      A <code>bitcoind</code>\n      -compatible client is required to query UTXO data, estimate fees, and\n      broadcast transactions.\n    </p>\n    <p>\n      <small>\n        {\n          \"Due to CORS requirements, you must use a proxy around the node. Instructions are available \"\n        }\n        {externalLink(\n          \"https://github.com/unchained-capital/caravan#adding-cors-headers\",\n          \"here\"\n        )}\n        {\".\"}\n      </small>\n    </p>\n    <form>\n      <Grid container direction=\"column\" spacing={1}>\n        <Grid item>\n          <TextField\n            fullWidth\n            label=\"URL\"\n            value={client.url}\n            onChange={handleUrlChange}\n            error={urlError !== \"\"}\n            helperText={urlError}\n          />\n        </Grid>\n\n        <Grid item>\n          <TextField\n            id=\"bitcoind-username\"\n            fullWidth\n            label=\"Username\"\n            value={client.username}\n            onChange={handleUsernameChange}\n            error={usernameError !== \"\"}\n            helperText={usernameError}\n          />\n        </Grid>\n\n        <Grid item>\n          <TextField\n            id=\"bitcoind-password\"\n            fullWidth\n            type=\"password\"\n            label=\"Password\"\n            value={client.password}\n            onChange={handlePasswordChange}\n            error={passwordError !== \"\"}\n            helperText={passwordError}\n          />\n        </Grid>\n        <Grid item>\n          <Box mt={1}>\n            <Button variant=\"contained\" onClick={testConnection}>\n              Test Connection\n            </Button>\n          </Box>\n          <Box mt={2}>\n            {connectSuccess && (\n              <FormHelperText>Connection Success!</FormHelperText>\n            )}\n            {connectError !== \"\" && (\n              <FormHelperText error>{connectError}</FormHelperText>\n            )}\n          </Box>\n        </Grid>\n      </Grid>\n    </form>\n    {privateNotes}\n  </div>\n);\n\nPrivateClientSettings.propTypes = {\n  client: PropTypes.shape({\n    url: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n  }).isRequired,\n  handleUrlChange: PropTypes.func.isRequired,\n  handleUsernameChange: PropTypes.func.isRequired,\n  handlePasswordChange: PropTypes.func.isRequired,\n  testConnection: PropTypes.func.isRequired,\n  urlError: PropTypes.string,\n  usernameError: PropTypes.string,\n  passwordError: PropTypes.string,\n  privateNotes: PropTypes.node,\n  connectSuccess: PropTypes.bool.isRequired,\n  connectError: PropTypes.string.isRequired,\n};\n\nPrivateClientSettings.defaultProps = {\n  urlError: \"\",\n  usernameError: \"\",\n  passwordError: \"\",\n  privateNotes: React.createElement(\"span\"),\n};\n\nexport default PrivateClientSettings;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  Grid,\n  Card,\n  CardHeader,\n  CardContent,\n  FormControlLabel,\n  FormControl,\n  Radio,\n  RadioGroup,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport { fetchFeeEstimate } from \"../../blockchain\";\n\n// Components\n\n// Actions\nimport { wrappedActions } from \"../../actions/utils\";\nimport {\n  SET_CLIENT_TYPE,\n  SET_CLIENT_URL,\n  SET_CLIENT_USERNAME,\n  SET_CLIENT_PASSWORD,\n  SET_CLIENT_URL_ERROR,\n  SET_CLIENT_USERNAME_ERROR,\n  SET_CLIENT_PASSWORD_ERROR,\n} from \"../../actions/clientActions\";\n\nimport PrivateClientSettings from \"./PrivateClientSettings\";\n\nclass ClientPicker extends React.Component {\n  static validatePassword() {\n    return \"\";\n  }\n\n  static validateUsername() {\n    return \"\";\n  }\n\n  static validateUrl(host) {\n    const validhost = /^http(s)?:\\/\\/[^\\s]+$/.exec(host);\n    if (!validhost) return \"Must be a valid URL.\";\n    return \"\";\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      urlEdited: false,\n      connectError: \"\",\n      connectSuccess: false,\n    };\n  }\n\n  handleTypeChange = (event) => {\n    const { setType, network, setUrl } = this.props;\n    const { urlEdited } = this.state;\n\n    const type = event.target.value;\n    if (type === \"private\" && !urlEdited) {\n      setUrl(`http://localhost:${network === \"mainnet\" ? 8332 : 18332}`);\n    }\n    setType(type);\n  };\n\n  handleUrlChange = (event) => {\n    const { setUrl, setUrlError } = this.props;\n    const { urlEdited } = this.state;\n    const url = event.target.value;\n    const error = ClientPicker.validateUrl(url);\n    if (!urlEdited && !error) this.setState({ urlEdited: true });\n    setUrl(url);\n    setUrlError(error);\n  };\n\n  handleUsernameChange = (event) => {\n    const { setUsername, setUsernameError } = this.props;\n    const username = event.target.value;\n    const error = ClientPicker.validateUsername(username);\n    setUsername(username);\n    setUsernameError(error);\n  };\n\n  handlePasswordChange = (event) => {\n    const { setPassword, setPasswordError } = this.props;\n    const password = event.target.value;\n    const error = ClientPicker.validatePassword(password);\n    setPassword(password);\n    setPasswordError(error);\n  };\n\n  testConnection = async () => {\n    const { network, client } = this.props;\n    this.setState({ connectError: \"\", connectSuccess: false });\n    try {\n      await fetchFeeEstimate(network, client);\n      this.setState({ connectSuccess: true });\n    } catch (e) {\n      this.setState({ connectError: e.message });\n    }\n  };\n\n  render() {\n    const {\n      client,\n      urlError,\n      usernameError,\n      passwordError,\n      privateNotes,\n    } = this.props;\n    const { connectSuccess, connectError } = this.state;\n    return (\n      <Card>\n        <Grid container justify=\"space-between\">\n          <CardHeader title=\"Bitcoin Client\" />\n        </Grid>\n        <CardContent>\n          <Grid item>\n            <FormControl component=\"fieldset\">\n              <RadioGroup>\n                <FormControlLabel\n                  id=\"public\"\n                  control={<Radio color=\"primary\" />}\n                  name=\"clientType\"\n                  value=\"public\"\n                  label={<strong>Public</strong>}\n                  onChange={this.handleTypeChange}\n                  checked={client.type === \"public\"}\n                />\n                <FormControlLabel\n                  id=\"private\"\n                  control={<Radio color=\"primary\" />}\n                  name=\"clientType\"\n                  value=\"private\"\n                  label=\"Private\"\n                  onChange={this.handleTypeChange}\n                  checked={client.type === \"private\"}\n                />\n              </RadioGroup>\n              {client.type === \"public\" && (\n                <FormHelperText>\n                  {\"'Public' uses the \"}\n                  <code>blockstream.info</code>\n                  {\" API. Switch to private to use a \"}\n                  <code>bitcoind</code>\n                  {\" node.\"}\n                </FormHelperText>\n              )}\n              {client.type === \"private\" && (\n                <PrivateClientSettings\n                  handleUrlChange={(event) => this.handleUrlChange(event)}\n                  handleUsernameChange={(event) =>\n                    this.handleUsernameChange(event)\n                  }\n                  handlePasswordChange={(event) =>\n                    this.handlePasswordChange(event)\n                  }\n                  client={client}\n                  urlError={urlError}\n                  usernameError={usernameError}\n                  passwordError={passwordError}\n                  privateNotes={privateNotes}\n                  connectSuccess={connectSuccess}\n                  connectError={connectError}\n                  testConnection={() => this.testConnection()}\n                />\n              )}\n            </FormControl>\n          </Grid>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nClientPicker.propTypes = {\n  client: PropTypes.shape({\n    type: PropTypes.string.isRequired,\n  }).isRequired,\n  network: PropTypes.string.isRequired,\n  privateNotes: PropTypes.shape({}),\n  setUrl: PropTypes.func.isRequired,\n  urlError: PropTypes.string,\n  setUrlError: PropTypes.func.isRequired,\n  setPassword: PropTypes.func.isRequired,\n  passwordError: PropTypes.string,\n  setPasswordError: PropTypes.func.isRequired,\n  setType: PropTypes.func.isRequired,\n  usernameError: PropTypes.string,\n  setUsername: PropTypes.func.isRequired,\n  setUsernameError: PropTypes.func.isRequired,\n};\n\nClientPicker.defaultProps = {\n  urlError: \"\",\n  usernameError: \"\",\n  passwordError: \"\",\n  privateNotes: React.createElement(\"span\"),\n};\n\nfunction mapStateToProps(state) {\n  return {\n    network: state.settings.network,\n    client: state.client,\n    urlError: state.client.urlError,\n    url: state.client.url,\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  wrappedActions({\n    setType: SET_CLIENT_TYPE,\n    setUrl: SET_CLIENT_URL,\n    setUsername: SET_CLIENT_USERNAME,\n    setPassword: SET_CLIENT_PASSWORD,\n    setUrlError: SET_CLIENT_URL_ERROR,\n    setUsernameError: SET_CLIENT_USERNAME_ERROR,\n    setPasswordError: SET_CLIENT_PASSWORD_ERROR,\n  })\n)(ClientPicker);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { validateBIP32Index } from \"unchained-bitcoin\";\nimport {\n  Grid,\n  Card,\n  CardHeader,\n  CardContent,\n  FormControlLabel,\n  FormControl,\n  FormHelperText,\n  Radio,\n  RadioGroup,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\n\nimport { wrappedActions } from \"../actions/utils\";\nimport { SET_STARTING_ADDRESS_INDEX } from \"../actions/settingsActions\";\n\nclass StartingAddressIndexPicker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      customIndex: props.startingAddressIndex !== 0,\n      startingAddressIndexField: props.startingAddressIndex,\n    };\n  }\n\n  handleIndexChange = (event) => {\n    const { setStartingAddressIndex } = this.props;\n    const index = event.target.value;\n    const error = validateBIP32Index(index, { mode: \"unhardened\" }).replace(\n      \"BIP32\",\n      \"Starting Address\"\n    );\n    if (!error && index) {\n      setStartingAddressIndex(parseInt(index, 10));\n    }\n    this.setState({\n      startingAddressIndexField: index,\n      startingAddressIndexError: error,\n    });\n  };\n\n  handleCustomIndexChange = (event) => {\n    const customIndex = event.target.value === \"true\";\n    this.setState({ customIndex });\n  };\n\n  render() {\n    const {\n      customIndex,\n      startingAddressIndexField,\n      startingAddressIndexError,\n    } = this.state;\n    return (\n      <Card>\n        <Grid container justify=\"space-between\">\n          <CardHeader title=\"Starting Address Index\" />\n        </Grid>\n        <CardContent>\n          <Grid item>\n            <FormControl component=\"fieldset\">\n              <RadioGroup>\n                <FormControlLabel\n                  id=\"default\"\n                  control={<Radio color=\"primary\" />}\n                  name=\"customIndex\"\n                  value=\"false\"\n                  label={<strong>Default (0)</strong>}\n                  onChange={this.handleCustomIndexChange}\n                  checked={!customIndex}\n                />\n                <Tooltip\n                  title=\"The starting address index allows you to skip\n                    forward in a wallet. Addresses with indices less than the\n                    starting address are ignored.\"\n                >\n                  <FormControlLabel\n                    id=\"custom\"\n                    control={<Radio color=\"primary\" />}\n                    name=\"customIndex\"\n                    value=\"true\"\n                    label=\"Custom\"\n                    onChange={this.handleCustomIndexChange}\n                    checked={customIndex}\n                  />\n                </Tooltip>\n                <FormHelperText>\n                  Use the default value if you do not understand how to use\n                  starting address index.\n                </FormHelperText>\n              </RadioGroup>\n              {customIndex && (\n                <TextField\n                  fullWidth\n                  value={startingAddressIndexField}\n                  type=\"text\"\n                  name=\"startingAddressIndex\"\n                  onChange={this.handleIndexChange}\n                  error={Boolean(startingAddressIndexError)}\n                  helperText={startingAddressIndexError}\n                />\n              )}\n            </FormControl>\n          </Grid>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nStartingAddressIndexPicker.propTypes = {\n  startingAddressIndex: PropTypes.number.isRequired,\n  setStartingAddressIndex: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    startingAddressIndex: state.settings.startingAddressIndex,\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  wrappedActions({\n    setStartingAddressIndex: SET_STARTING_ADDRESS_INDEX,\n  })\n)(StartingAddressIndexPicker);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport {\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Box,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\n\nclass WalletConfirmation extends React.Component {\n  render = () => {\n    const { startingAddressIndex } = this.props;\n    return (\n      <Box>\n        {startingAddressIndex > 0 && (\n          <Alert severity=\"info\">\n            Starting Address Index set to {startingAddressIndex}\n          </Alert>\n        )}\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>BIP32 Path</TableCell>\n              <TableCell>Extended Public Key</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{this.renderConfirmationInfo()}</TableBody>\n        </Table>\n      </Box>\n    );\n  };\n\n  renderConfirmationInfo = () => {\n    const { extendedPublicKeyImporters } = this.props;\n    return Object.values(extendedPublicKeyImporters).map((importer) => (\n      <TableRow key={importer.extendedPublicKey}>\n        <TableCell>{importer.name}</TableCell>\n        <TableCell>\n          {importer.method === \"text\" ? \"N/A\" : importer.bip32Path}\n        </TableCell>\n        <TableCell>{importer.extendedPublicKey}</TableCell>\n      </TableRow>\n    ));\n  };\n}\n\nWalletConfirmation.propTypes = {\n  startingAddressIndex: PropTypes.number.isRequired,\n  extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    startingAddressIndex: state.settings.startingAddressIndex,\n    extendedPublicKeyImporters: state.quorum.extendedPublicKeyImporters,\n  };\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletConfirmation);\n","import PropTypes from \"prop-types\";\n\nexport const bigNumberPropTypes = {\n  c: PropTypes.arrayOf(PropTypes.number).isRequired,\n  e: PropTypes.number.isRequired,\n  s: PropTypes.number.isRequired,\n};\n\nexport default {\n  bigNumberPropTypes,\n};\n","import PropTypes from \"prop-types\";\nimport { bigNumberPropTypes } from \"./utils\";\n\nconst slicePropTypes = {\n  present: PropTypes.bool,\n  bip32Path: PropTypes.string,\n  publicKeys: PropTypes.array,\n  multisig: PropTypes.shape({}),\n  address: PropTypes.string.isRequired,\n  balanceSats: PropTypes.shape(bigNumberPropTypes),\n  utxos: PropTypes.array,\n  change: PropTypes.bool.isRequired,\n  spend: PropTypes.bool.isRequired,\n  fetchUtxos: PropTypes.bool,\n  fetchUTXOsError: PropTypes.string.isRequired,\n  addressUsed: PropTypes.bool,\n  addressKnown: PropTypes.bool.isRequired,\n  lastUsed: PropTypes.string,\n};\n\nexport default slicePropTypes;\n","import PropTypes from \"prop-types\";\n\nconst clientPropTypes = {\n  type: PropTypes.string.isRequired,\n  url: PropTypes.string,\n  username: PropTypes.string,\n  password: PropTypes.string,\n  urlError: PropTypes.string,\n  usernameError: PropTypes.string,\n  passwordError: PropTypes.string,\n  status: PropTypes.string,\n};\n\nexport default clientPropTypes;\n","import PropTypes from \"prop-types\";\n\nconst settingsPropTypes = {\n  network: PropTypes.string,\n  totalSigners: PropTypes.number,\n  requiredSigners: PropTypes.number,\n  addressType: PropTypes.string,\n  frozen: PropTypes.bool,\n};\n\nexport default settingsPropTypes;\n","import PropTypes from \"prop-types\";\nimport React, { useState, useEffect } from \"react\";\n\n// Components\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { FileCopy } from \"@material-ui/icons\";\nimport { IconButton, makeStyles } from \"@material-ui/core\";\nimport { useSnackbar } from \"notistack\";\n\nconst useStyles = makeStyles(() => ({\n  copyText: {\n    \"&:hover\": { cursor: \"pointer\" },\n  },\n  code: {\n    fontSize: \"1rem\",\n  },\n}));\n\nconst Copyable = ({\n  newline,\n  text,\n  children,\n  showIcon,\n  showText,\n  code,\n  ...otherProps\n}) => {\n  const [copied, setCopied] = useState(false);\n  const [timer, setTimer] = useState(null);\n  const { enqueueSnackbar } = useSnackbar();\n\n  useEffect(() => {\n    if (timer) clearTimeout(timer);\n    // eslint-disable-next-line\n  }, []);\n\n  const classes = useStyles();\n\n  const showSnackbarMessage = () => {\n    const MAX_LENGTH = 25;\n    const shortenedText =\n      text.length > MAX_LENGTH ? `${text.substring(0, MAX_LENGTH)}...` : text;\n\n    enqueueSnackbar(`Copied ${shortenedText} to clipboard`, {\n      preventDuplicate: true,\n    });\n  };\n\n  const onCopy = () => {\n    const timerTimeout = setTimeout(() => {\n      setCopied(false);\n      setTimer(null);\n    }, 1000);\n\n    setCopied(true);\n    setTimer(timerTimeout);\n\n    showSnackbarMessage();\n  };\n\n  const TextComponent = () => {\n    if (code) return <code className={classes.code}>{text}</code>;\n    return <span>{text}</span>;\n  };\n\n  return (\n    // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions\n    <span onClick={(e) => e.stopPropagation()} {...otherProps}>\n      <CopyToClipboard\n        text={text}\n        onCopy={onCopy}\n        options={{ format: \"text/plain\" }}\n      >\n        <span\n          style={{\n            fontStyle: copied ? \"italic\" : \"inherit\",\n            overflowWrap: \"break-word\",\n          }}\n          className={`copyable ${classes.copyText}`}\n        >\n          {children}\n          {showText && <TextComponent />}\n          {newline && <br />}\n          {showIcon && (\n            <IconButton>\n              <FileCopy\n                fontSize=\"small\"\n                color={copied ? \"primary\" : \"action\"}\n              />\n            </IconButton>\n          )}\n        </span>\n      </CopyToClipboard>\n    </span>\n  );\n};\n\nCopyable.propTypes = {\n  // defaults\n  newline: PropTypes.bool,\n  // parent\n  text: PropTypes.string.isRequired,\n  children: PropTypes.node,\n  showIcon: PropTypes.bool,\n  showText: PropTypes.bool,\n  code: PropTypes.bool,\n};\n\nCopyable.defaultProps = {\n  newline: false,\n  showIcon: false,\n  children: React.createElement(\"span\"),\n  showText: true,\n  code: false,\n};\nexport default Copyable;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  blockExplorerTransactionURL,\n  satoshisToBitcoins,\n} from \"unchained-bitcoin\";\nimport {\n  Table,\n  TableHead,\n  TableBody,\n  TableFooter,\n  TableRow,\n  TableCell,\n  Typography,\n} from \"@material-ui/core\";\nimport { OpenInNew } from \"@material-ui/icons\";\nimport { externalLink } from \"../../utils\";\nimport Copyable from \"../Copyable\";\n\n// Components\n\n// Assets\nimport \"react-table/react-table.css\";\nimport styles from \"./styles.module.scss\";\n\nclass UTXOSet extends React.Component {\n  renderInputs = () => {\n    const { inputs, network } = this.props;\n    return inputs.map((input, inputIndex) => {\n      const confirmedStyle = `${styles.utxoTxid}${\n        input.confirmed ? \"\" : ` ${styles.unconfirmed}`\n      }`;\n      const confirmedTitle = input.confirmed ? \"confirmed\" : \"unconfirmed\";\n      return (\n        <TableRow hover key={input.txid}>\n          <TableCell>{inputIndex + 1}</TableCell>\n          <TableCell className={confirmedStyle}>\n            <Copyable text={input.txid} showIcon showText={false}>\n              <code title={confirmedTitle}>{input.txid}</code>\n            </Copyable>\n          </TableCell>\n          <TableCell>\n            <Copyable text={input.index.toString()} />\n          </TableCell>\n          <TableCell>\n            <Copyable text={satoshisToBitcoins(input.amountSats).toString()} />\n          </TableCell>\n          <TableCell>\n            {externalLink(\n              blockExplorerTransactionURL(input.txid, network),\n              <OpenInNew />\n            )}\n          </TableCell>\n        </TableRow>\n      );\n    });\n  };\n\n  render() {\n    const { inputs, inputsTotalSats } = this.props;\n    return (\n      <>\n        <Typography variant=\"h5\">\n          {`Available Inputs (${inputs.length})`}{\" \"}\n        </Typography>\n        <p>The following UTXOs will be spent as inputs in a new transaction.</p>\n        <Table>\n          <TableHead>\n            <TableRow hover>\n              <TableCell>Number</TableCell>\n              <TableCell>TXID</TableCell>\n              <TableCell>Index</TableCell>\n              <TableCell>Amount (BTC)</TableCell>\n              <TableCell>View</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{this.renderInputs()}</TableBody>\n          <TableFooter>\n            <TableRow hover>\n              <TableCell colSpan={3}>TOTAL:</TableCell>\n              <TableCell colSpan={2}>\n                {satoshisToBitcoins(inputsTotalSats).toString()}\n              </TableCell>\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </>\n    );\n  }\n}\n\nUTXOSet.propTypes = {\n  network: PropTypes.string.isRequired,\n  inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  inputsTotalSats: PropTypes.shape({}).isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n  };\n}\n\nexport default connect(mapStateToProps)(UTXOSet);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  scriptToOps,\n  scriptToHex,\n  networkLabel,\n  multisigAddressType,\n  multisigRedeemScript,\n  multisigWitnessScript,\n  multisigRequiredSigners,\n  multisigTotalSigners,\n  blockExplorerAddressURL,\n} from \"unchained-bitcoin\";\nimport { Typography, Grid, Box, Chip } from \"@material-ui/core\";\nimport { OpenInNew } from \"@material-ui/icons\";\nimport { externalLink } from \"../utils\";\n\n// Components\nimport Copyable from \"./Copyable\";\n\nclass MultisigDetails extends React.Component {\n  renderScript = (name, script) => {\n    const hex = scriptToHex(script);\n    const ops = scriptToOps(script);\n    return (\n      <Box mt={2}>\n        <Typography variant=\"h6\">{name}</Typography>\n        <Grid container spacing={2}>\n          <Grid item sm={6}>\n            <Copyable text={hex} showIcon code />\n          </Grid>\n          <Grid item sm={6}>\n            <Copyable text={ops} showIcon code />\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  };\n\n  render() {\n    const { network, multisig, showAddress } = this.props;\n    const { address } = multisig;\n    const redeemScript = multisigRedeemScript(multisig);\n    const witnessScript = multisigWitnessScript(multisig);\n    return (\n      <Box mt={2}>\n        {showAddress && <Typography variant=\"h6\">Address</Typography>}\n\n        <Typography align=\"center\" variant=\"h5\">\n          <Grid container direction=\"column\" spacing={2}>\n            {showAddress && (\n              <Grid item>\n                <Copyable text={address} showIcon code />\n                &nbsp;\n                {externalLink(\n                  blockExplorerAddressURL(address, network),\n                  <OpenInNew />\n                )}\n              </Grid>\n            )}\n\n            <Grid item justify=\"center\" container spacing={3}>\n              <Grid item>\n                <Chip label=\"BTC\" />\n              </Grid>\n\n              <Grid item>\n                <Chip label={networkLabel(network)} />\n              </Grid>\n\n              <Grid item>\n                <Chip\n                  label={`${multisigRequiredSigners(\n                    multisig\n                  )}-of-${multisigTotalSigners(multisig)}`}\n                />\n              </Grid>\n\n              <Grid item>\n                <Chip label={multisigAddressType(multisig)} />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Typography>\n\n        {this.renderScript(\"Script\", multisig)}\n        {redeemScript && this.renderScript(\"Redeem Script\", redeemScript)}\n        {witnessScript && this.renderScript(\"Witness Script\", witnessScript)}\n      </Box>\n    );\n  }\n}\n\nMultisigDetails.propTypes = {\n  multisig: PropTypes.shape({\n    address: PropTypes.string,\n  }).isRequired,\n  network: PropTypes.string.isRequired,\n  showAddress: PropTypes.bool,\n};\n\nMultisigDetails.defaultProps = {\n  showAddress: true,\n};\n\nfunction mapStateToProps(state) {\n  return state.settings;\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MultisigDetails);\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Components\nimport {\n  FormHelperText,\n  Button,\n  Box,\n  Switch,\n  FormControlLabel,\n  Tooltip,\n  makeStyles,\n  Grid,\n} from \"@material-ui/core\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport {\n  bitcoindImportMulti,\n  bitcoindGetAddressStatus,\n  bitcoindParams,\n} from \"../bitcoind\";\nimport { clientPropTypes } from \"../proptypes\";\n\nconst useStyles = makeStyles(() => ({\n  tooltip: {\n    fontSize: \".8rem\",\n  },\n}));\n/**\n * @description A button for importing a set of given addresses. Includes a switch\n * to optionally choose to rescan the blockchain for balances.\n */\nfunction ImportAddressesButton({ addresses = [], client, importCallback }) {\n  const [imported, setImported] = useState(false);\n  const [importError, setImportError] = useState(\"\");\n  const [rescan, setRescanPreference] = useState(false);\n  const [addressesError, setAddressesError] = useState(\"\");\n  const [enableImport, setEnableImport] = useState(false);\n\n  const classes = useStyles();\n  // when addresses prop has changed, we want to check its status\n  // Address management currently isn't optimized and so they are added to the store\n  // one at at time. This effect is run each time that updates. Eventually,\n  // this should be optimized to happen all at once. For now though, once we find\n  // a single address that can be imported then enable the import button and\n  // we won't run this anymore. This is mostly for wallet view, not script entry\n  useEffect(() => {\n    const checkAddress = async () => {\n      // reset in case we can't import\n      setEnableImport(false);\n      const address = addresses[addresses.length - 1]; // TODO: loop, or maybe just check one\n      if (!address) return;\n      try {\n        const status = await bitcoindGetAddressStatus({\n          // TODO: use this to warn if spent\n          ...bitcoindParams(client),\n          address,\n        });\n        // if there is a problem querying the address, then enable the button\n        // once enabled, we won't run checkAddress effect anymore\n        if (!status || typeof status.used === \"undefined\") {\n          setEnableImport(true);\n        } else {\n          setEnableImport(false);\n        }\n        setAddressesError(\"\");\n      } catch (e) {\n        // e.status 401 e.statusText\n        // e.status 500 e.data.error.message\n        const status = (e.response && e.response.status) || \"unknown\";\n        const errorMessage =\n          // eslint-disable-next-line no-nested-ternary\n          status === 401\n            ? e.response.statusText\n            : status === 500\n            ? e.response.data.error.message\n            : e.message || \"An unknown address error occured\";\n\n        setAddressesError(errorMessage);\n      }\n    };\n\n    // check address if the button is disabled OR\n    // there's been an update to the address array and there's only one\n    // this typically is the case for the script interactions when dealing\n    // with a single address\n    if (\n      client.type === \"private\" &&\n      (!enableImport || addresses.length === 1)\n    ) {\n      checkAddress();\n    }\n    // eslint-disable-next-line\n  }, [addresses, client]);\n\n  // return \"addresses\" or \"address\"\n  const pluralOrSingularAddress = (capitalize = false) =>\n    `${capitalize ? \"A\" : \"a\"}ddress${\n      addresses && addresses.length > 1 ? \"es\" : \"\"\n    }`;\n\n  async function importAddresses() {\n    const label = \"\"; // TODO: do we want to allow to set? or set to \"caravan\"?\n\n    try {\n      const response = await bitcoindImportMulti({\n        ...bitcoindParams(client),\n        ...{ addresses, label, rescan },\n      });\n\n      const responseError = response.result.reduce((e, c) => {\n        return (c.error && c.error.message) || e;\n      }, \"\");\n\n      setImportError(responseError);\n      setImported(!responseError.length);\n\n      if (importCallback) {\n        // provide succesfully imported addreses to callback\n        const successes = response.result.filter((addr) => addr.success);\n        await importCallback(successes, rescan);\n      }\n    } catch (e) {\n      setImportError(\"Unable to import, check your settings and try again\");\n      setImported(false);\n    }\n  }\n\n  const rescanTooltip = `To get accurate information from your node, your ${pluralOrSingularAddress()}\nwill need to be imported to your node. Importing will give you accurate balance information\nhowever to know if an address has been used prior to import, a rescan needs to take place.`;\n\n  return (\n    <Grid className={classes.container}>\n      <Box component=\"span\" ml={2}>\n        <Button\n          variant=\"contained\"\n          disabled={(!enableImport && !rescan) || !addresses.length}\n          onClick={importAddresses}\n        >\n          Import {pluralOrSingularAddress(true)}\n        </Button>\n      </Box>\n      <Box component=\"span\" ml={2}>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={rescan}\n              onChange={(e) => setRescanPreference(e.target.checked)}\n              color=\"secondary\"\n            />\n          }\n          label=\"Rescan\"\n        />\n        <Tooltip title={rescanTooltip} classes={{ tooltip: classes.tooltip }}>\n          <InfoIcon fontSize=\"small\" color=\"disabled\" />\n        </Tooltip>\n      </Box>\n      <Box>\n        {addressesError.length > 0 && (\n          <FormHelperText error>{addressesError}</FormHelperText>\n        )}\n        {importError.length > 0 && (\n          <FormHelperText error>{importError}</FormHelperText>\n        )}\n        {imported && rescan && (\n          <FormHelperText>\n            {pluralOrSingularAddress(true)} imported, rescan of your node may\n            take some time.\n          </FormHelperText>\n        )}\n        {imported && !rescan && (\n          <FormHelperText>\n            {pluralOrSingularAddress(true)} imported.\n          </FormHelperText>\n        )}\n      </Box>\n    </Grid>\n  );\n}\n\nImportAddressesButton.propTypes = {\n  addresses: PropTypes.arrayOf(PropTypes.string),\n  importCallback: PropTypes.func,\n  client: PropTypes.shape(clientPropTypes).isRequired,\n};\n\nImportAddressesButton.defaultProps = {\n  addresses: [],\n  importCallback() {},\n};\n\nexport default ImportAddressesButton;\n","import { wrappedNumberedActions } from \"./utils\";\n\nexport const SET_SIGNATURE_IMPORTER_NAME = \"SET_SIGNATURE_IMPORTER_NAME\";\nexport const SET_SIGNATURE_IMPORTER_METHOD = \"SET_SIGNATURE_IMPORTER_METHOD\";\nexport const SET_SIGNATURE_IMPORTER_BIP32_PATH =\n  \"SET_SIGNATURE_IMPORTER_BIP32_PATH\";\nexport const SET_SIGNATURE_IMPORTER_PUBLIC_KEYS =\n  \"SET_SIGNATURE_IMPORTER_PUBLIC_KEYS\";\nexport const SET_SIGNATURE_IMPORTER_SIGNATURE =\n  \"SET_SIGNATURE_IMPORTER_SIGNATURE\";\nexport const SET_SIGNATURE_IMPORTER_FINALIZED =\n  \"SET_SIGNATURE_IMPORTER_FINALIZED\";\nexport const SET_SIGNATURE_IMPORTER_COMPLETE =\n  \"SET_SIGNATURE_IMPORTER_COMPLETE\";\n\nexport const {\n  setSignatureImporterName,\n  setSignatureImporterMethod,\n  setSignatureImporterBIP32Path,\n  setSignatureImporterPublicKeys,\n  setSignatureImporterSignature,\n  setSignatureImporterFinalized,\n  setSignatureImporterComplete,\n} = wrappedNumberedActions({\n  setSignatureImporterName: SET_SIGNATURE_IMPORTER_NAME,\n  setSignatureImporterMethod: SET_SIGNATURE_IMPORTER_METHOD,\n  setSignatureImporterBIP32Path: SET_SIGNATURE_IMPORTER_BIP32_PATH,\n  setSignatureImporterPublicKeys: SET_SIGNATURE_IMPORTER_PUBLIC_KEYS,\n  setSignatureImporterSignature: SET_SIGNATURE_IMPORTER_SIGNATURE,\n  setSignatureImporterFinalized: SET_SIGNATURE_IMPORTER_FINALIZED,\n  setSignatureImporterComplete: SET_SIGNATURE_IMPORTER_COMPLETE,\n});\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Components\nimport { Box, TextField, Button } from \"@material-ui/core\";\n\nclass TextSignatureImporter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      signatureJSON: \"\",\n      error: \"\",\n    };\n  }\n\n  render = () => {\n    const { signatureJSON, error } = this.state;\n    return (\n      <Box mt={2}>\n        <TextField\n          fullWidth\n          multiline\n          variant=\"outlined\"\n          name=\"signature\"\n          label=\"Signature\"\n          rows={5}\n          value={signatureJSON}\n          onChange={this.handleChange}\n          error={this.hasError()}\n          helperText={error}\n        />\n\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.finalize}\n            disabled={signatureJSON === \"\"}\n          >\n            Add Signature\n          </Button>\n        </Box>\n      </Box>\n    );\n  };\n\n  hasError = () => {\n    const { error } = this.state;\n    return error !== \"\";\n  };\n\n  setError = (value) => {\n    this.setState({ error: value });\n  };\n\n  handleChange = (event) => {\n    const signatureJSON = event.target.value;\n    let error = \"\";\n    try {\n      JSON.parse(signatureJSON);\n    } catch (parseError) {\n      error = \"Invalid JSON.\";\n    }\n    this.setState({ signatureJSON, error });\n  };\n\n  finalize = () => {\n    const { validateAndSetSignature } = this.props;\n    const { signatureJSON } = this.state;\n    try {\n      const sig = JSON.parse(signatureJSON);\n      validateAndSetSignature(sig, this.setError);\n    } catch (e) {\n      this.setError(e.message);\n    }\n  };\n}\n\nTextSignatureImporter.propTypes = {\n  signatureImporter: PropTypes.shape({}).isRequired,\n  validateAndSetSignature: PropTypes.func.isRequired,\n};\n\nexport default TextSignatureImporter;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { PENDING, ACTIVE } from \"unchained-wallets\";\n\n// Components\nimport QrReader from \"react-qr-reader\";\nimport { Grid, Button, Box, FormHelperText } from \"@material-ui/core\";\nimport Copyable from \"../Copyable\";\n\nconst QR_CODE_READER_DELAY = 300; // ms?\n\nclass HermitReader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: PENDING,\n      error: \"\",\n    };\n  }\n\n  render = () => {\n    const { status, error } = this.state;\n    const { interaction, width, startText } = this.props;\n\n    if (status === PENDING) {\n      const commandMessage = interaction.messageFor({\n        state: status,\n        code: \"hermit.command\",\n      });\n      return (\n        <div>\n          <p>{commandMessage.instructions}</p>\n          <Grid container justify=\"center\" className=\"mb-2\">\n            <Copyable text={commandMessage.command} showText={false}>\n              <code>\n                <strong>{commandMessage.mode}&gt;</strong>{\" \"}\n                {commandMessage.command}\n              </code>\n            </Copyable>\n          </Grid>\n          <p>When you are ready, scan the QR code produced by Hermit:</p>\n          <Box mt={2}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\"mt-2\"\n              size=\"large\"\n              onClick={this.handleStart}\n            >\n              {startText}\n            </Button>\n          </Box>\n        </div>\n      );\n    }\n\n    if (status === ACTIVE) {\n      return (\n        <Grid container direction=\"column\">\n          <Grid item>\n            <QrReader\n              delay={QR_CODE_READER_DELAY}\n              onError={this.handleError}\n              onScan={this.handleScan}\n              style={{ width }}\n              facingMode=\"user\"\n            />\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              size=\"small\"\n              onClick={this.handleStop}\n            >\n              Cancel\n            </Button>\n          </Grid>\n        </Grid>\n      );\n    }\n\n    if (status === \"error\" || status === \"success\") {\n      return (\n        <div>\n          <FormHelperText error>{error}</FormHelperText>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"small\"\n            onClick={this.handleStop}\n          >\n            Reset\n          </Button>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  handleStart = () => {\n    const { onStart } = this.props;\n    this.setState({ status: ACTIVE, error: \"\" });\n    if (onStart) {\n      onStart();\n    }\n  };\n\n  handleError = (error) => {\n    const { onClear } = this.props;\n    this.setState({ status: \"error\", error: error.message });\n    if (onClear) {\n      onClear();\n    }\n  };\n\n  handleScan = (data) => {\n    const { onSuccess, interaction } = this.props;\n    if (data) {\n      try {\n        const result = interaction.parse(data);\n        onSuccess(result);\n        this.setState({ status: \"success\" });\n      } catch (e) {\n        this.handleError(e);\n      }\n    }\n  };\n\n  handleStop = () => {\n    const { onClear } = this.props;\n    this.setState({\n      status: PENDING,\n      error: \"\",\n    });\n    if (onClear) {\n      onClear();\n    }\n  };\n}\n\nHermitReader.propTypes = {\n  onStart: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired,\n  onClear: PropTypes.func.isRequired,\n  width: PropTypes.string,\n  startText: PropTypes.string,\n  interaction: PropTypes.shape({\n    messageFor: PropTypes.func,\n    parse: PropTypes.func,\n  }).isRequired,\n};\n\nHermitReader.defaultProps = {\n  width: \"256px\",\n  startText: \"Scan\",\n};\n\nexport default HermitReader;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Components\nimport QRCode from \"qrcode.react\";\nimport Copyable from \"../Copyable\";\n\nconst HermitDisplayer = (props) => {\n  const { width, string } = props;\n  return (\n    <Copyable text={string} newline showText={false}>\n      <QRCode size={width} value={string} level=\"L\" />\n    </Copyable>\n  );\n};\n\nHermitDisplayer.propTypes = {\n  string: PropTypes.string,\n  width: PropTypes.number,\n};\n\nHermitDisplayer.defaultProps = {\n  string: \"\",\n  width: 120,\n};\n\nexport default HermitDisplayer;\n","// FIXME\n/* eslint-disable max-classes-per-file */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { INFO, WARNING, ERROR } from \"unchained-wallets\";\nimport {\n  Box,\n  Typography,\n  Tabs,\n  Tab,\n  Paper,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { Info, Warning, Error } from \"@material-ui/icons\";\n\nimport \"./InteractionMessages.css\";\n\nclass MessagesList extends React.Component {\n  render = () => {\n    const { messages } = this.props;\n    return (\n      <List style={{ maxHeight: \"400px\", overflow: \"auto\" }} dense>\n        {messages.map(this.renderMessage)}\n      </List>\n    );\n  };\n\n  renderMessage = (message, key) => {\n    return (\n      <ListItem key={key}>\n        {message.level && (\n          <ListItemIcon>{this.messageIcon(message)}</ListItemIcon>\n        )}\n        <ListItemText>\n          {this.renderMessageBodyAndSubmessages(message)}\n        </ListItemText>\n      </ListItem>\n    );\n  };\n\n  renderMessageBodyAndSubmessages = (message) => {\n    return (\n      <Box>\n        {this.renderMessageBody(message)}\n        {message.messages && (\n          <List dense>{message.messages.map(this.renderMessage)}</List>\n        )}\n      </Box>\n    );\n  };\n\n  renderMessageBody = (message) => {\n    return (\n      <Box>\n        {message.image && (\n          <Box align=\"center\">\n            <img\n              className=\"InteractionMessages-image\"\n              src={`data:${message.image.mimeType};base64, ${message.image.data}`}\n              alt={message.image.label}\n            />\n          </Box>\n        )}\n        <p>{message.text}</p>\n      </Box>\n    );\n  };\n\n  messageIcon = (message) => {\n    switch (message.level) {\n      case INFO:\n        return <Info />;\n      case WARNING:\n        return <Warning />;\n      case ERROR:\n        return <Error />;\n      default:\n        return null;\n    }\n  };\n}\n\nMessagesList.propTypes = {\n  messages: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\n\nclass VersionTabPanel extends React.Component {\n  render = () => {\n    const { version, currentVersion } = this.props;\n    return (\n      <Box\n        role=\"tabpanel\"\n        hidden={version !== currentVersion}\n        id={`interactionMessages-tabpanel-${version}`}\n        aria-labelledby={`interactionMessages-tab-${version}`}\n      >\n        {version === currentVersion && (\n          <MessagesList messages={this.filteredMessages()} />\n        )}\n      </Box>\n    );\n  };\n\n  filteredMessages = () => {\n    const { messages, version } = this.props;\n    return messages.filter((message) => {\n      if (message.version) {\n        return message.version === version;\n      }\n      return true;\n    });\n  };\n}\n\nVersionTabPanel.propTypes = {\n  messages: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  version: PropTypes.string.isRequired,\n  currentVersion: PropTypes.string.isRequired,\n};\n\nclass InteractionMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentVersion: \"\",\n    };\n  }\n\n  render = () => {\n    const { messages, versions } = this.filteredMessages();\n    const currentVersion = this.currentVersion(versions);\n    if (versions.length < 2) {\n      return <MessagesList messages={messages} />;\n    }\n    return (\n      <Box>\n        <Typography variant=\"h6\">Model</Typography>\n        <Paper square>\n          <Tabs\n            value={currentVersion}\n            onChange={this.handleChange}\n            aria-label=\"interactionMessages-version\"\n          >\n            {versions.map((version) => (\n              <Tab\n                key={version}\n                value={version}\n                label={version}\n                id={`interactionMessages-tab-${version}`}\n                aria-controls={`interactionMessages-tabpanel-${version}`}\n              />\n            ))}\n          </Tabs>\n        </Paper>\n        {versions.map((version) => (\n          <VersionTabPanel\n            key={version}\n            version={version}\n            currentVersion={currentVersion}\n            messages={messages}\n          />\n        ))}\n      </Box>\n    );\n  };\n\n  currentVersion = (versions) => {\n    const { currentVersion } = this.state;\n    if (currentVersion) {\n      return currentVersion;\n    }\n    return versions[versions.length - 1];\n  };\n\n  handleChange = (event, newValue) => {\n    this.setState({ currentVersion: newValue });\n  };\n\n  filteredMessages = () => {\n    const { messages, excludeCodes } = this.props;\n    const filteredMessages = [];\n    const versions = [];\n    messages.forEach((message) => {\n      for (let i = 0; i < excludeCodes.length; i += 1) {\n        const excludeCode = excludeCodes[i];\n        if ((message.code || \"\").includes(excludeCode)) {\n          return;\n        }\n      }\n      filteredMessages.push(message);\n      if (message.version && !versions.includes(message.version)) {\n        versions.push(message.version);\n      }\n    });\n    return { versions, messages: filteredMessages };\n  };\n}\n\nInteractionMessages.propTypes = {\n  messages: PropTypes.arrayOf(PropTypes.shape({})),\n  excludeCodes: PropTypes.arrayOf(PropTypes.string),\n};\n\nInteractionMessages.defaultProps = {\n  messages: [],\n  excludeCodes: [],\n};\n\nexport default InteractionMessages;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  HERMIT,\n  PENDING,\n  UNSUPPORTED,\n  SignMultisigTransaction,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Grid,\n  Box,\n  TextField,\n  Button,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport HermitReader from \"../Hermit/HermitReader\";\nimport HermitDisplayer from \"../Hermit/HermitDisplayer\";\nimport InteractionMessages from \"../InteractionMessages\";\n\nclass HermitSignatureImporter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bip32PathError: \"\",\n      signatureError: \"\",\n      status: this.interaction(true).isSupported() ? PENDING : UNSUPPORTED,\n    };\n  }\n\n  interaction = () => {\n    const { signatureImporter, network, inputs, outputs } = this.props;\n    const bip32Paths = inputs.map((input) => {\n      if (typeof input.bip32Path === \"undefined\")\n        return signatureImporter.bip32Path; // pubkey path\n      return `${signatureImporter.bip32Path}${input.bip32Path.slice(1)}`; // xpub/pubkey slice away the m, keep /\n    });\n\n    return SignMultisigTransaction({\n      keystore: HERMIT,\n      network,\n      inputs,\n      outputs,\n      bip32Paths,\n    });\n  };\n\n  render = () => {\n    const {\n      signatureImporter,\n      disableChangeMethod,\n      resetBIP32Path,\n    } = this.props;\n    const { bip32PathError, signatureError, status } = this.state;\n    const interaction = this.interaction();\n    if (status === UNSUPPORTED) {\n      return (\n        <InteractionMessages\n          messages={interaction.messagesFor({ state: status })}\n          excludeCodes={[\"hermit.signature_request\", \"hermit.command\"]}\n        />\n      );\n    }\n    return (\n      <Box mt={2}>\n        <Grid container>\n          <Grid item md={10}>\n            <TextField\n              name=\"bip32Path\"\n              value={signatureImporter.bip32Path}\n              onChange={this.handleBIP32PathChange}\n              disabled={status !== PENDING}\n              error={this.hasBIP32PathError()}\n              helperText={bip32PathError}\n            />\n          </Grid>\n\n          <Grid item md={2}>\n            {!this.bip32PathIsDefault() && (\n              <Button\n                type=\"button\"\n                variant=\"contained\"\n                size=\"small\"\n                onClick={resetBIP32Path}\n                disabled={status !== PENDING}\n              >\n                Default\n              </Button>\n            )}\n          </Grid>\n        </Grid>\n\n        <FormHelperText>\n          Use the default value if you don&rsquo;t understand BIP32 paths.\n        </FormHelperText>\n\n        <Box mt={2}>\n          <Grid container justify=\"center\">\n            <Grid item>\n              <HermitDisplayer width={400} string={interaction.request()} />\n            </Grid>\n          </Grid>\n\n          <HermitReader\n            startText=\"Scan Signature QR Code\"\n            interaction={interaction}\n            onStart={disableChangeMethod}\n            onSuccess={this.import}\n            onClear={this.clear}\n          />\n\n          <InteractionMessages\n            messages={interaction.messagesFor({ state: status })}\n            excludeCodes={[\"hermit.signature_request\", \"hermit.command\"]}\n          />\n\n          <FormHelperText error>{signatureError}</FormHelperText>\n        </Box>\n      </Box>\n    );\n  };\n\n  import = (signature) => {\n    const { validateAndSetSignature, enableChangeMethod } = this.props;\n    this.setState({ signatureError: \"\" });\n    enableChangeMethod();\n    validateAndSetSignature(signature, (signatureError) => {\n      this.setState({ signatureError });\n    });\n  };\n\n  clear = () => {\n    const { resetBIP32Path, enableChangeMethod } = this.props;\n    resetBIP32Path();\n    this.setState({ signatureError: \"\" });\n    enableChangeMethod();\n  };\n\n  hasBIP32PathError = () => {\n    const { bip32PathError } = this.state;\n    return bip32PathError !== \"\";\n  };\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(\n      bip32Path,\n      () => {},\n      (bip32PathError) => {\n        this.setState({ bip32PathError });\n      }\n    );\n  };\n\n  bip32PathIsDefault = () => {\n    const { signatureImporter, defaultBIP32Path } = this.props;\n    return signatureImporter.bip32Path === defaultBIP32Path;\n  };\n}\n\nHermitSignatureImporter.propTypes = {\n  network: PropTypes.string.isRequired,\n  inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  signatureImporter: PropTypes.shape({\n    bip32Path: PropTypes.string,\n  }).isRequired,\n  resetBIP32Path: PropTypes.func.isRequired,\n  defaultBIP32Path: PropTypes.string.isRequired,\n  validateAndSetBIP32Path: PropTypes.func.isRequired,\n  validateAndSetSignature: PropTypes.func.isRequired,\n  enableChangeMethod: PropTypes.func.isRequired,\n  disableChangeMethod: PropTypes.func.isRequired,\n};\n\nexport default HermitSignatureImporter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { satoshisToBitcoins } from \"unchained-bitcoin\";\nimport {\n  PENDING,\n  UNSUPPORTED,\n  ACTIVE,\n  ERROR,\n  SignMultisigTransaction,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Button,\n  TextField,\n  FormHelperText,\n  Box,\n  Grid,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n} from \"@material-ui/core\";\nimport InteractionMessages from \"../InteractionMessages\";\n\nclass HardwareWalletSignatureImporter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      signatureError: \"\",\n      bip32PathError: \"\",\n      status: this.interaction(true).isSupported() ? PENDING : UNSUPPORTED,\n    };\n  }\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n  };\n\n  interaction = () => {\n    const { signatureImporter, network, inputs, outputs } = this.props;\n    const keystore = signatureImporter.method;\n    const bip32Paths = inputs.map((input) => {\n      if (typeof input.bip32Path === \"undefined\")\n        return signatureImporter.bip32Path; // pubkey path\n      return `${signatureImporter.bip32Path}${input.bip32Path.slice(1)}`; // xpub/pubkey slice away the m, keep /\n    });\n    return SignMultisigTransaction({\n      network,\n      keystore,\n      inputs,\n      outputs,\n      bip32Paths,\n    });\n  };\n\n  render = () => {\n    const { signatureImporter, extendedPublicKeyImporter } = this.props;\n    const { status } = this.state;\n    const interaction = this.interaction();\n    if (status === UNSUPPORTED) {\n      return (\n        <FormHelperText error>\n          {interaction.messageTextFor({ state: status })}\n        </FormHelperText>\n      );\n    }\n    return (\n      <Box mt={2}>\n        {(extendedPublicKeyImporter === null ||\n          typeof extendedPublicKeyImporter === \"undefined\" ||\n          extendedPublicKeyImporter.method === \"text\") && (\n          <>\n            <Grid container>\n              <Grid item md={10}>\n                <TextField\n                  fullWidth\n                  name=\"bip32Path\"\n                  label=\"BIP32 Path\"\n                  type=\"text\"\n                  value={signatureImporter.bip32Path}\n                  onChange={this.handleBIP32PathChange}\n                  disabled={status !== PENDING}\n                  error={this.hasBIP32PathError()}\n                  helperText={this.bip32PathError()}\n                />\n              </Grid>\n              <Grid item md={2}>\n                {!this.bip32PathIsDefault() && (\n                  <Button\n                    type=\"button\"\n                    variant=\"contained\"\n                    size=\"small\"\n                    onClick={this.resetBIP32Path}\n                    disabled={status !== PENDING}\n                  >\n                    Default\n                  </Button>\n                )}\n              </Grid>\n            </Grid>\n            <FormHelperText>\n              Use the default value if you don&rsquo;t understand BIP32 paths.\n            </FormHelperText>\n          </>\n        )}\n        <Box mt={2}>{this.renderAction()}</Box>\n        {this.renderDeviceConfirmInfo()}\n        <InteractionMessages\n          messages={interaction.messagesFor({ state: status })}\n          excludeCodes={[\"bip32\"]}\n        />\n      </Box>\n    );\n  };\n\n  renderDeviceConfirmInfo = () => {\n    const { fee, inputsTotalSats } = this.props;\n    const { status } = this.state;\n\n    if (status === ACTIVE) {\n      return (\n        <Box>\n          <p>Your device will ask you to verify the following information:</p>\n          <Table>\n            <TableHead>\n              <TableRow hover>\n                <TableCell />\n                <TableCell>Amount (BTC)</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.renderTargets()}\n              <TableRow hover>\n                <TableCell>Fee</TableCell>\n                <TableCell>{fee}</TableCell>\n              </TableRow>\n              <TableRow hover>\n                <TableCell>Total</TableCell>\n                <TableCell>\n                  {satoshisToBitcoins(inputsTotalSats).toString()}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </Box>\n      );\n    }\n    return \"\";\n  };\n\n  renderTargets = () => {\n    const { outputs } = this.props;\n    return outputs.map((output) => {\n      return (\n        <TableRow hover key={output.address}>\n          <TableCell>\n            Address <code>{output.address}</code>\n          </TableCell>\n          <TableCell>{output.amount}</TableCell>\n        </TableRow>\n      );\n    });\n  };\n\n  renderAction = () => {\n    const { signatureError, status } = this.state;\n    return (\n      <Grid container alignItems=\"center\">\n        <Grid item md={3}>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            color=\"primary\"\n            onClick={this.sign}\n            disabled={status !== PENDING}\n          >\n            Sign\n          </Button>\n        </Grid>\n        <Grid item md={9}>\n          <FormHelperText error>{signatureError}</FormHelperText>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  //\n  // BIP32 Path\n  //\n\n  hasBIP32PathError = () => {\n    const { bip32PathError, status } = this.state;\n    return (\n      bip32PathError !== \"\" ||\n      this.interaction().hasMessagesFor({\n        state: status,\n        level: ERROR,\n        code: \"bip32\",\n      })\n    );\n  };\n\n  bip32PathError = () => {\n    const { bip32PathError, status } = this.state;\n    if (bip32PathError !== \"\") {\n      return bip32PathError;\n    }\n    return this.interaction().messageTextFor({\n      state: status,\n      level: ERROR,\n      code: \"bip32\",\n    });\n  };\n\n  setBIP32PathError = (value) => {\n    this.setState({ bip32PathError: value });\n  };\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError);\n  };\n\n  bip32PathIsDefault = () => {\n    const { signatureImporter, defaultBIP32Path } = this.props;\n    return signatureImporter.bip32Path === defaultBIP32Path;\n  };\n\n  resetBIP32Path = () => {\n    const { resetBIP32Path } = this.props;\n    this.setBIP32PathError(\"\");\n    resetBIP32Path();\n  };\n\n  //\n  // Sign\n  //\n\n  sign = async () => {\n    const {\n      disableChangeMethod,\n      validateAndSetSignature,\n      enableChangeMethod,\n    } = this.props;\n    disableChangeMethod();\n    this.setState({ signatureError: \"\", status: ACTIVE });\n\n    try {\n      const signature = await this.interaction().run();\n      validateAndSetSignature(signature, (signatureError) => {\n        const stateUpdate = { signatureError };\n        if (signatureError !== \"\") stateUpdate.status = PENDING;\n        this.setState(stateUpdate);\n      });\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n      this.setState({ signatureError: e.message, status: PENDING });\n    }\n    enableChangeMethod();\n  };\n}\n\nHardwareWalletSignatureImporter.propTypes = {\n  defaultBIP32Path: PropTypes.string.isRequired,\n  disableChangeMethod: PropTypes.func.isRequired,\n  enableChangeMethod: PropTypes.func.isRequired,\n  extendedPublicKeyImporter: PropTypes.shape({\n    method: PropTypes.string,\n  }).isRequired,\n  fee: PropTypes.string.isRequired,\n  inputsTotalSats: PropTypes.shape({}).isRequired,\n  inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  network: PropTypes.string.isRequired,\n  outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  resetBIP32Path: PropTypes.func.isRequired,\n  signatureImporter: PropTypes.shape({\n    bip32Path: PropTypes.string,\n    method: PropTypes.string,\n  }).isRequired,\n  signatureImporters: PropTypes.shape({}).isRequired,\n  validateAndSetBIP32Path: PropTypes.func.isRequired,\n  validateAndSetSignature: PropTypes.func.isRequired,\n};\n\nexport default HardwareWalletSignatureImporter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  validateHex,\n  validateMultisigSignature,\n  multisigBIP32Path,\n  multisigBIP32Root,\n  validateBIP32Path,\n} from \"unchained-bitcoin\";\nimport { TREZOR, LEDGER, HERMIT } from \"unchained-wallets\";\n\n// Components\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Select,\n  MenuItem,\n  InputLabel,\n  Button,\n  Box,\n  FormControl,\n} from \"@material-ui/core\";\nimport Copyable from \"../Copyable\";\nimport TextSignatureImporter from \"./TextSignatureImporter\";\nimport HermitSignatureImporter from \"./HermitSignatureImporter\";\nimport HardwareWalletSignatureImporter from \"./HardwareWalletSignatureImporter\";\nimport EditableName from \"../EditableName\";\n\n// Actions\nimport {\n  setSignatureImporterName,\n  setSignatureImporterMethod,\n  setSignatureImporterBIP32Path,\n  setSignatureImporterPublicKeys,\n  setSignatureImporterSignature,\n  setSignatureImporterFinalized,\n  setSignatureImporterComplete,\n} from \"../../actions/signatureImporterActions\";\n\nimport \"react-table/react-table.css\";\n\nconst TEXT = \"text\";\nconst UNKNOWN = \"unknown\";\n\nclass SignatureImporter extends React.Component {\n  titleRef = React.createRef();\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      disableChangeMethod: false,\n    };\n  }\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n    this.scrollToTitle();\n  };\n\n  componentDidUpdate = () => {\n    this.scrollToTitle();\n  };\n\n  getCurrent() {\n    const { signatureImporters } = this.props;\n    return Object.keys(signatureImporters).reduce((o, k) => {\n      return o + (signatureImporters[k].finalized ? 1 : 0);\n    }, 1);\n  }\n\n  title = () => {\n    const { number, signatureImporter, setName } = this.props;\n    return (\n      <EditableName\n        number={number}\n        name={signatureImporter.name}\n        setName={setName}\n      />\n    );\n  };\n\n  scrollToTitle = () => {\n    const { number } = this.props;\n    if (number === this.getCurrent()) {\n      this.titleRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  renderImport = () => {\n    const { signatureImporter, number, extendedPublicKeyImporter } = this.props;\n    const currentNumber = this.getCurrent();\n    const notMyTurn = number > currentNumber;\n    const { disableChangeMethod } = this.state;\n    const labelId = `signature-${number}-importer-select-label`;\n    if (notMyTurn) {\n      return (\n        <p>\n          Once you have imported the signature above, you will be able to import\n          another signature here.\n        </p>\n      );\n    }\n\n    return (\n      <form>\n        {(extendedPublicKeyImporter === null ||\n          typeof extendedPublicKeyImporter === \"undefined\" ||\n          extendedPublicKeyImporter.method === TEXT ||\n          extendedPublicKeyImporter.method === UNKNOWN) && (\n          <FormControl fullWidth>\n            <InputLabel id={labelId}>Select Method</InputLabel>\n\n            <Select\n              labelId={labelId}\n              id={`signature-${number}-importer-select`}\n              disabled={disableChangeMethod}\n              value={signatureImporter.method}\n              onChange={this.handleMethodChange}\n            >\n              <MenuItem value=\"\">{\"< Select method >\"}</MenuItem>\n              <MenuItem value={TREZOR}>Trezor</MenuItem>\n              <MenuItem value={LEDGER}>Ledger</MenuItem>\n              <MenuItem value={HERMIT}>Hermit</MenuItem>\n              <MenuItem value={TEXT}>Enter as text</MenuItem>\n            </Select>\n          </FormControl>\n        )}\n\n        {this.renderImportByMethod()}\n      </form>\n    );\n  };\n\n  renderImportByMethod = () => {\n    const {\n      network,\n      signatureImporter,\n      signatureImporters,\n      inputs,\n      inputsTotalSats,\n      outputs,\n      fee,\n      isWallet,\n      extendedPublicKeyImporter,\n    } = this.props;\n    if (signatureImporter.method === TEXT) {\n      return (\n        <TextSignatureImporter\n          signatureImporter={signatureImporter}\n          validateAndSetSignature={this.validateAndSetSignature}\n        />\n      );\n    }\n    if (signatureImporter.method === HERMIT) {\n      return (\n        <HermitSignatureImporter\n          network={network}\n          signatureImporter={signatureImporter}\n          inputs={inputs}\n          outputs={outputs}\n          validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n          resetBIP32Path={this.resetBIP32Path}\n          defaultBIP32Path={this.defaultBIP32Path()}\n          validateAndSetSignature={this.validateAndSetSignature}\n          enableChangeMethod={this.enableChangeMethod}\n          disableChangeMethod={this.disableChangeMethod}\n        />\n      );\n    }\n    if (\n      signatureImporter.method === TREZOR ||\n      signatureImporter.method === LEDGER\n    ) {\n      return (\n        <HardwareWalletSignatureImporter\n          network={network}\n          signatureImporter={signatureImporter}\n          signatureImporters={signatureImporters}\n          inputs={inputs}\n          outputs={outputs}\n          inputsTotalSats={inputsTotalSats}\n          fee={fee}\n          isWallet={isWallet}\n          extendedPublicKeyImporter={extendedPublicKeyImporter}\n          validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n          resetBIP32Path={this.resetBIP32Path}\n          defaultBIP32Path={this.defaultBIP32Path()}\n          validateAndSetSignature={this.validateAndSetSignature}\n          enableChangeMethod={this.enableChangeMethod}\n          disableChangeMethod={this.disableChangeMethod}\n        />\n      );\n    }\n    return null;\n  };\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { number, setMethod } = this.props;\n    setMethod(number, event.target.value);\n    this.reset();\n  };\n\n  disableChangeMethod = () => {\n    this.setState({ disableChangeMethod: true });\n  };\n\n  enableChangeMethod = () => {\n    this.setState({ disableChangeMethod: false });\n  };\n\n  //\n  // State\n  //\n\n  reset = () => {\n    const { number, setSignature, setPublicKeys, setFinalized } = this.props;\n    setSignature(number, \"\");\n    setPublicKeys(number, []);\n    setFinalized(number, false);\n  };\n\n  //\n  // BIP32 Path\n  //\n\n  defaultBIP32Path = () => {\n    const { addressType, network, isWallet } = this.props;\n    return isWallet\n      ? multisigBIP32Root(addressType, network)\n      : multisigBIP32Path(addressType, network);\n  };\n\n  resetBIP32Path = () => {\n    const { number, setBIP32Path, isWallet } = this.props;\n    if (isWallet) {\n      const { extendedPublicKeyImporter } = this.props;\n      if (extendedPublicKeyImporter.method !== \"text\") return;\n    }\n    setBIP32Path(number, this.defaultBIP32Path());\n  };\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const { number, setBIP32Path } = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(number, bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback(\"\");\n      callback();\n    }\n  };\n\n  //\n  // Signature\n  //\n\n  renderSignature = () => {\n    const { signatureImporter, txid } = this.props;\n    const signatureJSON = JSON.stringify(signatureImporter.signature);\n    return (\n      <div>\n        <p>The following signature was imported:</p>\n        <Box>\n          <Copyable text={signatureJSON} showIcon code />\n        </Box>\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            disabled={txid !== \"\"}\n            size=\"small\"\n            onClick={this.reset}\n          >\n            Remove Signature\n          </Button>\n        </Box>\n      </div>\n    );\n  };\n\n  validateAndSetSignature = (inputsSignatures, errback) => {\n    const {\n      number,\n      inputs,\n      signatureImporters,\n      setComplete,\n      network,\n      outputs,\n    } = this.props;\n\n    if (!Array.isArray(inputsSignatures)) {\n      errback(\"Signature is not an array of strings.\");\n      return;\n    }\n\n    if (inputsSignatures.length < inputs.length) {\n      errback(\"Not enough signatures (must be exactly one for each input).\");\n      return;\n    }\n    if (inputsSignatures.length > inputs.length) {\n      errback(\"Too many signatures (must be exactly one for each input).\");\n      return;\n    }\n\n    const publicKeys = [];\n    const finalizedSignatureImporters = Object.values(\n      signatureImporters\n    ).filter((signatureImporter) => signatureImporter.finalized);\n    for (\n      let inputIndex = 0;\n      inputIndex < inputsSignatures.length;\n      inputIndex += 1\n    ) {\n      const inputNumber = inputIndex + 1;\n      const inputSignature = inputsSignatures[inputIndex];\n      if (validateHex(inputSignature) !== \"\") {\n        errback(`Signature for input ${inputNumber} is not valid hex.`);\n        return;\n      }\n\n      let publicKey;\n      try {\n        publicKey = validateMultisigSignature(\n          network,\n          inputs,\n          outputs,\n          inputIndex,\n          inputSignature\n        );\n      } catch (e) {\n        errback(`Signature for input ${inputNumber} is invalid.`);\n        return;\n      }\n      if (publicKey) {\n        for (\n          let finalizedSignatureImporterNum = 0;\n          finalizedSignatureImporterNum < finalizedSignatureImporters.length;\n          finalizedSignatureImporterNum += 1\n        ) {\n          const finalizedSignatureImporter =\n            finalizedSignatureImporters[finalizedSignatureImporterNum];\n\n          if (\n            finalizedSignatureImporter.signature[inputIndex] ===\n              inputSignature ||\n            finalizedSignatureImporter.publicKeys[inputIndex] === publicKey\n          ) {\n            errback(\n              `Signature for input ${inputNumber} is a duplicate of a previously provided signature.`\n            );\n            return;\n          }\n        }\n        publicKeys.push(publicKey);\n      } else {\n        errback(`Signature for input ${inputNumber} is invalid.`);\n        return;\n      }\n    }\n\n    setComplete(number, {\n      signature: inputsSignatures,\n      publicKeys,\n      finalized: true,\n    });\n  };\n\n  render() {\n    const { signatureImporter } = this.props;\n    return (\n      <Card>\n        <CardHeader title={this.title()} ref={this.titleRef} />\n        <CardContent>\n          {signatureImporter.finalized\n            ? this.renderSignature()\n            : this.renderImport()}\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nSignatureImporter.propTypes = {\n  addressType: PropTypes.string.isRequired,\n  extendedPublicKeyImporter: PropTypes.shape({\n    method: PropTypes.string,\n  }).isRequired,\n  fee: PropTypes.string.isRequired,\n  inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  inputsTotalSats: PropTypes.shape({}).isRequired,\n  isWallet: PropTypes.bool.isRequired,\n  network: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  setName: PropTypes.func.isRequired,\n  setMethod: PropTypes.func.isRequired,\n  setBIP32Path: PropTypes.func.isRequired,\n  setSignature: PropTypes.func.isRequired,\n  setPublicKeys: PropTypes.func.isRequired,\n  setFinalized: PropTypes.func.isRequired,\n  setComplete: PropTypes.func.isRequired,\n  signatureImporter: PropTypes.shape({\n    finalized: PropTypes.bool,\n    name: PropTypes.string,\n    method: PropTypes.string,\n    signature: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.string),\n    ]),\n  }).isRequired,\n  signatureImporters: PropTypes.shape({}).isRequired,\n  txid: PropTypes.string.isRequired,\n  unsignedTransaction: PropTypes.shape({}).isRequired,\n};\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...{\n      signatureImporters: state.spend.signatureImporters,\n      signatureImporter: state.spend.signatureImporters[ownProps.number],\n      fee: state.spend.transaction.fee,\n      txid: state.spend.transaction.txid,\n    },\n    ...state.spend.transaction,\n  };\n}\n\nconst mapDispatchToProps = {\n  setName: setSignatureImporterName,\n  setMethod: setSignatureImporterMethod,\n  setBIP32Path: setSignatureImporterBIP32Path,\n  setPublicKeys: setSignatureImporterPublicKeys,\n  setSignature: setSignatureImporterSignature,\n  setFinalized: setSignatureImporterFinalized,\n  setComplete: setSignatureImporterComplete,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignatureImporter);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\n// Actions\nimport { deriveChildPublicKey } from \"unchained-bitcoin\";\nimport {\n  Box,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n} from \"@material-ui/core\";\nimport {\n  setSignatureImporterBIP32Path,\n  setSignatureImporterMethod,\n} from \"../../actions/signatureImporterActions\";\n\nimport { setSigningKey as setSigningKeyAction } from \"../../actions/transactionActions\";\n\n// Components\nimport SignatureImporter from \"../ScriptExplorer/SignatureImporter\";\n\nclass ExtendedPublicKeySelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selection: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    const { signingKeys, number } = this.props;\n    if (signingKeys[number - 1] > 0)\n      this.updateKeySelection(signingKeys[number - 1]);\n  };\n\n  render = () => {\n    const { selection } = this.state;\n    const { number } = this.props;\n    return (\n      <div>\n        {this.renderKeySelectorMenu()}\n        {selection > 0 && number > 0 && this.renderSignatureImporter()}\n      </div>\n    );\n  };\n\n  renderSignatureImporter = () => {\n    const { number } = this.props;\n    const extendedPublicKeyImporter = this.getAssociatedExtendedPublicKeyImporter();\n    return (\n      <Box mt={2}>\n        <SignatureImporter\n          number={number}\n          extendedPublicKeyImporter={extendedPublicKeyImporter}\n        />\n      </Box>\n    );\n  };\n\n  getAssociatedExtendedPublicKeyImporter = () => {\n    const { extendedPublicKeyImporters } = this.props;\n    const { selection } = this.state;\n    let associatedExtendedPublicKeyImporter = null;\n\n    if (selection) {\n      associatedExtendedPublicKeyImporter =\n        extendedPublicKeyImporters[selection];\n    }\n\n    return associatedExtendedPublicKeyImporter;\n  };\n\n  renderKeySelectorMenu = () => {\n    const { number, signatureImporters, setBIP32Path } = this.props;\n    const { selection } = this.state;\n    const labelId = `keySelector${number}`;\n\n    const extendedPublicKeyImporter = this.getAssociatedExtendedPublicKeyImporter();\n    if (extendedPublicKeyImporter !== null && number > 0) {\n      const signatureImporter = signatureImporters[number];\n      if (signatureImporter.signature.length > 0) return \"\";\n\n      if (\n        extendedPublicKeyImporter.bip32Path !== signatureImporter.bip32Path &&\n        extendedPublicKeyImporter.method !== \"text\"\n      ) {\n        setTimeout(() => {\n          setBIP32Path(number, extendedPublicKeyImporter.bip32Path);\n        }, 0);\n      }\n    }\n\n    return (\n      <form>\n        <FormControl fullWidth>\n          <InputLabel id={labelId}>Select Key</InputLabel>\n\n          <Select\n            labelId={labelId}\n            id={`signature-${number}-key-select`}\n            value={selection}\n            onChange={this.handleKeyChange}\n          >\n            <MenuItem value=\"\">{\"< Select Extended Public Key >\"}</MenuItem>\n            {this.renderKeySelectorMenuItems()}\n          </Select>\n        </FormControl>\n      </form>\n    );\n  };\n\n  extendedPublicKeyImporterNotUsed = (extendedPublicKeyImporter) => {\n    const { inputs, network, signatureImporters, number } = this.props;\n    if (number === 0) return true;\n\n    for (let inputIndex = 0; inputIndex < inputs.length; inputIndex += 1) {\n      const input = inputs[inputIndex];\n      const derivedKey = deriveChildPublicKey(\n        extendedPublicKeyImporter.extendedPublicKey,\n        input.bip32Path,\n        network\n      );\n      for (\n        let importerIndex = 1;\n        importerIndex <= Object.keys(signatureImporters).length;\n        importerIndex += 1\n      ) {\n        const importer = signatureImporters[importerIndex];\n        for (\n          let publicKeyIndex = 0;\n          publicKeyIndex < importer.publicKeys.length;\n          publicKeyIndex += 1\n        ) {\n          const publicKey = importer.publicKeys[publicKeyIndex];\n          if (publicKey === derivedKey) return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  renderKeySelectorMenuItems = () => {\n    const { extendedPublicKeyImporters, totalSigners } = this.props;\n    const extendedPublicKeys = [];\n    for (\n      let extendedPublicKeyImporterNum = 1;\n      extendedPublicKeyImporterNum <= totalSigners;\n      extendedPublicKeyImporterNum += 1\n    ) {\n      const extendedPublicKeyImporter =\n        extendedPublicKeyImporters[extendedPublicKeyImporterNum];\n      if (this.extendedPublicKeyImporterNotUsed(extendedPublicKeyImporter)) {\n        extendedPublicKeys.push(\n          <MenuItem\n            value={extendedPublicKeyImporterNum}\n            key={extendedPublicKeyImporterNum}\n          >\n            {extendedPublicKeyImporter.name}\n          </MenuItem>\n        );\n      }\n    }\n    return extendedPublicKeys;\n  };\n\n  handleKeyChange = (event) => {\n    const { onChange } = this.props;\n    this.updateKeySelection(event.target.value);\n\n    if (onChange) {\n      const { extendedPublicKeyImporters } = this.props;\n\n      const importer = extendedPublicKeyImporters[event.target.value];\n      onChange(event, importer);\n    }\n  };\n\n  updateKeySelection(value) {\n    this.setState({ selection: value });\n    if (value === \"\") return;\n\n    const {\n      extendedPublicKeyImporters,\n      setMethod,\n      number,\n      setSigningKey,\n    } = this.props;\n    const extendedPublicKeyImporter = extendedPublicKeyImporters[value];\n    const importMethod = extendedPublicKeyImporter.method;\n    if (importMethod === \"text\") {\n      setMethod(number, \"\"); // user picks\n    } else {\n      setMethod(number, importMethod);\n    }\n    if (number > 0) setSigningKey(number, value);\n  }\n}\n\nExtendedPublicKeySelector.propTypes = {\n  extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n  inputs: PropTypes.arrayOf(\n    PropTypes.shape({\n      bip32Path: PropTypes.string,\n    })\n  ).isRequired,\n  onChange: PropTypes.func,\n  network: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  setBIP32Path: PropTypes.func.isRequired,\n  setMethod: PropTypes.func.isRequired,\n  setSigningKey: PropTypes.func.isRequired,\n  signatureImporters: PropTypes.shape({}).isRequired,\n  signingKeys: PropTypes.arrayOf(PropTypes.number).isRequired,\n  totalSigners: PropTypes.number.isRequired,\n};\n\nExtendedPublicKeySelector.defaultProps = {\n  onChange: null,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.quorum,\n    totalSigners: state.spend.transaction.totalSigners,\n    inputs: state.spend.transaction.inputs,\n    network: state.settings.network,\n    signatureImporters: state.spend.signatureImporters,\n    signingKeys: state.spend.transaction.signingKeys,\n  };\n}\n\nconst mapDispatchToProps = {\n  setBIP32Path: setSignatureImporterBIP32Path,\n  setMethod: setSignatureImporterMethod,\n  setSigningKey: setSigningKeyAction,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ExtendedPublicKeySelector);\n","import React, { useReducer, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Grid,\n  Box,\n  Typography,\n  Button,\n  FormControl,\n  Select,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  MenuItem,\n  InputLabel,\n} from \"@material-ui/core\";\nimport { ThumbUp as SuccessIcon, Error as ErrorIcon } from \"@material-ui/icons\";\nimport {\n  multisigAddressType,\n  multisigRequiredSigners,\n  multisigTotalSigners,\n} from \"unchained-bitcoin\";\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n  ACTIVE,\n  PENDING,\n  ConfirmMultisigAddress,\n} from \"unchained-wallets\";\n\nimport ExtendedPublicKeySelector from \"../Wallet/ExtendedPublicKeySelector\";\nimport InteractionMessages from \"../InteractionMessages\";\n\nimport { slicePropTypes } from \"../../proptypes\";\n\nconst TEXT = \"text\";\n\nconst initialInteractionState = {\n  keySelected: false,\n  deviceType: \"unknown\",\n  bip32Path: \"\",\n  hasInteraction: false,\n  interactionState: PENDING,\n  interactionError: \"\",\n  interactionMessage: \"\",\n};\n\nconst interactionReducer = (state, action) => {\n  switch (action.type) {\n    case \"RESET\":\n      return {\n        ...state,\n        interactionError: \"\",\n        interactionMessage: \"\",\n        interactionState: PENDING,\n      };\n    case \"SET_KEY_SELECTED\":\n      return { ...state, keySelected: true };\n    case \"SET_DEVICE_TYPE\":\n      return { ...state, deviceType: action.value };\n    case \"SET_BIP32_PATH\":\n      return { ...state, bip32Path: action.value };\n    case \"SET_ACTIVE\":\n      return { ...state, interactionState: ACTIVE };\n    case \"HAS_INTERACTION\":\n      return { ...state, hasInteraction: action.value };\n    case \"SET_MESSAGE\":\n      return {\n        ...state,\n        interactionMessage: action.value,\n        interactionError: \"\",\n      };\n    case \"SET_ERROR\":\n      return {\n        ...state,\n        interactionError: action.value,\n        interactionMessage: \"\",\n      };\n    default:\n      return state;\n  }\n};\n\nconst ConfirmAddress = ({ slice, network }) => {\n  const [state, dispatch] = useReducer(\n    interactionReducer,\n    initialInteractionState\n  );\n  const [interaction, setInteraction] = useState(null);\n\n  const addressType = multisigAddressType(slice.multisig);\n  const requiredSigners = multisigRequiredSigners(slice.multisig);\n  const totalSigners = multisigTotalSigners(slice.multisig);\n\n  // Sets device interaction for component based on xpub selected\n  function handleKeySelected(_event, extendedPublicKeyImporter) {\n    const { multisig, bip32Path } = slice;\n    dispatch({ type: \"SET_KEY_SELECTED\" });\n    dispatch({\n      type: \"SET_DEVICE_TYPE\",\n      value: extendedPublicKeyImporter.method,\n    });\n    const fullBip32Path = `${\n      extendedPublicKeyImporter.bip32Path\n    }${bip32Path.slice(1)}`;\n    if (extendedPublicKeyImporter.bip32Path !== \"Unknown\") {\n      dispatch({\n        type: \"SET_BIP32_PATH\",\n        value: fullBip32Path,\n      });\n    } else {\n      dispatch({\n        type: \"SET_BIP32_PATH\",\n        value: \"\",\n      });\n    }\n    if (extendedPublicKeyImporter.method !== \"unknown\") {\n      setInteraction(\n        ConfirmMultisigAddress({\n          keystore: extendedPublicKeyImporter.method,\n          network,\n          bip32Path: fullBip32Path,\n          multisig,\n        })\n      );\n      dispatch({ type: \"HAS_INTERACTION\", value: true });\n      dispatch({ type: \"RESET\" });\n    } else {\n      setInteraction(null);\n      dispatch({ type: \"HAS_INTERACTION\", value: false });\n      dispatch({ type: \"RESET\" });\n    }\n  }\n\n  // Sets device interaction for component based on xpub selected\n  function handleMethodChange(event) {\n    dispatch({\n      type: \"SET_DEVICE_TYPE\",\n      value: event.target.value,\n    });\n    const { multisig } = slice;\n    setInteraction(\n      ConfirmMultisigAddress({\n        keystore: event.target.value,\n        network,\n        bip32Path: state.bip32Path,\n        multisig,\n      })\n    );\n    dispatch({ type: \"HAS_INTERACTION\", value: true });\n    dispatch({ type: \"RESET\" });\n  }\n\n  // run interaction and see if address confirms\n  async function confirmOnDevice() {\n    dispatch({ type: \"SET_ACTIVE\" });\n    const { multisig } = slice;\n\n    try {\n      const confirmed = await interaction.run();\n      if (\n        confirmed.address === multisig.address &&\n        confirmed.serializedPath === interaction.bip32Path\n      ) {\n        dispatch({ type: \"SET_MESSAGE\", value: \"Success\" });\n      } else {\n        dispatch({ type: \"SET_ERROR\", value: \"An unknown error occured\" });\n      }\n    } catch (error) {\n      dispatch({ type: \"SET_ERROR\", value: error.message });\n    }\n  }\n\n  return (\n    <Grid item md={12}>\n      <ExtendedPublicKeySelector number={0} onChange={handleKeySelected} />\n      {state.deviceType === \"unknown\" && state.keySelected && (\n        <form>\n          <FormControl fullWidth>\n            <InputLabel>Select Method</InputLabel>\n\n            <Select\n              id=\"confirm-importer-select\"\n              value=\"\"\n              onChange={handleMethodChange}\n            >\n              <MenuItem value=\"\">{\"< Select method >\"}</MenuItem>\n              <MenuItem value={TREZOR}>Trezor</MenuItem>\n              <MenuItem value={LEDGER} disabled>\n                Ledger\n              </MenuItem>\n              <MenuItem value={HERMIT} disabled>\n                Hermit\n              </MenuItem>\n              <MenuItem value={TEXT} disabled>\n                Enter as text\n              </MenuItem>\n            </Select>\n          </FormControl>\n        </form>\n      )}\n      {state.hasInteraction && (\n        <>\n          <Box>\n            <p>\n              Confirm the following {network.length ? network : \"\"}{\" \"}\n              {addressType} {requiredSigners} -of-\n              {totalSigners} multisig address on your device:\n            </p>\n            <Table>\n              <TableBody>\n                <TableRow>\n                  <TableCell>Address:</TableCell>\n                  <TableCell>\n                    <code>{slice.multisig.address}</code>\n                  </TableCell>\n                </TableRow>\n\n                <TableRow>\n                  <TableCell>BIP32 Path:</TableCell>\n                  <TableCell>\n                    <code>{state.bip32Path}</code>\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Box>\n          {state.interactionMessage !== \"\" && (\n            <Box mt={2} align=\"center\">\n              <Typography variant=\"h5\" style={{ color: \"green\" }}>\n                <SuccessIcon />\n                &nbsp; {state.interactionMessage}\n              </Typography>\n            </Box>\n          )}\n          {state.interactionError !== \"\" && (\n            <Box mt={2} align=\"center\" style={{ color: \"red\" }}>\n              <Typography variant=\"h5\">\n                <ErrorIcon />\n                &nbsp; Confirmation Error\n              </Typography>\n              <Typography variant=\"caption\">\n                {state.interactionError}\n              </Typography>\n            </Box>\n          )}\n          {state.interactionMessage === \"\" && state.interactionError === \"\" && (\n            <InteractionMessages\n              messages={interaction.messagesFor({\n                state: state.interactionState,\n              })}\n            />\n          )}\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            onClick={confirmOnDevice}\n            disabled={state.interactionState === ACTIVE || !state.bip32Path}\n          >\n            Confirm\n          </Button>\n          {(state.interactionMessage !== \"\" ||\n            state.interactionError !== \"\") && (\n            <Button size=\"large\" onClick={() => dispatch({ type: \"RESET\" })}>\n              Reset\n            </Button>\n          )}\n        </>\n      )}\n    </Grid>\n  );\n};\n\nConfirmAddress.propTypes = {\n  slice: PropTypes.shape(slicePropTypes).isRequired,\n  network: PropTypes.string,\n};\n\nConfirmAddress.defaultProps = {\n  network: \"\",\n};\n\nexport default ConfirmAddress;\n","/* eslint-disable react/no-array-index-key */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Typography,\n  Grid,\n  Tabs,\n  Tab,\n  Box,\n  Tooltip,\n  AppBar,\n  makeStyles,\n} from \"@material-ui/core\";\n\nimport UTXOSet from \"../ScriptExplorer/UTXOSet\";\nimport MultisigDetails from \"../MultisigDetails\";\nimport ImportAddressesButton from \"../ImportAddressesButton\";\nimport ConfirmAddress from \"./ConfirmAddress\";\n\nimport { slicePropTypes, clientPropTypes } from \"../../proptypes\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    \"aria-controls\": `scrollable-auto-tabpanel-${index}`,\n  };\n}\n\nconst createTab = ({ tab }, index) => {\n  const tooltipTab = (\n    <Tab value={index.toString()} key={index} {...a11yProps(index)} {...tab} />\n  );\n  if (tab.disabled)\n    return (\n      <Tooltip title=\"Not available for this address\" key={index} arrow>\n        <div>{tooltipTab}</div>\n      </Tooltip>\n    );\n  return tooltipTab;\n};\n\nfunction TabPanel({ children, value, index, ...other }) {\n  return (\n    <Grid\n      container\n      justify=\"center\"\n      style={{ display: value === index ? \"inherit\" : \"none\" }}\n      {...other}\n    >\n      <Grid item md={11}>\n        <Box>{children}</Box>\n      </Grid>\n    </Grid>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  value: PropTypes.string.isRequired,\n  index: PropTypes.string.isRequired,\n};\n\nTabPanel.defaultProps = {\n  children: React.createElement(\"span\"),\n};\n\nconst SliceDetails = ({ slice, client, network }) => {\n  const [tabIndex, setTabIndex] = React.useState(\"0\");\n  const classes = useStyles();\n\n  const handleChange = (_e, newIndex) => setTabIndex(newIndex);\n  const tabs = [\n    {\n      tab: {\n        label: \"Redeem Script\",\n      },\n      panel: <MultisigDetails multisig={slice.multisig} showAddress={false} />,\n    },\n    {\n      tab: {\n        label: \"Confirm on Device\",\n      },\n      panel: (\n        <div>\n          <Typography variant=\"h6\">\n            Verify Address with Quorum Participants\n          </Typography>\n          <Typography variant=\"caption\">\n            (not all device variants supported)\n          </Typography>\n          <ConfirmAddress slice={slice} network={network} />\n        </div>\n      ),\n    },\n    {\n      tab: {\n        label: \"UTXOs\",\n        disabled: !slice.balanceSats.isGreaterThan(0),\n      },\n      panel: (\n        <UTXOSet inputs={slice.utxos} inputsTotalSats={slice.balanceSats} />\n      ),\n    },\n    {\n      tab: {\n        label: \"Watch Address\",\n        disabled: client.type !== \"private\",\n      },\n      panel: (\n        <div>\n          <Typography variant=\"h6\">Import Watch-Only Address</Typography>\n          <Typography variant=\"caption\">\n            Address must be imported to get accurate balance data. If this\n            address has previous history, a rescan may be required.\n          </Typography>\n          <Box my={3}>\n            <ImportAddressesButton\n              addresses={[slice.multisig.address]}\n              client={client}\n            />\n          </Box>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <Grid container className={classes.root}>\n      <AppBar position=\"static\" color=\"default\" variant=\"outlined\">\n        <Tabs\n          value={tabIndex}\n          onChange={handleChange}\n          aria-label=\"Slice Details View\"\n          centered\n        >\n          {tabs.map(createTab)}\n        </Tabs>\n      </AppBar>\n      {tabs.map(({ panel }, index) => (\n        <TabPanel value={tabIndex} index={index.toString()} key={index}>\n          <Box my={3}>{panel}</Box>\n        </TabPanel>\n      ))}\n    </Grid>\n  );\n};\n\nSliceDetails.propTypes = {\n  slice: PropTypes.shape(slicePropTypes).isRequired,\n  client: PropTypes.shape(clientPropTypes).isRequired,\n  network: PropTypes.string.isRequired,\n};\n\nexport default SliceDetails;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport MaterialTable from \"material-table\";\nimport { Typography, Box, makeStyles } from \"@material-ui/core\";\nimport { satoshisToBitcoins } from \"unchained-bitcoin\";\n\nimport {\n  compareSlicesByPath,\n  compareSlicesByBalance,\n  compareSlicesByUTXOCount,\n  compareSlicesByTime,\n} from \"../../utils/slices\";\n\n// Components\nimport Copyable from \"../Copyable\";\nimport { slicePropTypes, clientPropTypes } from \"../../proptypes\";\nimport SliceDetails from \"./SliceDetails\";\n\nconst useStyles = makeStyles((theme) => ({\n  panel: {\n    boxShadow: `inset 0px 0px 4px 1px ${theme.palette.grey[500]}`,\n  },\n  spent: {\n    textDecoration: \"line-through\",\n  },\n}));\n\nconst SlicesTable = ({\n  slices,\n  search,\n  paging,\n  title,\n  client,\n  network,\n  disabled,\n}) => {\n  const classes = useStyles();\n\n  const options = {\n    search,\n    paging,\n    detailPanelType: \"single\",\n    showTitle: (title && title.length) || false,\n    emptyRowsWhenPaging: false,\n    pageSize: 10,\n    pageSizeOptions: [10, 20, 50],\n  };\n  options.toolbar = options.showTitle && options.search;\n  let columns = [\n    {\n      title: \"Path Suffix\",\n      field: \"bip32Path\",\n      render: (rowData) => (\n        <Typography>{rowData.bip32Path.replace(\"m\", \"*\")}</Typography>\n      ),\n      type: \"string\",\n      defaultSort: \"asc\",\n      customSort: compareSlicesByPath,\n    },\n    {\n      title: \"UTXOs\",\n      field: \"utxos\",\n      width: \"50px\",\n      render: (rowData) => <Typography>{rowData.utxos.length}</Typography>,\n      customSort: compareSlicesByUTXOCount,\n    },\n    {\n      title: \"Balance\",\n      field: \"balanceSats\",\n      render: (rowData) => (\n        <Typography>\n          {satoshisToBitcoins(rowData.balanceSats).toString()}\n        </Typography>\n      ),\n      customSort: compareSlicesByBalance,\n    },\n    {\n      title: \"Last Used\",\n      field: \"lastUsed\",\n      render: (rowData) => <Typography>{rowData.lastUsed || \"\"}</Typography>,\n      customSort: compareSlicesByTime,\n    },\n    {\n      title: \"Address\",\n      field: \"address\",\n      sorting: false,\n      render: (rowData) => (\n        <Copyable\n          text={rowData.multisig.address}\n          showIcon\n          showText\n          code\n          className={\n            rowData.addressUsed && rowData.balanceSats.isEqualTo(0)\n              ? classes.spent\n              : \"\"\n          }\n        />\n      ),\n    },\n  ];\n\n  // filter out any columns that should be disabled\n  columns = columns.filter((column) => !disabled.includes(column.field));\n  return (\n    <MaterialTable\n      options={options}\n      columns={columns}\n      data={slices}\n      detailPanel={[\n        {\n          tooltip: \"Address Details\",\n          render: (rowData) => (\n            <Box p={1} className={classes.panel}>\n              <SliceDetails client={client} slice={rowData} network={network} />\n            </Box>\n          ),\n        },\n      ]}\n    />\n  );\n};\n\nSlicesTable.propTypes = {\n  slices: PropTypes.arrayOf(PropTypes.shape(slicePropTypes)).isRequired,\n  search: PropTypes.bool,\n  paging: PropTypes.bool,\n  title: PropTypes.string,\n  client: PropTypes.shape(clientPropTypes).isRequired,\n  network: PropTypes.string.isRequired,\n  disabled: PropTypes.arrayOf(PropTypes.string),\n};\n\nSlicesTable.defaultProps = {\n  search: false,\n  paging: false,\n  title: \"\",\n  disabled: [],\n};\n\nexport default SlicesTable;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport QRCode from \"qrcode.react\";\nimport {\n  Button,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  InputAdornment,\n  Typography,\n  TextField,\n} from \"@material-ui/core\";\nimport { withSnackbar } from \"notistack\";\n\nimport { fetchAddressUTXOs } from \"../../blockchain\";\nimport {\n  updateDepositSliceAction,\n  resetWalletView as resetWalletViewAction,\n} from \"../../actions/walletActions\";\nimport { getDepositableSlices } from \"../../selectors/wallet\";\nimport { slicePropTypes } from \"../../proptypes\";\n\n// Components\nimport Copyable from \"../Copyable\";\nimport BitcoinIcon from \"../BitcoinIcon\";\nimport SlicesTable from \"../Slices/SlicesTable\";\n\nlet depositTimer;\n\nclass WalletDeposit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      address: \"\",\n      amount: 0,\n      amountError: \"\",\n      depositIndex: 0,\n      slice: null,\n    };\n  }\n\n  componentDidMount() {\n    this.getDepositAddress();\n  }\n\n  componentWillUnmount() {\n    clearInterval(depositTimer);\n  }\n\n  getNextDepositAddress = () => {\n    const { depositIndex } = this.state;\n    this.setState({ depositIndex: depositIndex + 1 });\n    setTimeout(this.getDepositAddress, 0);\n  };\n\n  getDepositAddress = () => {\n    const {\n      network,\n      client,\n      updateDepositSlice,\n      depositableSlices,\n      enqueueSnackbar,\n    } = this.props;\n    const { depositIndex } = this.state;\n\n    if (depositIndex < depositableSlices.length)\n      this.setState({\n        slice: depositableSlices[depositIndex],\n        address: depositableSlices[depositIndex].multisig.address,\n      });\n\n    clearInterval(depositTimer);\n    depositTimer = setInterval(async () => {\n      let updates;\n      try {\n        const { address, slice } = this.state;\n        updates = await fetchAddressUTXOs(address, network, client);\n        if (updates && updates.utxos && updates.utxos.length) {\n          clearInterval(depositTimer);\n          updateDepositSlice({ ...updates, bip32Path: slice.bip32Path });\n          enqueueSnackbar(\n            \"Deposit received. A new address should now be available for deposit.\"\n          );\n          this.resetDepositAddressIndex();\n          setTimeout(this.getDepositAddress, 2000);\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error(e);\n      }\n    }, 2000);\n  };\n\n  handleAmountChange = (event) => {\n    const amount = event.target.value;\n    let error = \"\";\n\n    if (amount.length && !amount.match(/^[0-9.]+$/)) {\n      error = \"Amount must be numeric\";\n    }\n    const decimal = amount.split(\".\");\n    if (decimal.length > 2) {\n      error = \"Amount must be numeric\";\n    } else if (decimal.length === 2 && decimal[1].length > 8) {\n      error = \"Amount must have maximum precision of 8 decimal places\";\n    }\n\n    this.setState({ amount: event.target.value, amountError: error });\n  };\n\n  qrString = () => {\n    const { address, amount } = this.state;\n    return `bitcoin:${address}${amount ? `?amount=${amount}` : \"\"}`;\n  };\n\n  resetDepositAddressIndex = () => {\n    const { depositableSlices } = this.props;\n    this.setState({\n      slice: depositableSlices[0],\n      address: depositableSlices[0].multisig.address,\n      depositIndex: 0,\n    });\n  };\n\n  render() {\n    const { client, network, depositableSlices } = this.props;\n    const { address, amount, amountError, depositIndex, slice } = this.state;\n\n    return (\n      <div>\n        <Card>\n          <CardContent>\n            <Grid\n              container\n              justify=\"center\"\n              direction=\"column\"\n              alignItems=\"center\"\n            >\n              <Grid item md={6}>\n                <Copyable text={address} newline showText={false}>\n                  <QRCode size={300} value={this.qrString()} level=\"L\" />\n                </Copyable>\n              </Grid>\n              <Grid item>\n                <Typography align=\"center\" variant=\"subtitle1\">\n                  Scan QR code or click to copy address to clipboard.\n                </Typography>\n              </Grid>\n              <Grid item md={6}>\n                <Box my={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Amount BTC\"\n                    name=\"depositAmount\"\n                    onChange={this.handleAmountChange}\n                    value={amount}\n                    error={amountError !== \"\"}\n                    helperText={amountError}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <BitcoinIcon network={network} />\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                </Box>\n              </Grid>\n            </Grid>\n            {slice ? (\n              <SlicesTable\n                slices={[slice]}\n                client={client}\n                network={network}\n                disabled={[\"lastUsed\"]}\n              />\n            ) : (\n              \"\"\n            )}\n            <Box mt={2}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={this.getNextDepositAddress}\n                disabled={depositIndex >= depositableSlices.length - 1}\n              >\n                Next Address\n              </Button>\n            </Box>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n}\n\nWalletDeposit.propTypes = {\n  client: PropTypes.shape({}).isRequired,\n  depositableSlices: PropTypes.arrayOf(PropTypes.shape(slicePropTypes))\n    .isRequired,\n  enqueueSnackbar: PropTypes.func.isRequired,\n  network: PropTypes.string.isRequired,\n  updateDepositSlice: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    depositableSlices: getDepositableSlices(state),\n    client: state.client,\n  };\n}\n\nconst mapDispatchToProps = {\n  updateDepositSlice: updateDepositSliceAction,\n  resetWalletView: resetWalletViewAction,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withSnackbar(WalletDeposit));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\n// Components\nimport {\n  Grid,\n  Menu,\n  MenuItem,\n  Button,\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelSummary,\n  Box,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  Typography,\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { ThumbUp as SuccessIcon, Error as ErrorIcon } from \"@material-ui/icons\";\nimport {\n  blockExplorerAddressURL,\n  multisigAddressType,\n  NETWORKS,\n} from \"unchained-bitcoin\";\nimport { PENDING, ACTIVE, ConfirmMultisigAddress } from \"unchained-wallets\";\nimport LaunchIcon from \"@material-ui/icons/Launch\";\nimport UTXOSet from \"../ScriptExplorer/UTXOSet\";\nimport MultisigDetails from \"../MultisigDetails\";\nimport ImportAddressesButton from \"../ImportAddressesButton\";\nimport Copyable from \"../Copyable\";\nimport InteractionMessages from \"../InteractionMessages\";\nimport ExtendedPublicKeySelector from \"./ExtendedPublicKeySelector\";\n\nimport styles from \"../ScriptExplorer/styles.module.scss\";\n\nimport { externalLink } from \"../../utils\";\n\nconst MODE_UTXO = 0;\nconst MODE_REDEEM = 1;\nconst MODE_CONFIRM = 2;\nconst MODE_WATCH = 3;\nlet anchor;\n\nclass AddressExpander extends React.Component {\n  interaction = null;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expandMode: null,\n      showMenu: false,\n      showMenuIcon: false,\n      hasInteraction: false,\n      interactionState: PENDING,\n      interactionError: \"\",\n      interactionMessage: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    this.defaultMode();\n  };\n\n  addressContent = () => {\n    const { node, network, client } = this.props;\n    const { multisig, addressUsed, balanceSats } = node;\n    const { expandMode, showMenu, showMenuIcon } = this.state;\n\n    return (\n      <div style={{ width: \"100%\" }}>\n        <Typography>\n          <Copyable text={multisig.address} showIcon showText={false}>\n            <code\n              className={\n                addressUsed && balanceSats.isEqualTo(0) ? styles.spent : \"\"\n              }\n            >\n              {multisig.address}\n            </code>\n            &nbsp;\n          </Copyable>\n          {externalLink(\n            blockExplorerAddressURL(multisig.address, network),\n            <LaunchIcon onClick={(e) => e.stopPropagation()} />\n          )}\n        </Typography>\n        <MoreVertIcon\n          onClick={this.handleMenu}\n          style={{\n            float: \"right\",\n            display:\n              showMenuIcon && this.hasAdditionalOptions() ? \"block\" : \"none\",\n          }}\n          aria-controls=\"address-menu\"\n          aria-haspopup=\"true\"\n        />\n        <Menu\n          id=\"address-menu\"\n          anchorEl={anchor}\n          keepMounted\n          open={showMenu}\n          onClose={this.handleClose}\n        >\n          {balanceSats.isGreaterThan(0) && (\n            <MenuItem\n              selected={expandMode === MODE_UTXO}\n              onClick={(e) => {\n                this.setState({ expandMode: MODE_UTXO });\n                this.handleClose(e);\n              }}\n            >\n              UTXOs\n            </MenuItem>\n          )}\n          <MenuItem\n            selected={expandMode === MODE_REDEEM}\n            onClick={(e) => {\n              this.setState({ expandMode: MODE_REDEEM });\n              this.handleClose(e);\n            }}\n          >\n            Scripts\n          </MenuItem>\n          {this.canConfirm() && (\n            <MenuItem\n              selected={expandMode === MODE_CONFIRM}\n              onClick={(e) => {\n                this.setState({ expandMode: MODE_CONFIRM });\n                this.handleClose(e);\n              }}\n            >\n              Confirm on Device\n            </MenuItem>\n          )}\n          {client.type === \"private\" && (\n            <MenuItem\n              selected={expandMode === MODE_WATCH}\n              onClick={(e) => {\n                this.setState({ expandMode: MODE_WATCH });\n                this.handleClose(e);\n              }}\n            >\n              Watch with bitcoind Node\n            </MenuItem>\n          )}\n        </Menu>\n      </div>\n    );\n  };\n\n  canConfirm = () => {\n    const { extendedPublicKeyImporters } = this.props;\n    return (\n      Object.values(extendedPublicKeyImporters).filter(\n        (importer) => importer.method === \"trezor\"\n      ).length > 0\n    );\n  };\n\n  hasAdditionalOptions = () => {\n    const { client, node } = this.props;\n    const { balanceSats } = node;\n\n    return (\n      balanceSats.isGreaterThan(0) ||\n      client.type === \"private\" ||\n      this.canConfirm()\n    );\n  };\n\n  handleClose = (event) => {\n    event.stopPropagation();\n    this.setState({ showMenu: false });\n  };\n\n  handleMenu = (event) => {\n    event.stopPropagation();\n    anchor = event.target;\n    this.setState({ showMenu: true });\n  };\n\n  panelExpand = (event, expanded) => {\n    this.setState({ showMenuIcon: expanded });\n  };\n\n  render = () => {\n    const { node } = this.props;\n    const { bip32Path } = node;\n    return (\n      <ExpansionPanel onChange={this.panelExpand}>\n        <ExpansionPanelSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1a-content\"\n          id={`address-header${bip32Path}`}\n        >\n          {this.addressContent()}\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Grid container>{this.expandContent()}</Grid>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    );\n  };\n\n  defaultMode = () => {\n    const { node } = this.props;\n    const { balanceSats } = node;\n\n    this.setState({\n      expandMode: balanceSats.isGreaterThan(0) ? MODE_UTXO : MODE_REDEEM,\n    });\n  };\n\n  expandContent = () => {\n    const { client, node } = this.props;\n    const { utxos, balanceSats, multisig } = node;\n    const { expandMode } = this.state;\n\n    if (client.type === \"public\" && expandMode === MODE_WATCH)\n      this.defaultMode();\n    if (balanceSats.isEqualTo(0) && expandMode === MODE_UTXO)\n      this.defaultMode();\n\n    switch (expandMode) {\n      case MODE_UTXO:\n        return (\n          <Grid item md={12}>\n            <UTXOSet inputs={utxos} inputsTotalSats={balanceSats} />\n          </Grid>\n        );\n      case MODE_REDEEM:\n        return (\n          <Grid item md={12}>\n            <MultisigDetails multisig={multisig} showAddress={false} />\n          </Grid>\n        );\n      case MODE_CONFIRM:\n        return this.renderAddressConfirmation();\n      case MODE_WATCH:\n        return (\n          <Grid item md={12}>\n            <ImportAddressesButton addresses={[multisig.address]} />\n          </Grid>\n        );\n      default:\n        return \"\";\n    }\n  };\n\n  renderAddressConfirmation = () => {\n    const {\n      interactionState,\n      interactionMessage,\n      interactionError,\n      hasInteraction,\n    } = this.state;\n    return (\n      <Grid item md={12}>\n        <ExtendedPublicKeySelector number={0} onChange={this.keySelected} />\n        {hasInteraction && (\n          <>\n            {this.confirmAddressDescription()}\n            {interactionMessage !== \"\" && (\n              <Box mt={2} align=\"center\">\n                <Typography variant=\"h5\" style={{ color: \"green\" }}>\n                  <SuccessIcon />\n                  &nbsp; {interactionMessage}\n                </Typography>\n              </Box>\n            )}\n            {interactionError !== \"\" && (\n              <Box mt={2} align=\"center\" style={{ color: \"red\" }}>\n                <Typography variant=\"h5\">\n                  <ErrorIcon />\n                  &nbsp; Confirmation Error\n                </Typography>\n                <Typography variant=\"caption\">{interactionError}</Typography>\n              </Box>\n            )}\n            {interactionMessage === \"\" && interactionError === \"\" && (\n              <InteractionMessages\n                messages={this.interaction.messagesFor({\n                  state: interactionState,\n                })}\n              />\n            )}\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              onClick={this.confirmOnDevice}\n              disabled={interactionState === ACTIVE}\n            >\n              Confirm\n            </Button>\n            {(interactionMessage !== \"\" || interactionError !== \"\") && (\n              <Button size=\"large\" onClick={this.resetInteractionState}>\n                Reset\n              </Button>\n            )}\n          </>\n        )}\n      </Grid>\n    );\n  };\n\n  resetInteractionState = () => {\n    this.setState({\n      interactionError: \"\",\n      interactionMessage: \"\",\n      interactionState: PENDING,\n    });\n  };\n\n  confirmOnDevice = async () => {\n    this.setState({ interactionState: ACTIVE });\n    const { node } = this.props;\n    const { multisig } = node;\n    try {\n      const confirmed = await this.interaction.run();\n      if (\n        confirmed.address === multisig.address &&\n        confirmed.serializedPath === this.interaction.bip32Path\n      ) {\n        this.setState({\n          interactionState: ACTIVE,\n          interactionMessage: \"Success\",\n          interactionError: \"\",\n        });\n      } else {\n        this.setState({\n          interactionState: ACTIVE,\n          interactionError: \"An unknow error occured\",\n          interactionMessage: \"\",\n        });\n      }\n    } catch (error) {\n      this.setState({\n        interactionState: ACTIVE,\n        interactionError: error.message,\n        interactionMessage: \"\",\n      });\n    }\n  };\n\n  keySelected = (event, extendedPublicKeyImporter) => {\n    const { network, node } = this.props;\n    const { multisig, bip32Path } = node;\n\n    this.interaction = ConfirmMultisigAddress({\n      keystore: extendedPublicKeyImporter.method,\n      network,\n      bip32Path: `${extendedPublicKeyImporter.bip32Path}${bip32Path.slice(1)}`,\n      multisig,\n    });\n    this.setState({ hasInteraction: true });\n    this.resetInteractionState();\n  };\n\n  // TODO: DRY out with test\n  confirmAddressDescription() {\n    const { network, node, requiredSigners, totalSigners } = this.props;\n    const { multisig } = node;\n    const addressType = multisigAddressType(multisig);\n\n    return (\n      <Box>\n        <p>\n          Confirm the following {network} {addressType} {requiredSigners}\n          -of-\n          {totalSigners} multisig address on your device:\n        </p>\n\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>Address:</TableCell>\n              <TableCell>\n                <code>{multisig.address}</code>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>BIP32 Path:</TableCell>\n              <TableCell>\n                <code>{this.interaction.bip32Path}</code>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </Box>\n    );\n  }\n}\n\nAddressExpander.propTypes = {\n  client: PropTypes.shape({\n    type: PropTypes.string,\n  }).isRequired,\n  extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n  node: PropTypes.shape({\n    addressUsed: PropTypes.bool,\n    balanceSats: PropTypes.shape({\n      isEqualTo: PropTypes.func,\n      isGreaterThan: PropTypes.func,\n    }),\n    bip32Path: PropTypes.string,\n    multisig: PropTypes.shape({\n      address: PropTypes.string,\n    }),\n    utxos: PropTypes.arrayOf(PropTypes.shape({})),\n  }).isRequired,\n  network: PropTypes.string,\n  requiredSigners: PropTypes.number.isRequired,\n  totalSigners: PropTypes.number.isRequired,\n};\n\nAddressExpander.defaultProps = {\n  network: NETWORKS.TESTNET,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    network: state.settings.network,\n    requiredSigners: state.settings.requiredSigners,\n    totalSigners: state.settings.totalSigners,\n    client: state.client,\n    extendedPublicKeyImporters: state.quorum.extendedPublicKeyImporters,\n  };\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressExpander);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { satoshisToBitcoins } from \"unchained-bitcoin\";\n\n// Components\nimport { TableRow, TableCell, Checkbox } from \"@material-ui/core\";\nimport AddressExpander from \"./AddressExpander\";\n\n// Actions\nimport {\n  setInputs as setInputsAction,\n  setFeeRate as setFeeRateAction,\n  updateAutoSpendAction as updateAutoSpendActionImport,\n} from \"../../actions/transactionActions\";\nimport { WALLET_MODES } from \"../../actions/walletActions\";\n\nclass Node extends React.Component {\n  componentDidMount = () => {\n    this.generate();\n  };\n\n  render = () => {\n    const {\n      bip32Path,\n      spend,\n      fetchedUTXOs,\n      balanceSats,\n      multisig,\n      utxos,\n      walletMode,\n      addressKnown,\n    } = this.props;\n    const spending = walletMode === WALLET_MODES.SPEND;\n    return (\n      <TableRow key={bip32Path}>\n        {spending && (\n          <TableCell>\n            <Checkbox\n              id={bip32Path}\n              name=\"spend\"\n              onChange={this.handleSpend}\n              checked={spend}\n              disabled={!fetchedUTXOs || balanceSats.isEqualTo(0)}\n            />\n          </TableCell>\n        )}\n        <TableCell>\n          <code>{bip32Path.replace(\"m\", \"*\")}</code>\n        </TableCell>\n        <TableCell>{utxos.length}</TableCell>\n        <TableCell>\n          {fetchedUTXOs && addressKnown\n            ? satoshisToBitcoins(balanceSats).toFixed()\n            : \"\"}\n        </TableCell>\n        <TableCell>{this.maxUtxoDate()}</TableCell>\n\n        <TableCell>{multisig ? this.renderAddress() : \"...\"}</TableCell>\n      </TableRow>\n    );\n  };\n\n  maxUtxoDate = () => {\n    const { utxos } = this.props;\n    if (!utxos.length) return \"\";\n    const maxtime = Math.max(...utxos.map((utxo) => utxo.time));\n    if (Number.isNaN(maxtime)) return \"Pending\";\n    return new Date(1000 * maxtime).toLocaleDateString();\n  };\n\n  renderAddress = () => {\n    const { braidNode } = this.props;\n    return <AddressExpander node={braidNode} />;\n  };\n\n  generate = () => {\n    const { present, change, bip32Path, addNode } = this.props;\n    if (!present) {\n      addNode(change, bip32Path);\n    }\n  };\n\n  handleSpend = (e) => {\n    const {\n      change,\n      bip32Path,\n      updateNode,\n      inputs,\n      utxos,\n      multisig,\n      setInputs,\n      updateAutoSpend,\n      setFeeRate,\n      feeRate,\n    } = this.props;\n    let newInputs;\n    if (e.target.checked) {\n      newInputs = inputs.concat(\n        utxos.map((utxo) => ({ ...utxo, multisig, bip32Path }))\n      );\n    } else {\n      newInputs = inputs.filter((input) => {\n        const newUtxos = utxos.filter((utxo) => {\n          return utxo.txid === input.txid && utxo.index === input.index;\n        });\n        return newUtxos.length === 0;\n      });\n    }\n    setInputs(newInputs);\n    updateNode(change, { spend: e.target.checked, bip32Path });\n    updateAutoSpend(false);\n    setFeeRate(feeRate);\n  };\n}\n\nNode.propTypes = {\n  addNode: PropTypes.func.isRequired,\n  addressKnown: PropTypes.bool.isRequired,\n  balanceSats: PropTypes.shape({\n    isEqualTo: PropTypes.func,\n  }).isRequired,\n  bip32Path: PropTypes.string.isRequired,\n  braidNode: PropTypes.shape({}).isRequired,\n  change: PropTypes.bool.isRequired,\n  feeRate: PropTypes.string.isRequired,\n  fetchedUTXOs: PropTypes.bool.isRequired,\n  inputs: PropTypes.arrayOf(\n    PropTypes.shape({\n      index: PropTypes.number,\n      txid: PropTypes.string,\n    })\n  ).isRequired,\n  multisig: PropTypes.shape({}),\n  present: PropTypes.bool,\n  setFeeRate: PropTypes.func.isRequired,\n  setInputs: PropTypes.func.isRequired,\n  spend: PropTypes.bool.isRequired,\n  updateAutoSpend: PropTypes.func.isRequired,\n  updateNode: PropTypes.func.isRequired,\n  utxos: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  walletMode: PropTypes.number.isRequired,\n};\n\nNode.defaultProps = {\n  multisig: {},\n  present: false,\n};\n\nfunction mapStateToProps(state, ownProps) {\n  const change = (ownProps.bip32Path || \"\").split(\"/\")[1] === \"1\"; // // m, 0, 1\n  const braid = state.wallet[change ? \"change\" : \"deposits\"];\n  return {\n    ...state.settings,\n    ...{ change },\n    ...braid.nodes[ownProps.bip32Path],\n    ...state.spend.transaction,\n    walletMode: state.wallet.common.walletMode,\n    braidNode: braid.nodes[ownProps.bip32Path],\n  };\n}\n\nconst mapDispatchToProps = {\n  setInputs: setInputsAction,\n  setFeeRate: setFeeRateAction,\n  updateAutoSpend: updateAutoSpendActionImport,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Node);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\n// Components\nimport {\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  FormLabel,\n  Grid,\n  Box,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  TablePagination,\n  TableSortLabel,\n} from \"@material-ui/core\";\nimport Node from \"./Node\";\nimport { WALLET_MODES } from \"../../actions/walletActions\";\n\nclass NodeSet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      nodesPerPage: 10,\n      spend: false,\n      filterIncludeSpent: false,\n      filterIncludeZeroBalance: false,\n      orderBy: \"bip32Path\",\n      orderDir: \"asc\",\n    };\n  }\n\n  sortAddresses = (key) => {\n    const { orderBy, orderDir } = this.state;\n    if (key === orderBy) {\n      this.setState({ page: 0, orderDir: orderDir === \"asc\" ? \"desc\" : \"asc\" });\n    } else {\n      this.setState({ page: 0, orderBy: key });\n    }\n  };\n\n  renderFilters = () => {\n    const { filterIncludeSpent, filterIncludeZeroBalance } = this.state;\n    return (\n      <FormGroup row>\n        <FormLabel component=\"h2\">\n          <Box mr={3}>Show Additional</Box>\n        </FormLabel>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={filterIncludeSpent}\n              value=\"filterIncludeSpent\"\n              onChange={this.filterAddresses}\n            />\n          }\n          label=\"Spent Addresses\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={filterIncludeZeroBalance}\n              value=\"filterIncludeZeroBalance\"\n              onChange={this.filterAddresses}\n            />\n          }\n          label=\"Zero Balance\"\n        />\n      </FormGroup>\n    );\n  };\n\n  filterAddresses = (event, checked) => {\n    this.setState({ [event.target.value]: checked, page: 0 });\n  };\n\n  getNodeSet = () => {\n    const { changeNodes, depositNodes } = this.props;\n    const {\n      filterIncludeSpent,\n      filterIncludeZeroBalance,\n      orderBy,\n      orderDir,\n    } = this.state;\n    const nodes = Object.values(depositNodes)\n      .concat(Object.values(changeNodes))\n      .reduce((result, node) => {\n        const returnValue = result;\n        returnValue[node.bip32Path] = node;\n        return returnValue;\n      }, {});\n\n    let nodeSet = [];\n    Object.values(nodes).forEach((node) => {\n      if (node.balanceSats.isGreaterThan(0)) {\n        nodeSet.push(node);\n      } else if (\n        filterIncludeZeroBalance &&\n        node.balanceSats.isEqualTo(0) &&\n        !node.addressUsed\n      ) {\n        nodeSet.push(node);\n      } else if (filterIncludeSpent && node.addressUsed) {\n        nodeSet.push(node);\n      }\n    });\n\n    nodeSet = nodeSet.sort((a, b) => {\n      const direction = orderDir === \"asc\" ? 1 : -1;\n      if (orderBy === \"bip32Path\") {\n        if (a.change && !b.change) return direction;\n        if (!a.change && b.change) return -direction;\n        const aint = parseInt(a.bip32Path.split(\"/\").reverse()[0], 10);\n        const bint = parseInt(b.bip32Path.split(\"/\").reverse()[0], 10);\n        return aint > bint ? direction : -direction;\n      }\n      if (orderBy === \"balanceSats\") {\n        if (a.balanceSats.isEqualTo(b.balanceSats)) return 0;\n        return a.balanceSats.isGreaterThan(b.balanceSats)\n          ? direction\n          : -direction;\n      }\n      if (orderBy === \"utxos\") {\n        if (a.utxos.length === b.utxos.length) return 0;\n        return a.utxos.length > b.utxos.length ? direction : -direction;\n      }\n      if (orderBy === \"time\") {\n        if (a.utxos.length === 0) {\n          return b.utxos.length === 0 ? 0 : direction;\n        }\n        if (b.utxos.length === 0) {\n          return a.utxos.length === 0 ? 0 : -direction;\n        }\n        const amin = Math.min(...a.utxos.map((utxo) => utxo.time));\n        const bmin = Math.min(...b.utxos.map((utxo) => utxo.time));\n        if (Number.isNaN(amin) && Number.Number.isNaN(bmin)) return 0;\n        if (Number.isNaN(amin)) return direction;\n        if (Number.isNaN(bmin)) return -direction;\n        return amin > bmin ? direction : -direction;\n      }\n      return 0;\n    });\n\n    nodeSet = nodeSet.reduce((nodesObject, currentNode) => {\n      const returnValue = nodesObject;\n      returnValue[currentNode.bip32Path] = currentNode;\n      return returnValue;\n    }, {});\n\n    return nodeSet;\n  };\n\n  renderNodes = () => {\n    const { page, nodesPerPage, spend } = this.state;\n    const { addNode, updateNode } = this.props;\n    const startingIndex = page * nodesPerPage;\n    const nodesRows = [];\n    const nodeSet = this.getNodeSet();\n    for (let index = 0; index < nodesPerPage; index += 1) {\n      const whichOne = startingIndex + index;\n      if (whichOne > Object.keys(nodeSet).length - 1) break;\n      const bip32Path = Object.values(nodeSet)[whichOne].bip32Path; // eslint-disable-line prefer-destructuring\n      const change = Object.values(nodeSet)[whichOne].change; // eslint-disable-line prefer-destructuring\n      const nodeRow = (\n        <Node\n          key={bip32Path}\n          bip32Path={bip32Path}\n          addNode={addNode}\n          updateNode={updateNode}\n          change={change}\n          spend={spend}\n        />\n      );\n      nodesRows.push(nodeRow);\n    }\n    return nodesRows;\n  };\n\n  handlePageChange = (e, selected) => {\n    const page = selected; // + 1;\n    this.setState({ page });\n  };\n\n  handleChangeRowsPerPage = (e) => {\n    this.setState({ nodesPerPage: e.target.value, page: 0 });\n  };\n\n  pageCount = () => {\n    const { nodesPerPage } = this.state;\n    return Math.ceil(this.rowCount() / nodesPerPage);\n  };\n\n  rowCount = () => {\n    const nodeSet = this.getNodeSet();\n    return Object.keys(nodeSet).length;\n  };\n\n  render() {\n    const { page, nodesPerPage, orderBy, orderDir } = this.state;\n    const { walletMode } = this.props;\n    const spending = walletMode === WALLET_MODES.SPEND;\n    return (\n      <Grid item md={12}>\n        <Table style={{ tableLayout: \"fixed\" }}>\n          <TableHead>\n            <TableRow>\n              {spending && <TableCell width={62}>Spend?</TableCell>}\n              <TableCell width={106}>\n                <TableSortLabel\n                  active={orderBy === \"bip32Path\"}\n                  direction={orderDir}\n                  onClick={() => this.sortAddresses(\"bip32Path\")}\n                >\n                  BIP32 Path\n                </TableSortLabel>\n              </TableCell>\n              <TableCell width={78}>\n                <TableSortLabel\n                  active={orderBy === \"utxos\"}\n                  direction={orderDir}\n                  onClick={() => this.sortAddresses(\"utxos\")}\n                >\n                  UTXOs\n                </TableSortLabel>\n              </TableCell>\n              <TableCell width={82}>\n                <TableSortLabel\n                  active={orderBy === \"balanceSats\"}\n                  direction={orderDir}\n                  onClick={() => this.sortAddresses(\"balanceSats\")}\n                >\n                  Balance\n                </TableSortLabel>\n              </TableCell>\n              <TableCell width={98}>\n                <TableSortLabel\n                  active={orderBy === \"time\"}\n                  direction={orderDir}\n                  onClick={() => this.sortAddresses(\"time\")}\n                >\n                  Last Used\n                </TableSortLabel>\n              </TableCell>\n              <TableCell>Address</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{this.renderNodes()}</TableBody>\n        </Table>\n        <Grid container>\n          <Grid item md={6}>\n            <TablePagination\n              component=\"div\"\n              count={this.rowCount()}\n              rowsPerPage={nodesPerPage}\n              page={page}\n              backIconButtonProps={{\n                \"aria-label\": \"previous page\",\n              }}\n              nextIconButtonProps={{\n                \"aria-label\": \"next page\",\n              }}\n              onChangePage={this.handlePageChange}\n              onChangeRowsPerPage={this.handleChangeRowsPerPage}\n            />\n          </Grid>\n        </Grid>\n        {!spending && this.renderFilters()}\n      </Grid>\n    );\n  }\n}\n\nNodeSet.propTypes = {\n  depositNodes: PropTypes.shape({}).isRequired,\n  changeNodes: PropTypes.shape({}).isRequired,\n  addNode: PropTypes.func.isRequired,\n  updateNode: PropTypes.func.isRequired,\n  walletMode: PropTypes.number.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    changeNodes: state.wallet.change.nodes,\n    depositNodes: state.wallet.deposits.nodes,\n    walletMode: state.wallet.common.walletMode,\n    client: state.client,\n    ...state.settings,\n  };\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NodeSet);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  satoshisToBitcoins,\n  bitcoinsToSatoshis,\n  validateOutputAmount,\n} from \"unchained-bitcoin\";\nimport BigNumber from \"bignumber.js\";\n\n// Actions\n\n// Components\nimport {\n  Grid,\n  Tooltip,\n  TextField,\n  IconButton,\n  InputAdornment,\n  FormHelperText,\n  Typography,\n} from \"@material-ui/core\";\nimport AccountBalanceWalletOutlinedIcon from \"@material-ui/icons/AccountBalanceWallet\";\nimport { Delete, AddCircle, RemoveCircle } from \"@material-ui/icons\";\nimport {\n  setOutputAddress,\n  setOutputAmount,\n  deleteOutput,\n  setChangeOutputIndex,\n  setMaxSpendOnOutput,\n} from \"../../actions/transactionActions\";\n\n// Assets\nimport styles from \"./styles.module.scss\";\n\nclass OutputEntry extends React.Component {\n  displayBalanceAction = () => {\n    const { isWallet, finalizedOutputs, autoSpend } = this.props;\n    if (isWallet) {\n      return (\n        !autoSpend &&\n        !finalizedOutputs &&\n        this.hasBalanceError() &&\n        this.isBalanceable()\n      );\n    }\n    return !finalizedOutputs && this.hasBalanceError() && this.isBalanceable();\n  };\n\n  //\n  // Address\n  //\n\n  addChangeAddress = () => {\n    const { changeNode, number, setAddress, setChangeOutput } = this.props;\n    setAddress(number, changeNode.multisig.address);\n    setChangeOutput(number);\n  };\n\n  renderChangeAdornment = () => {\n    const {\n      changeNode,\n      number,\n      changeOutputIndex,\n      address,\n      isWallet,\n      autoSpend,\n    } = this.props;\n    if (isWallet && autoSpend) return {};\n    if (changeNode !== null) {\n      let title;\n      let disable = false;\n      if (changeOutputIndex === 0 && address === \"\") {\n        title = \"Set to wallet change address\";\n      } else if (number === changeOutputIndex) {\n        title = \"Your change will go here.\";\n        disable = true;\n      } else return {};\n      return {\n        /* min: \"0\", */\n        /* max: \"1000\", */\n        /* step: \"any\", */\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <Tooltip placement=\"top\" title={title}>\n              <small>\n                <IconButton onClick={this.addChangeAddress} disabled={disable}>\n                  <AccountBalanceWalletOutlinedIcon />\n                </IconButton>\n              </small>\n            </Tooltip>\n          </InputAdornment>\n        ),\n      };\n    }\n    return {};\n  };\n\n  handleAddressChange = (event) => {\n    const { number, setAddress } = this.props;\n    setAddress(number, event.target.value);\n  };\n\n  hasAddressError = () => {\n    const { addressError } = this.props;\n    return addressError !== \"\";\n  };\n\n  //\n  // Amount\n  //\n\n  handleAmountChange = (event) => {\n    const { number, setAmount } = this.props;\n    setAmount(number, event.target.value);\n  };\n\n  hasAmountError = () => {\n    const { amountError } = this.props;\n    return amountError !== \"\";\n  };\n\n  //\n  // Balance\n  //\n\n  isNotBalanceable = () => {\n    const {\n      number,\n      outputs,\n      feeError,\n      amountError,\n      amount,\n      inputsTotalSats,\n    } = this.props;\n    if (feeError !== \"\") {\n      return true;\n    }\n    for (let i = 0; i < outputs.length; i += 1) {\n      if (i !== number - 1) {\n        if (outputs[i].amountError !== \"\" || outputs[i].amount === \"\") {\n          return true;\n        }\n      }\n    }\n    const newAmount = this.autoBalancedAmount();\n    if (\n      validateOutputAmount(bitcoinsToSatoshis(newAmount), inputsTotalSats) !==\n      \"\"\n    ) {\n      return true;\n    }\n    if (amountError === \"\" && newAmount === new BigNumber(amount)) {\n      return true;\n    }\n    return false;\n  };\n\n  isBalanceable = () => !this.isNotBalanceable();\n\n  hasBalanceError = () => {\n    const { balanceError } = this.props;\n    return balanceError !== \"\";\n  };\n\n  autoBalancedAmount = () => {\n    const { number, fee, inputsTotalSats, outputs } = this.props;\n    const outputTotalSats = outputs\n      .filter((output, i) => i !== number - 1)\n      .map((output) => output.amountSats)\n      .reduce(\n        (accumulator, currentValue) => accumulator.plus(currentValue),\n        new BigNumber(0)\n      );\n    const feeSats = bitcoinsToSatoshis(new BigNumber(fee));\n    return satoshisToBitcoins(\n      inputsTotalSats.minus(outputTotalSats.plus(feeSats))\n    );\n  };\n\n  balanceAction = () => {\n    const { balanceError } = this.props;\n    if (!this.hasBalanceError() || this.isNotBalanceable()) {\n      return null;\n    }\n    return balanceError.split(\" \")[0];\n  };\n\n  handleBalance = () => {\n    const { number, setAmount } = this.props;\n    setAmount(number, this.autoBalancedAmount().toString());\n  };\n\n  //\n  // State\n  //\n\n  hasError = () => {\n    return this.hasAddressError() || this.hasAmountError();\n  };\n\n  handleDelete = () => {\n    const { number, remove } = this.props;\n    remove(number);\n  };\n\n  handleMaxSpend = (e) => {\n    e.preventDefault();\n    const { number, setMaxSpend } = this.props;\n    setMaxSpend(number);\n  };\n\n  render() {\n    const {\n      outputs,\n      finalizedOutputs,\n      address,\n      amount,\n      addressError,\n      amountError,\n      changeOutputIndex,\n      autoSpend,\n      isWallet,\n      number,\n    } = this.props;\n\n    const gridSpacing = isWallet ? 10 : 1;\n\n    return (\n      <Grid container spacing={gridSpacing}>\n        <Grid item xs={7}>\n          <TextField\n            fullWidth\n            placeholder=\"Address\"\n            name=\"destination\"\n            className={styles.outputsFormInput}\n            disabled={finalizedOutputs}\n            onChange={this.handleAddressChange}\n            value={address}\n            error={this.hasAddressError()}\n            helperText={addressError}\n            InputProps={this.renderChangeAdornment()}\n          />\n        </Grid>\n\n        <Grid item xs={3}>\n          <TextField\n            fullWidth\n            placeholder=\"Amount\"\n            className={styles.outputsFormInput}\n            name=\"amount\"\n            disabled={finalizedOutputs}\n            onChange={this.handleAmountChange}\n            value={amount}\n            error={this.hasAmountError()}\n            helperText={amountError}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  {isWallet &&\n                    autoSpend &&\n                    number === outputs.length &&\n                    number !== changeOutputIndex && (\n                      <Typography\n                        onClick={this.handleMaxSpend}\n                        className={styles.maxSpend}\n                        style={{ fontSize: \".7rem\" }}\n                      >\n                        MAX\n                      </Typography>\n                    )}\n                </InputAdornment>\n              ),\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <FormHelperText>BTC</FormHelperText>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </Grid>\n        {this.displayBalanceAction() && (\n          <Grid item xs={1}>\n            <Tooltip\n              title={`${this.balanceAction()} to ${this.autoBalancedAmount().toString()}`}\n              placement=\"top\"\n            >\n              <small>\n                <IconButton onClick={this.handleBalance}>\n                  {this.balanceAction() === \"Increase\" ? (\n                    <AddCircle />\n                  ) : (\n                    <RemoveCircle />\n                  )}\n                </IconButton>\n              </small>\n            </Tooltip>\n          </Grid>\n        )}\n\n        {!finalizedOutputs &&\n          outputs.length > (changeOutputIndex > 0 && autoSpend ? 2 : 1) && (\n            <Grid item xs={1}>\n              <Tooltip title=\"Remove Output\" placement=\"top\">\n                <IconButton onClick={this.handleDelete}>\n                  <Delete />\n                </IconButton>\n              </Tooltip>\n            </Grid>\n          )}\n      </Grid>\n    );\n  }\n}\n\nOutputEntry.propTypes = {\n  address: PropTypes.string.isRequired,\n  addressError: PropTypes.string.isRequired,\n  amount: PropTypes.string.isRequired,\n  amountError: PropTypes.string.isRequired,\n  autoSpend: PropTypes.bool.isRequired,\n  balanceError: PropTypes.string.isRequired,\n  changeNode: PropTypes.shape({\n    multisig: PropTypes.shape({\n      address: PropTypes.string,\n    }),\n  }),\n  changeOutputIndex: PropTypes.number.isRequired,\n  fee: PropTypes.string.isRequired,\n  feeError: PropTypes.string.isRequired,\n  finalizedOutputs: PropTypes.bool.isRequired,\n  inputsTotalSats: PropTypes.shape({\n    minus: PropTypes.func,\n  }).isRequired,\n  isWallet: PropTypes.bool.isRequired,\n  number: PropTypes.number.isRequired,\n  outputs: PropTypes.arrayOf(\n    PropTypes.shape({\n      amount: PropTypes.string,\n      amountError: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  remove: PropTypes.func.isRequired,\n  setAddress: PropTypes.func.isRequired,\n  setAmount: PropTypes.func.isRequired,\n  setMaxSpend: PropTypes.func.isRequired,\n  setChangeOutput: PropTypes.func.isRequired,\n};\n\nOutputEntry.defaultProps = {\n  changeNode: {},\n};\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...state.spend.transaction,\n    ...state.spend.transaction.outputs[ownProps.number - 1],\n    changeNode: state.wallet.change.nextNode,\n  };\n}\n\nconst mapDispatchToProps = {\n  setAddress: setOutputAddress,\n  setAmount: setOutputAmount,\n  remove: deleteOutput,\n  setChangeOutput: setChangeOutputIndex,\n  setMaxSpend: setMaxSpendOnOutput,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OutputEntry);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { map } from \"lodash\";\nimport BigNumber from \"bignumber.js\";\nimport { bitcoinsToSatoshis, satoshisToBitcoins } from \"unchained-bitcoin\";\n\n// Actions\n\n// Components\nimport {\n  Grid,\n  Button,\n  Tooltip,\n  TextField,\n  Box,\n  IconButton,\n  InputAdornment,\n  Typography,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport { Speed } from \"@material-ui/icons\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport {\n  addOutput as addOutputAction,\n  setOutputAmount as setOutputAmountAction,\n  setFeeRate as setFeeRateAction,\n  setFee as setFeeAction,\n  finalizeOutputs as finalizeOutputsAction,\n  resetOutputs as resetOutputsAction,\n} from \"../../actions/transactionActions\";\nimport { fetchFeeEstimate } from \"../../blockchain\";\nimport OutputEntry from \"./OutputEntry\";\n\n// Assets\nimport styles from \"./styles.module.scss\";\n\nclass OutputsForm extends React.Component {\n  static unitLabel(label, options) {\n    let inputProps = {\n      endAdornment: (\n        <InputAdornment position=\"end\">\n          <FormHelperText>{label}</FormHelperText>\n        </InputAdornment>\n      ),\n    };\n    if (options) {\n      inputProps = {\n        ...inputProps,\n        ...options,\n      };\n    }\n    return inputProps;\n  }\n\n  titleRef = React.createRef();\n\n  outputsTotal = 0;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      feeRateFetchError: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    this.initialOutputState();\n    this.scrollToTitle();\n  };\n\n  componentDidUpdate = () => {\n    this.scrollToTitle();\n  };\n\n  scrollToTitle = () => {\n    const { signatureImporters, isWallet } = this.props;\n    const finalizedCount = Object.keys(signatureImporters).reduce(\n      (o, k) => o + signatureImporters[k].finalized,\n      0\n    );\n    if (finalizedCount === 0 && !isWallet)\n      this.titleRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  renderOutputs = () => {\n    const { outputs, changeOutputIndex, autoSpend } = this.props;\n    return map(outputs).map((output, i) => (\n      <Box\n        key={i} // eslint-disable-line react/no-array-index-key\n        display={autoSpend && changeOutputIndex === i + 1 ? \"none\" : \"block\"}\n      >\n        <Grid container>\n          <OutputEntry number={i + 1} />\n        </Grid>\n      </Box>\n    ));\n  };\n\n  inputsTotal = () => {\n    const { inputsTotalSats } = this.props;\n    return satoshisToBitcoins(inputsTotalSats);\n  };\n\n  outputsAndFeeTotal = () => {\n    const { outputs, fee, updatesComplete, inputs } = this.props;\n    let total = outputs\n      .map((output) => {\n        let { amount } = output;\n        // eslint-disable-next-line no-restricted-globals\n        if (!amount || !amount.length || isNaN(amount)) amount = 0;\n        return new BigNumber(amount);\n      })\n      .reduce(\n        (accumulator, currentValue) => accumulator.plus(currentValue),\n        new BigNumber(0)\n      );\n\n    // only care to add fee if we have inputs\n    // which we won't have in auto-spend wallet output form\n    if (fee && inputs.length) total = total.plus(fee);\n\n    if (updatesComplete) {\n      this.outputsTotal = total;\n      return total.toFixed(8);\n    }\n    return \"0.00000000\";\n  };\n\n  hasFeeRateFetchError = () => {\n    const { feeRateFetchError } = this.state;\n    return feeRateFetchError !== \"\";\n  };\n\n  hasFeeRateError = () => {\n    const { feeRateError } = this.props;\n    return feeRateError !== \"\";\n  };\n\n  hasFeeError = () => {\n    const { feeError } = this.props;\n    return feeError !== \"\";\n  };\n\n  hasBalanceError = () => {\n    const { balanceError } = this.props;\n    return balanceError !== \"\";\n  };\n\n  hasError = () => {\n    return (\n      this.hasFeeRateFetchError() ||\n      this.hasFeeRateError() ||\n      this.hasFeeError() ||\n      this.hasBalanceError()\n    );\n  };\n\n  handleAddOutput = () => {\n    const { addOutput } = this.props;\n    addOutput();\n  };\n\n  handleFeeRateChange = (event) => {\n    const { setFeeRate } = this.props;\n    let rate = event.target.value;\n\n    // eslint-disable-next-line use-isnan\n    if (rate === \"\" || parseFloat(rate, 10) === NaN || parseFloat(rate, 10) < 1)\n      rate = \"0\";\n    setFeeRate(rate);\n  };\n\n  handleFeeChange = (event) => {\n    const { setFee } = this.props;\n    setFee(event.target.value);\n  };\n\n  handleFinalize = () => {\n    const { finalizeOutputs } = this.props;\n    finalizeOutputs(true);\n  };\n\n  handleReset = () => {\n    const { resetOutputs, isWallet } = this.props;\n    resetOutputs();\n    if (!isWallet) setTimeout(() => this.initialOutputState(), 0);\n  };\n\n  getFeeEstimate = async () => {\n    const { client, network, setFeeRate } = this.props;\n    let newFeeRate = 1;\n    let feeRateFetchError = \"\";\n    try {\n      newFeeRate = await fetchFeeEstimate(network, client);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n      feeRateFetchError = \"There was an error fetching the fee rate.\";\n    } finally {\n      setFeeRate(newFeeRate.toString());\n      this.setState({ feeRateFetchError });\n    }\n  };\n\n  gatherSignaturesDisabled = () => {\n    const { finalizedOutputs, outputs, inputs } = this.props;\n    if (inputs.length === 0) return true;\n    if (finalizedOutputs || this.hasError()) {\n      return true;\n    }\n    for (let i = 0; i < outputs.length; i += 1) {\n      const output = outputs[i];\n      if (\n        output.address === \"\" ||\n        output.amount === \"\" ||\n        output.addressError !== \"\" ||\n        output.amountError !== \"\"\n      ) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  async initialOutputState() {\n    const { inputs, outputs } = this.props;\n    await this.getFeeEstimate();\n    const { inputsTotalSats, fee, setOutputAmount } = this.props;\n    const feeSats = bitcoinsToSatoshis(new BigNumber(fee));\n    const outputAmount = satoshisToBitcoins(inputsTotalSats.minus(feeSats));\n    // only initialize once so we don't lose state\n    if (inputs.length && outputs[0].amount === \"\")\n      setOutputAmount(1, outputAmount.toFixed(8));\n  }\n\n  render() {\n    const {\n      feeRate,\n      fee,\n      finalizedOutputs,\n      feeRateError,\n      feeError,\n      balanceError,\n      inputs,\n      isWallet,\n      autoSpend,\n    } = this.props;\n    const { feeRateFetchError } = this.state;\n    const feeDisplay = inputs && inputs.length > 0 ? fee : \"0.0000\";\n    const feeMt = 3;\n    const totalMt = 7;\n    const actionMt = 7;\n    const gridSpacing = isWallet ? 10 : 1;\n    return (\n      <>\n        <Box ref={this.titleRef}>\n          <Grid container spacing={gridSpacing}>\n            <Grid item xs={4}>\n              <Typography variant=\"caption\" className={styles.outputsFormLabel}>\n                To\n              </Typography>\n            </Grid>\n            <Grid item xs={3}>\n              &nbsp;\n            </Grid>\n            <Grid item xs={3}>\n              <Typography variant=\"caption\" className={styles.outputsFormLabel}>\n                Amount\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <Grid>{this.renderOutputs()}</Grid>\n\n          <Grid item container spacing={gridSpacing}>\n            <Grid item xs={12}>\n              <Button\n                color=\"primary\"\n                disabled={finalizedOutputs}\n                onClick={this.handleAddOutput}\n              >\n                <AddIcon /> Add output\n              </Button>\n            </Grid>\n          </Grid>\n          <Grid item container spacing={gridSpacing}>\n            <Grid item xs={3}>\n              <Box mt={feeMt}>\n                <Typography\n                  variant=\"caption\"\n                  className={styles.outputsFormLabel}\n                >\n                  Fee Rate\n                </Typography>\n                <TextField\n                  fullWidth\n                  value={feeRate}\n                  type=\"number\"\n                  minimum={0}\n                  step={1}\n                  name=\"fee_rate\"\n                  disabled={finalizedOutputs}\n                  onChange={this.handleFeeRateChange}\n                  error={this.hasFeeRateError()}\n                  helperText={feeRateFetchError || feeRateError}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <Tooltip placement=\"top\" title=\"Estimate best rate\">\n                          <small>\n                            <IconButton\n                              onClick={this.getFeeEstimate}\n                              disabled={finalizedOutputs}\n                            >\n                              <Speed />\n                            </IconButton>\n                          </small>\n                        </Tooltip>\n                        <FormHelperText>Sats/byte</FormHelperText>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Box>\n            </Grid>\n\n            <Grid item xs={4}>\n              <Box mt={feeMt}>&nbsp;</Box>\n            </Grid>\n            {!isWallet || (isWallet && !autoSpend) ? (\n              <Grid item xs={3}>\n                <Box mt={feeMt}>\n                  <Typography\n                    variant=\"caption\"\n                    className={styles.outputsFormLabel}\n                  >\n                    Estimated Fees\n                  </Typography>\n                  <TextField\n                    fullWidth\n                    name=\"fee_total\"\n                    disabled={finalizedOutputs}\n                    value={feeDisplay}\n                    onChange={this.handleFeeChange}\n                    error={this.hasFeeError()}\n                    helperText={feeError}\n                    InputProps={OutputsForm.unitLabel(\"BTC\", {\n                      readOnly: true,\n                      disableUnderline: true,\n                      style: { color: \"gray\" },\n                    })}\n                  />\n                </Box>\n              </Grid>\n            ) : (\n              \"\"\n            )}\n\n            <Grid item xs={2} />\n          </Grid>\n\n          <Grid item container spacing={gridSpacing}>\n            <Grid item xs={4}>\n              <Box mt={totalMt}>\n                <Typography variant=\"h6\">\n                  {!isWallet || (isWallet && !autoSpend)\n                    ? \"Totals\"\n                    : \"Output Total\"}\n                </Typography>\n              </Box>\n            </Grid>\n            <Grid item xs={3}>\n              <Box\n                display={\n                  !isWallet || (isWallet && !autoSpend) ? \"block\" : \"none\"\n                }\n                mt={totalMt}\n              >\n                <TextField\n                  fullWidth\n                  label=\"Inputs Total\"\n                  readOnly\n                  value={this.inputsTotal().toFixed(8)}\n                  disabled={finalizedOutputs}\n                  InputProps={OutputsForm.unitLabel(\"BTC\", { readOnly: true })}\n                />\n              </Box>\n            </Grid>\n            <Grid item xs={3}>\n              <Box mt={totalMt}>\n                <TextField\n                  fullWidth\n                  label={\n                    !isWallet || (isWallet && !autoSpend)\n                      ? \"Outputs & Fee Total\"\n                      : \"\"\n                  }\n                  value={this.outputsAndFeeTotal()}\n                  error={this.hasBalanceError()}\n                  disabled={finalizedOutputs}\n                  helperText={balanceError}\n                  InputProps={OutputsForm.unitLabel(\"BTC\", {\n                    readOnly: true,\n                    disableUnderline: true,\n                  })}\n                />\n              </Box>\n            </Grid>\n            <Grid item xs={2} />\n          </Grid>\n        </Box>\n\n        {!isWallet && (\n          <Box mt={actionMt}>\n            <Grid container spacing={3} justify=\"center\">\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={this.gatherSignaturesDisabled()}\n                  onClick={this.handleFinalize}\n                >\n                  Gather Signatures\n                </Button>\n              </Grid>\n\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  disabled={finalizedOutputs}\n                  onClick={this.handleReset}\n                >\n                  Reset Outputs\n                </Button>\n              </Grid>\n            </Grid>\n          </Box>\n        )}\n      </>\n    );\n  }\n}\n\nOutputsForm.propTypes = {\n  addOutput: PropTypes.func.isRequired,\n  autoSpend: PropTypes.bool.isRequired,\n  balanceError: PropTypes.string.isRequired,\n  change: PropTypes.shape({\n    nextNode: PropTypes.shape({\n      multisig: PropTypes.shape({\n        address: PropTypes.string,\n      }),\n    }),\n  }).isRequired,\n  changeOutputIndex: PropTypes.number.isRequired,\n  client: PropTypes.shape({}).isRequired,\n  fee: PropTypes.string.isRequired,\n  feeError: PropTypes.string.isRequired,\n  feeRateError: PropTypes.string.isRequired,\n  finalizeOutputs: PropTypes.func.isRequired,\n  feeRate: PropTypes.string.isRequired,\n  finalizedOutputs: PropTypes.bool.isRequired,\n  inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  inputsTotalSats: PropTypes.shape({\n    minus: PropTypes.func,\n  }).isRequired,\n  isWallet: PropTypes.bool.isRequired,\n  network: PropTypes.string.isRequired,\n  outputs: PropTypes.arrayOf(\n    PropTypes.shape({\n      address: PropTypes.string,\n      addressError: PropTypes.string,\n      amount: PropTypes.string,\n      amountError: PropTypes.string,\n    })\n  ).isRequired,\n  resetOutputs: PropTypes.func.isRequired,\n  setFeeRate: PropTypes.func.isRequired,\n  setFee: PropTypes.func.isRequired,\n  setOutputAmount: PropTypes.func.isRequired,\n  signatureImporters: PropTypes.shape({}).isRequired,\n  updatesComplete: PropTypes.bool,\n};\n\nOutputsForm.defaultProps = {\n  updatesComplete: false,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    ...{\n      network: state.settings.network,\n      client: state.client,\n    },\n    ...state.spend.transaction,\n    ...state.client,\n    signatureImporters: state.spend.signatureImporters,\n    change: state.wallet.change,\n  };\n}\n\nconst mapDispatchToProps = {\n  addOutput: addOutputAction,\n  setOutputAmount: setOutputAmountAction,\n  setFeeRate: setFeeRateAction,\n  setFee: setFeeAction,\n  finalizeOutputs: finalizeOutputsAction,\n  resetOutputs: resetOutputsAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OutputsForm);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  signedMultisigTransaction,\n  blockExplorerTransactionURL,\n} from \"unchained-bitcoin\";\n\nimport {\n  Typography,\n  Box,\n  FormHelperText,\n  Button,\n  Card,\n  CardHeader,\n  CardContent,\n} from \"@material-ui/core\";\nimport { OpenInNew } from \"@material-ui/icons\";\nimport { broadcastTransaction } from \"../../blockchain\";\nimport Copyable from \"../Copyable\";\nimport { externalLink } from \"../../utils\";\nimport { setTXID } from \"../../actions/transactionActions\";\n\nclass Transaction extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: \"\",\n      broadcasting: false,\n      txid: \"\",\n    };\n  }\n\n  buildSignedTransaction = () => {\n    const { network, inputs, outputs, signatureImporters } = this.props;\n    return signedMultisigTransaction(\n      network,\n      inputs,\n      outputs,\n      Object.values(signatureImporters).map(\n        (signatureImporter) => signatureImporter.signature\n      )\n    );\n  };\n\n  handleBroadcast = async () => {\n    const { client, network, setTxid } = this.props;\n    const signedTransaction = this.buildSignedTransaction();\n    let error = \"\";\n    let txid = \"\";\n    this.setState({ broadcasting: true });\n    try {\n      txid = await broadcastTransaction(\n        signedTransaction.toHex(),\n        network,\n        client\n      );\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n      error = `There was an error broadcasting the transaction.: ${e}`;\n    } finally {\n      this.setState({ txid, error, broadcasting: false });\n      setTxid(txid);\n    }\n  };\n\n  transactionURL = () => {\n    const { network } = this.props;\n    const { txid } = this.state;\n    return blockExplorerTransactionURL(txid, network);\n  };\n\n  render() {\n    const { error, broadcasting, txid } = this.state;\n    const signedTransaction = this.buildSignedTransaction();\n    const signedTransactionHex = signedTransaction.toHex();\n    return (\n      <Card>\n        <CardHeader title=\"Broadcast\" />\n        <CardContent>\n          <form>\n            {signedTransaction && (\n              <Box mt={4}>\n                <Typography variant=\"h6\">Signed Transaction</Typography>\n                <Copyable text={signedTransactionHex} code showIcon />\n              </Box>\n            )}\n            {txid === \"\" ? (\n              <Box mt={2}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={!signedTransaction || broadcasting}\n                  onClick={this.handleBroadcast}\n                >\n                  Broadcast Transaction\n                </Button>\n                <FormHelperText error>{error}</FormHelperText>\n                <small>\n                  <FormHelperText>\n                    Warning: Broadcasting this transaction cannot be undone.\n                  </FormHelperText>\n                </small>\n              </Box>\n            ) : (\n              <Box mt={2}>\n                <Typography variant=\"h5\">\n                  <Copyable text={txid} code showIcon />\n                  &nbsp;\n                  {externalLink(this.transactionURL(), <OpenInNew />)}\n                </Typography>\n                <p>Transaction successfully broadcast.</p>\n              </Box>\n            )}\n          </form>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nTransaction.propTypes = {\n  client: PropTypes.shape({}).isRequired,\n  network: PropTypes.string.isRequired,\n  inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  setTxid: PropTypes.func.isRequired,\n  signatureImporters: PropTypes.shape({}).isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    network: state.settings.network,\n    client: state.client,\n    ...state.client,\n    signatureImporters: state.spend.signatureImporters,\n    inputs: state.spend.transaction.inputs,\n    outputs: state.spend.transaction.outputs,\n  };\n}\n\nconst mapDispatchToProps = {\n  setTxid: setTXID,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transaction);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport { Button } from \"@material-ui/core\";\nimport Copyable from \"./Copyable\";\n\nclass UnsignedTransaction extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showUnsignedTransaction: false,\n    };\n  }\n\n  render = () => {\n    const { showUnsignedTransaction } = this.state;\n    const { unsignedTransaction } = this.props;\n    if (showUnsignedTransaction) {\n      const hex = unsignedTransaction.toHex();\n      return (\n        <div>\n          <small>\n            <Button size=\"small\" onClick={this.handleHideUnsignedTransaction}>\n              Hide Unsigned Transaction\n            </Button>\n          </small>\n          <p>\n            <Copyable text={hex} showIcon />\n          </p>\n        </div>\n      );\n    }\n    return (\n      <small>\n        <Button size=\"small\" onClick={this.handleShowUnsignedTransaction}>\n          Show Unsigned Transaction\n        </Button>\n      </small>\n    );\n  };\n\n  handleShowUnsignedTransaction = () => {\n    this.setState({ showUnsignedTransaction: true });\n  };\n\n  handleHideUnsignedTransaction = () => {\n    this.setState({ showUnsignedTransaction: false });\n  };\n}\n\nUnsignedTransaction.propTypes = {\n  unsignedTransaction: PropTypes.shape({\n    toHex: PropTypes.func,\n  }).isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    unsignedTransaction: state.spend.transaction.unsignedTransaction,\n  };\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UnsignedTransaction);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\n// Components\nimport { Box, Button } from \"@material-ui/core\";\nimport Transaction from \"../ScriptExplorer/Transaction\";\nimport ExtendedPublicKeySelector from \"./ExtendedPublicKeySelector\";\n\n// Actions\nimport {\n  finalizeOutputs as finalizeOutputsAction,\n  setRequiredSigners as setRequiredSignersAction,\n  resetTransaction as resetTransactionAction,\n  setSpendStep as setSpendStepAction,\n  SPEND_STEP_CREATE,\n} from \"../../actions/transactionActions\";\nimport {\n  updateTxSlices as updateTxSlicesAction,\n  resetWalletView as resetWalletViewAction,\n} from \"../../actions/walletActions\";\nimport UnsignedTransaction from \"../UnsignedTransaction\";\n\nclass WalletSign extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      spent: false,\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { txid, changeSlice, updateTxSlices } = props;\n    if (txid.length && !state.spent) {\n      updateTxSlices(changeSlice);\n      return {\n        spent: true,\n      };\n    }\n    return null;\n  }\n\n  componentWillUnmount() {\n    const { resetTransaction } = this.props;\n    const { spent } = this.state;\n\n    // reset the transaction when we leave the view if tx is spent\n    if (spent) {\n      resetTransaction();\n    }\n  }\n\n  renderKeySelectors = () => {\n    const { requiredSigners } = this.props;\n    const keySelectors = [];\n    for (\n      let keySelectorNum = 1;\n      keySelectorNum <= requiredSigners;\n      keySelectorNum += 1\n    ) {\n      keySelectors.push(\n        <Box key={keySelectorNum} mt={2}>\n          <ExtendedPublicKeySelector number={keySelectorNum} />\n        </Box>\n      );\n    }\n    return keySelectors;\n  };\n\n  signaturesFinalized = () => {\n    const { signatureImporters } = this.props;\n    return (\n      Object.values(signatureImporters).length > 0 &&\n      Object.values(signatureImporters).every(\n        (signatureImporter) => signatureImporter.finalized\n      )\n    );\n  };\n\n  handleReturn = () => {\n    const { resetTransaction, resetWalletView } = this.props;\n    resetTransaction();\n    resetWalletView();\n  };\n\n  handleCancel = (event) => {\n    const {\n      finalizeOutputs,\n      requiredSigners,\n      setRequiredSigners,\n      setSpendStep,\n    } = this.props;\n    event.preventDefault();\n    setRequiredSigners(requiredSigners); // this will generate signature importers\n    finalizeOutputs(false);\n    setSpendStep(SPEND_STEP_CREATE);\n  };\n\n  render = () => {\n    const { spent } = this.state;\n    return (\n      <Box>\n        <Button href=\"#\" onClick={this.handleCancel}>\n          Edit Transaction\n        </Button>\n        <Box mt={2}>\n          <UnsignedTransaction />\n        </Box>\n        {this.renderKeySelectors()}\n\n        <Box mt={2}>\n          <Button\n            href=\"#\"\n            onClick={(e) => {\n              e.preventDefault();\n              this.handleReturn();\n            }}\n          >\n            Abandon Transaction\n          </Button>\n        </Box>\n\n        {this.signaturesFinalized() && (\n          <Box mt={2}>\n            <Transaction />\n          </Box>\n        )}\n\n        {spent && (\n          <Box mt={2}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handleReturn}\n            >\n              Return\n            </Button>\n          </Box>\n        )}\n      </Box>\n    );\n  };\n}\n\nWalletSign.propTypes = {\n  changeSlice: PropTypes.shape({\n    bip32Path: PropTypes.string,\n    multisig: PropTypes.shape({\n      address: PropTypes.string,\n    }),\n  }).isRequired,\n  finalizeOutputs: PropTypes.func.isRequired,\n  requiredSigners: PropTypes.number.isRequired,\n  resetTransaction: PropTypes.func.isRequired,\n  resetWalletView: PropTypes.func.isRequired,\n  setRequiredSigners: PropTypes.func.isRequired,\n  setSpendStep: PropTypes.func.isRequired,\n  signatureImporters: PropTypes.shape({}).isRequired,\n  updateTxSlices: PropTypes.func.isRequired,\n  txid: PropTypes.string.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.wallet,\n    ...state.spend,\n    ...state.quorum,\n    txid: state.spend.transaction.txid,\n    requiredSigners: state.spend.transaction.requiredSigners,\n    totalSigners: state.spend.transaction.totalSigners,\n    changeSlice: state.wallet.change.nextNode,\n  };\n}\n\nconst mapDispatchToProps = {\n  finalizeOutputs: finalizeOutputsAction,\n  setRequiredSigners: setRequiredSignersAction,\n  updateTxSlices: updateTxSlicesAction,\n  resetTransaction: resetTransactionAction,\n  resetWalletView: resetWalletViewAction,\n  setSpendStep: setSpendStepAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletSign);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport BigNumber from \"bignumber.js\";\nimport { satoshisToBitcoins } from \"unchained-bitcoin\";\n\n// Components\nimport {\n  Button,\n  Box,\n  Table,\n  TableHead,\n  TableBody,\n  TableFooter,\n  TableRow,\n  TableCell,\n  Grid,\n} from \"@material-ui/core\";\nimport UnsignedTransaction from \"../UnsignedTransaction\";\n\nclass TransactionPreview extends React.Component {\n  render = () => {\n    const {\n      feeRate,\n      fee,\n      inputsTotalSats,\n      editTransaction,\n      handleSignTransaction,\n    } = this.props;\n\n    return (\n      <Box>\n        <h2>Transaction Preview</h2>\n        <UnsignedTransaction />\n        <h3>Inputs</h3>\n        {this.renderInputs()}\n        <h3>Outputs</h3>\n        {this.renderOutputs()}\n        <Grid container>\n          <Grid item xs={4}>\n            <h3>Fee</h3>\n            <div>{BigNumber(fee).toFixed(8)} BTC </div>\n          </Grid>\n          <Grid item xs={4}>\n            <h3>Fee Rate</h3>\n            <div>{feeRate} sats/byte</div>\n          </Grid>\n          <Grid item xs={4}>\n            <h3>Total</h3>\n            <div>\n              {satoshisToBitcoins(BigNumber(inputsTotalSats || 0)).toFixed(8)}{\" \"}\n              BTC\n            </div>\n          </Grid>\n        </Grid>\n        <Box mt={2}>\n          <Grid container spacing={2}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  editTransaction();\n                }}\n              >\n                Edit Transaction\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleSignTransaction}\n              >\n                Sign Transaction\n              </Button>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    );\n  };\n\n  renderAddresses = () => {\n    const addressWithUtxos = this.mapAddresses();\n    return Object.keys(addressWithUtxos).map((address) => {\n      return (\n        <TableRow key={address}>\n          <TableCell>\n            <code>{address}</code>\n          </TableCell>\n          <TableCell>{addressWithUtxos[address].utxos.length}</TableCell>\n          <TableCell>\n            <code>{addressWithUtxos[address].amount.toFixed(8)}</code>\n          </TableCell>\n        </TableRow>\n      );\n    });\n  };\n\n  renderOutputAddresses = () => {\n    const { changeAddress, outputs } = this.props;\n\n    return outputs.map((output) => {\n      return (\n        <TableRow key={output.address}>\n          <TableCell>\n            <code>{output.address}</code>\n            {output.address === changeAddress ? (\n              <small>&nbsp;(change)</small>\n            ) : (\n              \"\"\n            )}\n          </TableCell>\n          <TableCell>\n            <code>{BigNumber(output.amount).toFixed(8)}</code>\n          </TableCell>\n        </TableRow>\n      );\n    });\n  };\n\n  renderOutputs = () => {\n    return (\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Address</TableCell>\n            <TableCell>Amount (BTC)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>{this.renderOutputAddresses()}</TableBody>\n        <TableFooter>\n          <TableRow>\n            <TableCell>TOTAL:</TableCell>\n            <TableCell>{this.outputsTotal()}</TableCell>\n          </TableRow>\n        </TableFooter>\n      </Table>\n    );\n  };\n\n  renderInputs = () => {\n    const { inputsTotalSats } = this.props;\n\n    return (\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Address</TableCell>\n            <TableCell>UTXO count</TableCell>\n            <TableCell>Amount (BTC)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>{this.renderAddresses()}</TableBody>\n        <TableFooter>\n          <TableRow>\n            <TableCell colSpan={2}>TOTAL:</TableCell>\n            <TableCell>\n              {satoshisToBitcoins(inputsTotalSats).toString()}\n            </TableCell>\n          </TableRow>\n        </TableFooter>\n      </Table>\n    );\n  };\n\n  mapAddresses = () => {\n    const { inputs } = this.props;\n    return inputs.reduce((mapped, input) => {\n      const mappedAddresses = mapped;\n      const { confirmed, txid, index, amount } = input;\n\n      mappedAddresses[input.multisig.address] = mapped[\n        input.multisig.address\n      ] || {\n        amount: BigNumber(0),\n        utxos: [],\n      };\n      mappedAddresses[input.multisig.address].utxos.push({\n        confirmed,\n        txid,\n        index,\n        amount,\n      });\n      mappedAddresses[input.multisig.address].amount = mapped[\n        input.multisig.address\n      ].amount.plus(BigNumber(input.amount));\n      return mappedAddresses;\n    }, {});\n  };\n\n  outputsTotal = () => {\n    const { outputs } = this.props;\n    return satoshisToBitcoins(\n      outputs.reduce(\n        (total, output) => total.plus(BigNumber(output.amountSats || 0)),\n        BigNumber(0)\n      )\n    ).toString();\n  };\n}\n\nTransactionPreview.propTypes = {\n  changeAddress: PropTypes.string.isRequired,\n  editTransaction: PropTypes.func.isRequired,\n  fee: PropTypes.string.isRequired,\n  feeRate: PropTypes.string.isRequired,\n  inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  inputsTotalSats: PropTypes.shape({}).isRequired,\n  outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  handleSignTransaction: PropTypes.func.isRequired,\n};\n\nexport default TransactionPreview;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport BigNumber from \"bignumber.js\";\n\n// Actions\nimport {\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Switch,\n  FormControlLabel,\n  Button,\n} from \"@material-ui/core\";\n\nimport {\n  updateDepositSliceAction,\n  updateChangeSliceAction,\n  resetNodesSpend as resetNodesSpendAction,\n  autoSelectCoins as autoSelectCoinsAction,\n} from \"../../actions/walletActions\";\nimport {\n  setInputs as setInputsAction,\n  setFeeRate as setFeeRateAction,\n  addOutput,\n  setOutputAddress,\n  updateAutoSpendAction,\n  setChangeAddressAction,\n  finalizeOutputs as finalizeOutputsAction,\n  SPEND_STEP_CREATE,\n  SPEND_STEP_PREVIEW,\n  SPEND_STEP_SIGN,\n  setSpendStep as setSpendStepAction,\n  deleteChangeOutput as deleteChangeOutputAction,\n} from \"../../actions/transactionActions\";\nimport { naiveCoinSelection } from \"../../utils\";\n\n// Components\nimport NodeSet from \"./NodeSet\";\nimport OutputsForm from \"../ScriptExplorer/OutputsForm\";\nimport WalletSign from \"./WalletSign\";\nimport TransactionPreview from \"./TransactionPreview\";\nimport { bigNumberPropTypes } from \"../../proptypes/utils\";\n\nclass WalletSpend extends React.Component {\n  outputsAmount = new BigNumber(0);\n\n  coinSelection = naiveCoinSelection;\n\n  feeAmount = new BigNumber(0);\n\n  componentDidUpdate = (prevProps) => {\n    const { finalizedOutputs } = this.props;\n    if (finalizedOutputs && !prevProps.finalizedOutputs) {\n      this.showPreview();\n    }\n  };\n\n  previewDisabled = () => {\n    const {\n      finalizedOutputs,\n      outputs,\n      feeRateError,\n      feeError,\n      inputs,\n      balanceError,\n      autoSpend,\n    } = this.props;\n\n    if (inputs.length === 0 && !autoSpend) return true;\n    if (finalizedOutputs || feeRateError || feeError || balanceError) {\n      return true;\n    }\n    for (let i = 0; i < outputs.length; i += 1) {\n      const output = outputs[i];\n      if (\n        output.address === \"\" ||\n        output.amount === \"\" ||\n        output.addressError !== \"\" ||\n        output.amountError !== \"\"\n      ) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  showSignTransaction = () => {\n    const { setSpendStep } = this.props;\n    setSpendStep(SPEND_STEP_SIGN);\n  };\n\n  handleShowPreview = () => {\n    const { autoSelectCoins, autoSpend, finalizeOutputs } = this.props;\n    if (autoSpend) autoSelectCoins();\n    else finalizeOutputs(true);\n  };\n\n  showPreview = () => {\n    const { setSpendStep } = this.props;\n    setSpendStep(SPEND_STEP_PREVIEW);\n  };\n\n  showCreate = () => {\n    const {\n      finalizeOutputs,\n      setSpendStep,\n      resetNodesSpend,\n      autoSpend,\n      deleteChangeOutput,\n    } = this.props;\n    setSpendStep(SPEND_STEP_CREATE);\n    finalizeOutputs(false);\n\n    // for auto spend view, user doesn't have direct knowledge of\n    // input nodes and change. So when going back to edit a transaction\n    // we want to clear these from the state, since these are added automatically\n    // when going from output form to transaction preview\n    if (autoSpend) {\n      resetNodesSpend();\n      deleteChangeOutput();\n    }\n  };\n\n  handleSpendMode = (event) => {\n    const { updateAutoSpend, resetNodesSpend, deleteChangeOutput } = this.props;\n    updateAutoSpend(!event.target.checked);\n    updateAutoSpend(!event.target.checked);\n    resetNodesSpend();\n    deleteChangeOutput();\n  };\n\n  render() {\n    const {\n      autoSpend,\n      changeAddress,\n      updateNode,\n      addNode,\n      spendingStep,\n      fee,\n      feeRate,\n      inputs,\n      inputsTotalSats,\n      outputs,\n    } = this.props;\n\n    return (\n      <Card>\n        <CardContent>\n          <Grid container>\n            {spendingStep === SPEND_STEP_SIGN && (\n              <Grid item md={12}>\n                <Box>\n                  <WalletSign />\n                </Box>\n              </Grid>\n            )}\n            {spendingStep === SPEND_STEP_CREATE && (\n              <Grid item md={12}>\n                <Grid container direction=\"row-reverse\">\n                  <Box display=\"flex-end\">\n                    <Box p={1}>\n                      <FormControlLabel\n                        control={\n                          <Switch\n                            checked={!autoSpend}\n                            onChange={this.handleSpendMode}\n                          />\n                        }\n                        label=\"Manual\"\n                      />\n                    </Box>\n                  </Box>\n                </Grid>\n                <Box component=\"div\" display={autoSpend ? \"none\" : \"block\"}>\n                  <NodeSet addNode={addNode} updateNode={updateNode} />\n                </Box>\n                <OutputsForm />\n                <Box mt={2}>\n                  <Button\n                    onClick={this.handleShowPreview}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={this.previewDisabled()}\n                  >\n                    Preview Transaction\n                  </Button>\n                </Box>\n              </Grid>\n            )}\n            {spendingStep === SPEND_STEP_PREVIEW && (\n              <Grid item md={12}>\n                <Box mt={3}>\n                  <TransactionPreview\n                    changeAddress={changeAddress}\n                    editTransaction={this.showCreate}\n                    fee={fee}\n                    feeRate={feeRate}\n                    inputs={inputs}\n                    inputsTotalSats={inputsTotalSats}\n                    outputs={outputs}\n                    handleSignTransaction={() => this.showSignTransaction()}\n                  />\n                </Box>\n              </Grid>\n            )}\n          </Grid>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nWalletSpend.propTypes = {\n  addNode: PropTypes.func.isRequired,\n  autoSpend: PropTypes.bool,\n  autoSelectCoins: PropTypes.func.isRequired,\n  balanceError: PropTypes.string,\n  changeNode: PropTypes.shape({\n    multisig: PropTypes.shape({\n      address: PropTypes.string,\n    }),\n  }).isRequired,\n  changeNodes: PropTypes.shape({}),\n  changeAddress: PropTypes.string.isRequired,\n  deleteChangeOutput: PropTypes.func.isRequired,\n  depositNodes: PropTypes.shape({}),\n  fee: PropTypes.string.isRequired,\n  feeError: PropTypes.string,\n  feeRate: PropTypes.string.isRequired,\n  feeRateError: PropTypes.string,\n  finalizeOutputs: PropTypes.func.isRequired,\n  finalizedOutputs: PropTypes.bool,\n  inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  inputsTotalSats: PropTypes.shape(bigNumberPropTypes).isRequired,\n  outputs: PropTypes.arrayOf(\n    PropTypes.shape({\n      address: PropTypes.string,\n      amount: PropTypes.string,\n      addressError: PropTypes.string,\n      amountError: PropTypes.string,\n    })\n  ).isRequired,\n  resetNodesSpend: PropTypes.func.isRequired,\n  setSpendStep: PropTypes.func.isRequired,\n  spendingStep: PropTypes.number,\n  updateAutoSpend: PropTypes.func.isRequired,\n  updateNode: PropTypes.func.isRequired,\n};\n\nWalletSpend.defaultProps = {\n  autoSpend: false,\n  balanceError: null,\n  changeNodes: {},\n  depositNodes: {},\n  finalizedOutputs: false,\n  feeError: null,\n  feeRateError: null,\n  spendingStep: 0,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.spend.transaction,\n    changeNodes: state.wallet.change.nodes,\n    changeNode: state.wallet.change.nextNode,\n    depositNodes: state.wallet.deposits.nodes,\n    autoSpend: state.spend.transaction.autoSpend,\n  };\n}\n\nconst mapDispatchToProps = {\n  autoSelectCoins: autoSelectCoinsAction,\n  deleteChangeOutput: deleteChangeOutputAction,\n  updateAutoSpend: updateAutoSpendAction,\n  setInputs: setInputsAction,\n  updateChangeSlice: updateChangeSliceAction,\n  updateDepositSlice: updateDepositSliceAction,\n  setAddress: setOutputAddress,\n  resetNodesSpend: resetNodesSpendAction,\n  setFeeRate: setFeeRateAction,\n  addOutput,\n  finalizeOutputs: finalizeOutputsAction,\n  setChangeAddress: setChangeAddressAction,\n  setSpendStep: setSpendStepAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletSpend);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport {\n  Box,\n  Card,\n  CardContent,\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Grid,\n} from \"@material-ui/core\";\nimport {\n  getSlicesWithBalance,\n  getZeroBalanceSlices,\n  getSpentSlices,\n} from \"../../selectors/wallet\";\nimport { slicePropTypes, clientPropTypes } from \"../../proptypes\";\n\n// Components\nimport SlicesTable from \"./SlicesTable\";\n\nclass SlicesTableContainer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterIncludeSpent: false,\n      filterIncludeZeroBalance: false,\n      displaySlices: props.slicesWithBalance.length\n        ? [...props.slicesWithBalance]\n        : [],\n    };\n  }\n\n  componentDidUpdate(newProps) {\n    const { slicesWithBalance } = this.props;\n    if (newProps.slicesWithBalance.length !== slicesWithBalance.length) {\n      this.setDisplaySlices();\n    }\n  }\n\n  setDisplaySlices() {\n    const { slicesWithBalance, zeroBalanceSlices, spentSlices } = this.props;\n    const { filterIncludeSpent, filterIncludeZeroBalance } = this.state;\n    const newDisplaySlices = [...slicesWithBalance];\n    if (filterIncludeSpent) {\n      newDisplaySlices.push(...spentSlices);\n    }\n    if (filterIncludeZeroBalance) {\n      newDisplaySlices.push(...zeroBalanceSlices);\n    }\n    this.setState({ displaySlices: newDisplaySlices });\n  }\n\n  filterAddresses = (event, checked) => {\n    this.setState({ [event.target.value]: checked }, () =>\n      this.setDisplaySlices()\n    );\n  };\n\n  render() {\n    const {\n      filterIncludeSpent,\n      filterIncludeZeroBalance,\n      displaySlices,\n    } = this.state;\n    const { client, network } = this.props;\n\n    return (\n      <Card>\n        <CardContent>\n          <Grid container direction=\"column\">\n            <Grid item>\n              <SlicesTable\n                slices={displaySlices}\n                client={client}\n                network={network}\n                paging\n              />\n            </Grid>\n            <Grid item>\n              <FormGroup row>\n                <FormLabel component=\"h2\">\n                  <Box mr={3}>Show Additional</Box>\n                </FormLabel>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={filterIncludeSpent}\n                      value=\"filterIncludeSpent\"\n                      onChange={this.filterAddresses}\n                    />\n                  }\n                  label=\"Spent Addresses\"\n                />\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={filterIncludeZeroBalance}\n                      value=\"filterIncludeZeroBalance\"\n                      onChange={this.filterAddresses}\n                    />\n                  }\n                  label=\"Zero Balance\"\n                />\n              </FormGroup>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nSlicesTableContainer.propTypes = {\n  slicesWithBalance: PropTypes.arrayOf(PropTypes.shape(slicePropTypes))\n    .isRequired,\n  zeroBalanceSlices: PropTypes.arrayOf(PropTypes.shape(slicePropTypes))\n    .isRequired,\n  spentSlices: PropTypes.arrayOf(PropTypes.shape(slicePropTypes)).isRequired,\n  client: PropTypes.shape(clientPropTypes).isRequired,\n  network: PropTypes.string.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    slicesWithBalance: getSlicesWithBalance(state),\n    zeroBalanceSlices: getZeroBalanceSlices(state),\n    spentSlices: getSpentSlices(state),\n    walletMode: state.wallet.common.walletMode,\n    client: state.client,\n    network: state.settings.network,\n  };\n}\n\nexport default connect(mapStateToProps)(SlicesTableContainer);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Tabs, Tab, Box, LinearProgress } from \"@material-ui/core\";\nimport {\n  setWalletModeAction as setWalletModeActionImport,\n  initialLoadComplete as initialLoadCompleteAction,\n  WALLET_MODES,\n} from \"../../actions/walletActions\";\nimport { setRequiredSigners as setRequiredSignersAction } from \"../../actions/transactionActions\";\nimport { MAX_FETCH_UTXOS_ERRORS, MAX_TRAILING_EMPTY_NODES } from \"./constants\";\n\n// Components\n\nimport WalletDeposit from \"./WalletDeposit\";\nimport WalletSpend from \"./WalletSpend\";\nimport { SlicesTableContainer } from \"../Slices\";\n\nclass WalletControl extends React.Component {\n  scrollRef = React.createRef();\n\n  componentDidMount = () => {\n    this.scrollRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  render = () => {\n    const { walletMode } = this.props;\n    return (\n      <div>\n        <Tabs\n          ref={this.scrollRef}\n          value={walletMode}\n          onChange={this.handleModeChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n        >\n          <Tab label=\"Addresses\" value={WALLET_MODES.VIEW} />\n          <Tab label=\"Receive\" value={WALLET_MODES.DEPOSIT} />\n          <Tab label=\"Send\" value={WALLET_MODES.SPEND} />\n        </Tabs>\n        <Box mt={2}>{this.renderModeComponent()}</Box>\n      </div>\n    );\n  };\n\n  renderModeComponent = () => {\n    const { walletMode, addNode, updateNode } = this.props;\n    if (this.addressesAreLoaded()) {\n      if (walletMode === WALLET_MODES.DEPOSIT) return <WalletDeposit />;\n      if (walletMode === WALLET_MODES.SPEND)\n        return <WalletSpend addNode={addNode} updateNode={updateNode} />;\n      if (walletMode === WALLET_MODES.VIEW) return <SlicesTableContainer />;\n      return \"\";\n    }\n    const progress = this.progress();\n    return <LinearProgress variant=\"determinate\" value={progress} />;\n  };\n\n  progress = () => {\n    const { change, deposits } = this.props;\n    return (\n      (100 * (deposits.trailingEmptyNodes + change.trailingEmptyNodes)) /\n      (2 * MAX_TRAILING_EMPTY_NODES)\n    );\n  };\n\n  addressesAreLoaded = () => {\n    const { change, deposits, nodesLoaded, initialLoadComplete } = this.props;\n    if (nodesLoaded) return true;\n    if (\n      (deposits.trailingEmptyNodes >= MAX_TRAILING_EMPTY_NODES ||\n        deposits.fetchUTXOsErrors >= MAX_FETCH_UTXOS_ERRORS) &&\n      (change.trailingEmptyNodes >= MAX_TRAILING_EMPTY_NODES ||\n        change.fetchUTXOsErrors >= MAX_FETCH_UTXOS_ERRORS)\n    ) {\n      initialLoadComplete();\n      return true;\n    }\n    return false;\n  };\n\n  handleModeChange = (_event, mode) => {\n    const {\n      setMode,\n      requiredSigners,\n      setRequiredSigners,\n      signatureImporters,\n    } = this.props;\n    if (\n      mode === WALLET_MODES.SPEND &&\n      Object.keys(signatureImporters).length !== requiredSigners\n    ) {\n      setRequiredSigners(requiredSigners); // this will generate signature importers\n    }\n    setMode(mode);\n  };\n}\n\nWalletControl.propTypes = {\n  addNode: PropTypes.func.isRequired,\n  change: PropTypes.shape({\n    trailingEmptyNodes: PropTypes.number,\n    fetchUTXOsErrors: PropTypes.number,\n  }).isRequired,\n  deposits: PropTypes.shape({\n    trailingEmptyNodes: PropTypes.number,\n    fetchUTXOsErrors: PropTypes.number,\n  }).isRequired,\n  initialLoadComplete: PropTypes.func.isRequired,\n  nodesLoaded: PropTypes.bool.isRequired,\n  requiredSigners: PropTypes.number.isRequired,\n  setMode: PropTypes.func.isRequired,\n  setRequiredSigners: PropTypes.func.isRequired,\n  signatureImporters: PropTypes.shape({}).isRequired,\n  updateNode: PropTypes.func.isRequired,\n  walletMode: PropTypes.number.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.wallet,\n    ...state.wallet.common,\n    requiredSigners: state.spend.transaction.requiredSigners,\n    signatureImporters: state.spend.signatureImporters,\n  };\n}\n\nconst mapDispatchToProps = {\n  setMode: setWalletModeActionImport,\n  setRequiredSigners: setRequiredSignersAction,\n  initialLoadComplete: initialLoadCompleteAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletControl);\n","export const CARAVAN_CONFIG = \"caravan_config\";\nexport const MAX_TRAILING_EMPTY_NODES = 20;\nexport const MAX_FETCH_UTXOS_ERRORS = 5;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Grid } from \"@material-ui/core\";\n\nimport { CARAVAN_CONFIG } from \"./constants\";\n\nconst WalletConfigInteractionButtons = ({ onClearFn, onDownloadFn }) => {\n  const handleClearClick = (e) => {\n    e.preventDefault();\n    if (sessionStorage) sessionStorage.removeItem(CARAVAN_CONFIG);\n    onClearFn(e);\n  };\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item>\n        <Button variant=\"contained\" color=\"primary\" onClick={onDownloadFn}>\n          Download Wallet Details\n        </Button>\n      </Grid>\n      <Grid item>\n        <Button\n          onClick={(e) => handleClearClick(e)}\n          variant=\"contained\"\n          color=\"secondary\"\n        >\n          Clear Wallet\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nWalletConfigInteractionButtons.propTypes = {\n  onClearFn: PropTypes.func.isRequired,\n  onDownloadFn: PropTypes.func.isRequired,\n};\n\nexport default WalletConfigInteractionButtons;\n","import { wrappedNumberedActions } from \"./utils\";\n\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME =\n  \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME\";\nexport const RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH =\n  \"RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH =\n  \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD =\n  \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY =\n  \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED =\n  \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE =\n  \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE\";\n\nexport const {\n  setExtendedPublicKeyImporterName,\n  setExtendedPublicKeyImporterBIP32Path,\n  resetExtendedPublicKeyImporterBIP32Path,\n  setExtendedPublicKeyImporterMethod,\n  setExtendedPublicKeyImporterExtendedPublicKey,\n  setExtendedPublicKeyImporterFinalized,\n} = wrappedNumberedActions({\n  setExtendedPublicKeyImporterName: SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME,\n  resetExtendedPublicKeyImporterBIP32Path: RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setExtendedPublicKeyImporterBIP32Path: SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setExtendedPublicKeyImporterMethod: SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD,\n  setExtendedPublicKeyImporterExtendedPublicKey: SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY,\n  setExtendedPublicKeyImporterFinalized: SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED,\n});\n\nexport function setExtendedPublicKeyImporterVisible(value) {\n  return {\n    type: SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE,\n    value,\n  };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { debounce } from \"lodash\";\nimport {\n  deriveChildPublicKey,\n  generateMultisigFromPublicKeys,\n} from \"unchained-bitcoin\";\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardContent,\n  InputAdornment,\n  Grid,\n  TextField,\n  FormHelperText,\n  Typography,\n  Box,\n} from \"@material-ui/core\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport {\n  fetchAddressUTXOs,\n  getAddressStatus,\n  fetchFeeEstimate,\n} from \"../../blockchain\";\n\n// Components\nimport ClientPicker from \"../ClientPicker\";\nimport ConfirmWallet from \"./ConfirmWallet\";\nimport WalletControl from \"./WalletControl\";\nimport WalletConfigInteractionButtons from \"./WalletConfigInteractionButtons\";\n\n// Actions\nimport { setFrozen } from \"../../actions/settingsActions\";\nimport {\n  updateDepositSliceAction,\n  updateChangeSliceAction,\n  resetNodesFetchErrors as resetNodesFetchErrorsAction,\n  resetWallet as resetWalletAction,\n} from \"../../actions/walletActions\";\nimport { fetchSliceData as fetchSliceDataAction } from \"../../actions/braidActions\";\nimport { setExtendedPublicKeyImporterVisible } from \"../../actions/extendedPublicKeyImporterActions\";\nimport { setIsWallet as setIsWalletAction } from \"../../actions/transactionActions\";\nimport { wrappedActions } from \"../../actions/utils\";\nimport {\n  SET_CLIENT_PASSWORD,\n  SET_CLIENT_PASSWORD_ERROR,\n} from \"../../actions/clientActions\";\nimport { MAX_FETCH_UTXOS_ERRORS, MAX_TRAILING_EMPTY_NODES } from \"./constants\";\n\nclass WalletGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connectSuccess: false,\n      unknownClient: false,\n    };\n  }\n\n  componentDidMount() {\n    const {\n      refreshNodes,\n      common: { nodesLoaded },\n      setGenerating,\n    } = this.props;\n    this.debouncedTestConnection = debounce(\n      (args) => this.testConnection(args),\n      500,\n      { trailing: true, leading: false }\n    );\n    refreshNodes(this.refreshNodes);\n    if (nodesLoaded) setGenerating(true);\n  }\n\n  async componentDidUpdate(prevProps) {\n    const prevPassword = prevProps.client.password;\n    const {\n      setPasswordError,\n      network,\n      client,\n      common: { nodesLoaded },\n      setIsWallet,\n      configuring,\n    } = this.props;\n    const { unknownClient } = this.state;\n    if (client.type === \"unknown\" && prevProps.client.type === \"public\") {\n      this.setState({ unknownClient: true }); // eslint-disable-line react/no-did-update-set-state\n    } else if (configuring && client.type !== \"unknown\" && unknownClient) {\n      // re-initializes the state if we're in the configuring stage.\n      // catches situation where wallet is cleared and new one is added\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ unknownClient: false });\n    }\n    // if the password was updated\n    if (prevPassword !== client.password && client.password.length) {\n      // test the connection using the set password\n      // but only if the password field hasn't been changed for 500ms\n      this.debouncedTestConnection({ network, client, setPasswordError });\n    }\n\n    // make sure the spend view knows it's a wallet view once nodes\n    // are loaded\n    if (!prevProps.common.nodesLoaded && nodesLoaded) setIsWallet();\n  }\n\n  title = () => {\n    const { totalSigners, requiredSigners, addressType } = this.props;\n    return (\n      <span className=\"justify-content-between d-flex\">\n        Your {requiredSigners}\n        -of-\n        {totalSigners} {addressType} Multisig Wallet\n        <small className=\"text-muted\">{` Extended Public Keys: ${this.extendedPublicKeyCount()}/${totalSigners}`}</small>\n      </span>\n    );\n  };\n\n  testConnection = async ({ network, client, setPasswordError }, cb) => {\n    try {\n      await fetchFeeEstimate(network, client);\n      setPasswordError(\"\");\n      this.setState({ connectSuccess: true }, () => {\n        // if testConnection was passed a callback\n        // we call that after a successful test, which\n        // in this case generates the wallet\n        if (cb) setTimeout(cb, 750);\n      });\n    } catch (e) {\n      this.setState({ connectSuccess: false });\n      if (e.response && e.response.status === 401)\n        setPasswordError(\n          \"Unauthorized: Incorrect username and password combination\"\n        );\n      else setPasswordError(e.message);\n    }\n  };\n\n  extendedPublicKeyCount = () => {\n    const { extendedPublicKeyImporters } = this.props;\n    return Object.values(extendedPublicKeyImporters).filter(\n      (extendedPublicKeyImporter) => extendedPublicKeyImporter.finalized\n    ).length;\n  };\n\n  toggleImporters = (event) => {\n    event.preventDefault();\n    const {\n      setImportersVisible,\n      configuring,\n      resetWallet,\n      setGenerating,\n    } = this.props;\n\n    if (!configuring) {\n      setGenerating(false);\n      resetWallet();\n    }\n\n    setImportersVisible(!configuring);\n  };\n\n  generate = () => {\n    const {\n      setImportersVisible,\n      freeze,\n      setGenerating,\n      startingAddressIndex,\n    } = this.props;\n    const startingDepositBIP32Suffix = `m/0/${startingAddressIndex}`;\n    const startingChangeBIP32Suffix = `m/1/${startingAddressIndex}`;\n    freeze(true);\n    setImportersVisible(false);\n    setGenerating(true);\n    this.setState({ connectSuccess: false }, () => {\n      this.addNode(false, startingDepositBIP32Suffix, true);\n      this.addNode(true, startingChangeBIP32Suffix, true);\n    });\n  };\n\n  updateNode = (isChange, update) => {\n    const { updateChangeSlice, updateDepositSlice } = this.props;\n    const updater = isChange ? updateChangeSlice : updateDepositSlice;\n    updater(update);\n  };\n\n  addNode = async (isChange, bip32Path, attemptToKeepGenerating) => {\n    const multisigUpdates = await this.generateMultisig(\n      isChange,\n      bip32Path,\n      attemptToKeepGenerating\n    );\n    this.updateNode(isChange, { bip32Path, ...multisigUpdates });\n  };\n\n  generateMultisig = async (isChange, bip32Path, attemptToKeepGenerating) => {\n    const {\n      extendedPublicKeyImporters,\n      totalSigners,\n      network,\n      addressType,\n      requiredSigners,\n    } = this.props;\n    const publicKeys = [];\n    for (\n      let extendedPublicKeyImporterNumber = 1;\n      extendedPublicKeyImporterNumber <= totalSigners;\n      extendedPublicKeyImporterNumber += 1\n    ) {\n      const extendedPublicKeyImporter =\n        extendedPublicKeyImporters[extendedPublicKeyImporterNumber];\n\n      const publicKey = deriveChildPublicKey(\n        extendedPublicKeyImporter.extendedPublicKey,\n        bip32Path,\n        network\n      );\n      publicKeys.push(publicKey);\n    }\n    publicKeys.sort(); // BIP67\n\n    const multisig = generateMultisigFromPublicKeys(\n      network,\n      addressType,\n      requiredSigners,\n      ...publicKeys\n    );\n\n    const utxoUpdates = await this.fetchUTXOs(\n      isChange,\n      multisig,\n      attemptToKeepGenerating\n    );\n    return { multisig, ...utxoUpdates };\n  };\n\n  fetchUTXOs = async (isChange, multisig, attemptToKeepGenerating) => {\n    const { network, client } = this.props;\n    let addressStatus;\n    let updates = await fetchAddressUTXOs(multisig.address, network, client);\n\n    // only check for address status if there weren't any errors\n    // fetching the utxos for the address\n    if (updates && !updates.fetchUTXOsError.length)\n      addressStatus = await getAddressStatus(multisig.address, network, client);\n\n    if (addressStatus) {\n      updates = { ...updates, addressUsed: addressStatus.used };\n    }\n\n    if (attemptToKeepGenerating) {\n      setTimeout(() => this.generateNextNodeIfNecessary(isChange));\n    }\n    return updates;\n  };\n\n  generateNextNodeIfNecessary = (isChange) => {\n    const { change, deposits } = this.props;\n    const { trailingEmptyNodes } = isChange ? change : deposits;\n    const { fetchUTXOsErrors } = isChange ? change : deposits;\n    const allBIP32Paths = Object.keys((isChange ? change : deposits).nodes);\n    if (\n      trailingEmptyNodes >= MAX_TRAILING_EMPTY_NODES ||\n      fetchUTXOsErrors >= MAX_FETCH_UTXOS_ERRORS\n    ) {\n      return;\n    }\n\n    allBIP32Paths.sort((p1, p2) => {\n      const p1Segments = (p1 || \"\").split(\"/\");\n      const p2Segments = (p2 || \"\").split(\"/\");\n      const p1Index = parseInt(p1Segments[2], 10);\n      const p2Index = parseInt(p2Segments[2], 10);\n      return p1Index - p2Index;\n    });\n    const pathSegments = (allBIP32Paths[allBIP32Paths.length - 1] || \"\").split(\n      \"/\"\n    ); // m, 0, 1\n    const maxIndex = parseInt(pathSegments[2], 10);\n    const nextBIP32Path = `m/${pathSegments[1]}/${maxIndex + 1}`;\n    // Similar to above, we wrap the call to add the next node with\n    // setTimeout with a timeout of zero to allow React time to\n    // render.\n    setTimeout(() => this.addNode(isChange, nextBIP32Path, true));\n  };\n\n  refreshNodes = async () => {\n    const { change, deposits, resetNodesFetchErrors } = this.props;\n    const allNodes = Object.values(deposits.nodes).concat(\n      Object.values(change.nodes)\n    );\n    const previousFetchErrors = Math.max(\n      change.fetchUTXOsErrors,\n      deposits.fetchUTXOsErrors\n    );\n\n    resetNodesFetchErrors();\n    await Promise.all(\n      allNodes.map(async (node) => {\n        const utxos = await this.fetchUTXOs(node.change, node.multisig);\n        this.updateNode(node.change, { bip32Path: node.bip32Path, ...utxos });\n      })\n    );\n\n    if (previousFetchErrors >= MAX_FETCH_UTXOS_ERRORS) {\n      const currentFetchErrors = Math.max(\n        change.fetchUTXOsErrors,\n        deposits.fetchUTXOsErrors\n      );\n      if (currentFetchErrors < 5) {\n        // eslint-disable-next-line no-console\n        console.log(\"we had errors but now looks good, try to build more\");\n      }\n    }\n  };\n\n  async handlePasswordEnter(event) {\n    event.preventDefault();\n    this.debouncedTestConnection.cancel();\n    await this.testConnection(this.props, this.generate);\n  }\n\n  async handlePasswordChange(event) {\n    event.preventDefault();\n    const { setPassword, setPasswordError } = this.props;\n    const password = event.target.value;\n    this.setState({ connectSuccess: false }, () => {\n      setPassword(password);\n      setPasswordError(\"\");\n    });\n  }\n\n  body() {\n    const {\n      totalSigners,\n      configuring,\n      downloadWalletDetails,\n      client,\n      generating,\n    } = this.props;\n    const { connectSuccess, unknownClient } = this.state;\n    if (this.extendedPublicKeyCount() === totalSigners) {\n      if (generating && !configuring) {\n        return (\n          <WalletControl addNode={this.addNode} updateNode={this.updateNode} />\n        );\n      }\n      return (\n        <Card>\n          <CardHeader title={this.title()} />\n          <CardContent>\n            <Button href=\"#\" onClick={this.toggleImporters}>\n              {configuring ? \"Hide Key Selection\" : \"Edit Details\"}\n            </Button>\n            <ConfirmWallet />\n            <p>\n              You have imported all&nbsp;\n              {totalSigners} extended public keys. You will need to save this\n              information.\n            </p>\n            <WalletConfigInteractionButtons\n              onClearFn={(e) => this.toggleImporters(e)}\n              onDownloadFn={downloadWalletDetails}\n            />\n            {unknownClient && (\n              <Box my={5}>\n                <Typography variant=\"subtitle1\">\n                  This config does not contain client information. Please choose\n                  a client to connect to before importing your wallet.\n                </Typography>\n                <ClientPicker />\n              </Box>\n            )}\n            {client.type === \"private\" && !unknownClient && (\n              <Box my={5}>\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle1\">\n                      This config uses a private client. Please enter password\n                      if not set.\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <TextField\n                      id=\"client-username\"\n                      label=\"Username\"\n                      defaultValue={client.username}\n                      InputProps={{\n                        readOnly: true,\n                        disabled: true,\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <AccountCircleIcon />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n                  </Grid>\n                  <Grid item md={4} xs={10}>\n                    <form onSubmit={(event) => this.handlePasswordEnter(event)}>\n                      <TextField\n                        id=\"bitcoind-password\"\n                        fullWidth\n                        type=\"password\"\n                        label=\"Password\"\n                        placeholder=\"Enter bitcoind password\"\n                        value={client.password}\n                        onChange={(event) => this.handlePasswordChange(event)}\n                        error={client.passwordError.length > 0}\n                        helperText={client.passwordError}\n                      />\n                      {connectSuccess && (\n                        <FormHelperText>\n                          Connection confirmed with password!\n                        </FormHelperText>\n                      )}\n                    </form>\n                  </Grid>\n                </Grid>\n              </Box>\n            )}\n            <p>\n              Please confirm that the above information is correct and you wish\n              to generate your wallet.\n            </p>\n            <Button\n              id=\"confirm-wallet\"\n              type=\"button\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.generate}\n              disabled={\n                (client.type === \"private\" && !connectSuccess) ||\n                client.type === \"unknown\"\n              }\n            >\n              Confirm\n            </Button>\n          </CardContent>\n        </Card>\n      );\n    }\n    return (\n      <p>\n        {`Once you have imported all ${totalSigners} extended public keys, `}\n        {\"your wallet will be generated here.\"}\n      </p>\n    );\n  }\n\n  render() {\n    return <div>{this.body()}</div>;\n  }\n}\n\nWalletGenerator.propTypes = {\n  network: PropTypes.string.isRequired,\n  addressType: PropTypes.string.isRequired,\n  startingAddressIndex: PropTypes.number.isRequired,\n  client: PropTypes.shape({\n    password: PropTypes.string,\n    passwordError: PropTypes.string,\n    type: PropTypes.string,\n    username: PropTypes.string,\n  }).isRequired,\n  change: PropTypes.shape({\n    nodes: PropTypes.shape({}),\n    fetchUTXOsErrors: PropTypes.number,\n  }).isRequired,\n  deposits: PropTypes.shape({\n    nodes: PropTypes.shape({}),\n    fetchUTXOsErrors: PropTypes.number,\n  }).isRequired,\n  configuring: PropTypes.bool.isRequired,\n  common: PropTypes.shape({\n    nodesLoaded: PropTypes.bool,\n  }).isRequired,\n  downloadWalletDetails: PropTypes.func.isRequired,\n  extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n  setGenerating: PropTypes.func.isRequired,\n  generating: PropTypes.bool.isRequired,\n  totalSigners: PropTypes.number.isRequired,\n  requiredSigners: PropTypes.number.isRequired,\n  freeze: PropTypes.func.isRequired,\n  updateDepositSlice: PropTypes.func.isRequired,\n  updateChangeSlice: PropTypes.func.isRequired,\n  refreshNodes: PropTypes.func.isRequired,\n  resetNodesFetchErrors: PropTypes.func.isRequired,\n  resetWallet: PropTypes.func.isRequired,\n  setImportersVisible: PropTypes.func.isRequired,\n  setIsWallet: PropTypes.func.isRequired,\n  setPassword: PropTypes.func.isRequired,\n  setPasswordError: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    ...{ client: state.client },\n    ...state.quorum,\n    ...state.wallet,\n    ...state.wallet.common,\n  };\n}\n\nconst mapDispatchToProps = {\n  freeze: setFrozen,\n  updateDepositSlice: updateDepositSliceAction,\n  updateChangeSlice: updateChangeSliceAction,\n  fetchSliceData: fetchSliceDataAction,\n  setImportersVisible: setExtendedPublicKeyImporterVisible,\n  setIsWallet: setIsWalletAction,\n  resetWallet: resetWalletAction,\n  resetNodesFetchErrors: resetNodesFetchErrorsAction,\n  ...wrappedActions({\n    setPassword: SET_CLIENT_PASSWORD,\n    setPasswordError: SET_CLIENT_PASSWORD_ERROR,\n  }),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletGenerator);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  validateExtendedPublicKey,\n  deriveChildExtendedPublicKey,\n} from \"unchained-bitcoin\";\n\n// Components\nimport {\n  Button,\n  TextField,\n  FormHelperText,\n  Box,\n  Grid,\n} from \"@material-ui/core\";\n\nconst DEFAULT_BIP32_PATH = \"m/0\";\n\nclass ExtendedPublicKeyExtendedPublicKeyImporter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: \"\",\n      extendedPublicKey: \"\",\n      extendedPublicKeyError: \"\",\n      bip32PathError: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    this.setBIP32PathToDefault();\n  };\n\n  render = () => {\n    const { extendedPublicKeyImporter } = this.props;\n    const {\n      error,\n      extendedPublicKey,\n      extendedPublicKeyError,\n      bip32PathError,\n    } = this.state;\n    return (\n      <div>\n        <Box mt={2}>\n          <TextField\n            fullWidth\n            name=\"extendedPublicKey\"\n            label=\"Extended Public Key\"\n            value={extendedPublicKey}\n            onChange={this.handleExtendedPublicKeyChange}\n            error={this.hasExtendedPublicKeyError()}\n            helperText={extendedPublicKeyError}\n          />\n        </Box>\n\n        <Box mt={2}>\n          <Grid container>\n            <Grid item md={10}>\n              <TextField\n                fullWidth\n                name=\"bip32Path\"\n                label=\"BIP32 Path (relative to xpub)\"\n                type=\"text\"\n                value={extendedPublicKeyImporter.bip32Path}\n                onChange={this.handleBIP32PathChange}\n                error={this.hasBIP32PathError()}\n                helperText={bip32PathError}\n              />\n              <FormHelperText>\n                Use the default value if you don&rsquo;t understand BIP32 paths.\n              </FormHelperText>\n            </Grid>\n            <Grid item md={2}>\n              {!this.bip32PathIsDefault() && (\n                <Button\n                  type=\"button\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  onClick={this.resetBIP32Path}\n                >\n                  Default\n                </Button>\n              )}\n            </Grid>\n          </Grid>\n          <Box mt={2}>\n            <Button\n              type=\"button\"\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              onClick={this.import}\n              disabled={extendedPublicKey === \"\" || this.hasError()}\n            >\n              Import Extended Public Key\n            </Button>\n          </Box>\n        </Box>\n        <FormHelperText className=\"text-danger\">{error}</FormHelperText>\n      </div>\n    );\n  };\n\n  import = () => {\n    const {\n      network,\n      extendedPublicKeyImporter,\n      validateAndSetExtendedPublicKey,\n    } = this.props;\n    const { extendedPublicKey } = this.state;\n    const childExtendedPublicKey = deriveChildExtendedPublicKey(\n      extendedPublicKey,\n      extendedPublicKeyImporter.bip32Path,\n      network\n    );\n    validateAndSetExtendedPublicKey(childExtendedPublicKey, (error) => {\n      this.setState({ error });\n    });\n  };\n\n  setBIP32PathToDefault = () => {\n    const { validateAndSetBIP32Path } = this.props;\n    validateAndSetBIP32Path(\n      DEFAULT_BIP32_PATH,\n      () => {},\n      () => {}\n    );\n  };\n\n  hasBIP32PathError = () => {\n    const { bip32PathError } = this.state;\n    return bip32PathError !== \"\";\n  };\n\n  hasExtendedPublicKeyError = () => {\n    const { extendedPublicKeyError } = this.state;\n    return extendedPublicKeyError !== \"\";\n  };\n\n  hasError = () => this.hasBIP32PathError() || this.hasExtendedPublicKeyError();\n\n  setBIP32PathError = (value) => {\n    this.setState({ bip32PathError: value });\n  };\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError, {\n      mode: \"unhardened\",\n    });\n  };\n\n  bip32PathIsDefault = () => {\n    const { extendedPublicKeyImporter } = this.props;\n    return extendedPublicKeyImporter.bip32Path === DEFAULT_BIP32_PATH;\n  };\n\n  resetBIP32Path = () => {\n    this.setBIP32PathToDefault();\n    this.setBIP32PathError(\"\");\n  };\n\n  handleExtendedPublicKeyChange = (event) => {\n    const { network, extendedPublicKeyImporters } = this.props;\n    const extendedPublicKey = event.target.value;\n    let extendedPublicKeyError = validateExtendedPublicKey(\n      extendedPublicKey,\n      network\n    );\n    if (extendedPublicKeyError === \"\") {\n      if (\n        Object.values(extendedPublicKeyImporters).find(\n          (extendedPublicKeyImporter) =>\n            extendedPublicKeyImporter.extendedPublicKey === extendedPublicKey\n        )\n      ) {\n        extendedPublicKeyError =\n          \"This extended public key has already been imported.\";\n      }\n    }\n    this.setState({ extendedPublicKey, extendedPublicKeyError });\n  };\n}\n\nExtendedPublicKeyExtendedPublicKeyImporter.propTypes = {\n  network: PropTypes.string.isRequired,\n  extendedPublicKeyImporter: PropTypes.shape({\n    bip32Path: PropTypes.string,\n  }).isRequired,\n  extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n  validateAndSetExtendedPublicKey: PropTypes.func.isRequired,\n  validateAndSetBIP32Path: PropTypes.func.isRequired,\n};\n\nexport default ExtendedPublicKeyExtendedPublicKeyImporter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Components\nimport { TextField, Box } from \"@material-ui/core\";\n\nclass TextExtendedPublicKeyImporter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: \"\",\n    };\n  }\n\n  render = () => {\n    const { extendedPublicKeyImporter } = this.props;\n    const { error } = this.state;\n    return (\n      <Box mt={2}>\n        <TextField\n          fullWidth\n          name=\"publicKey\"\n          label=\"Extended Public Key\"\n          value={extendedPublicKeyImporter.extendedPublicKey}\n          onChange={this.handleChange}\n          error={this.hasError()}\n          helperText={error}\n        />\n      </Box>\n    );\n  };\n\n  hasError = () => {\n    const { error } = this.state;\n    return error !== \"\";\n  };\n\n  setError = (value) => {\n    this.setState({ error: value });\n  };\n\n  handleChange = (event) => {\n    const { validateAndSetExtendedPublicKey } = this.props;\n    validateAndSetExtendedPublicKey(event.target.value, this.setError);\n  };\n}\nTextExtendedPublicKeyImporter.propTypes = {\n  extendedPublicKeyImporter: PropTypes.shape({\n    extendedPublicKey: PropTypes.string,\n  }).isRequired,\n  validateAndSetExtendedPublicKey: PropTypes.func.isRequired,\n};\n\nexport default TextExtendedPublicKeyImporter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { HermitExportExtendedPublicKey } from \"unchained-wallets\";\n\n// Components\nimport { FormGroup, FormHelperText } from \"@material-ui/core\";\n\nimport HermitReader from \"../Hermit/HermitReader\";\n\nclass HermitExtendedPublicKeyImporter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      extendedPublicKeyError: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    const { resetBIP32Path } = this.props;\n    resetBIP32Path();\n  };\n\n  interaction = () => {\n    const { network, extendedPublicKeyImporter } = this.props;\n    return new HermitExportExtendedPublicKey({\n      network,\n      bip32Path: extendedPublicKeyImporter.bip32Path,\n    });\n  };\n\n  render = () => {\n    const { disableChangeMethod } = this.props;\n    const { extendedPublicKeyError } = this.state;\n    return (\n      <FormGroup>\n        <HermitReader\n          startText=\"Import Extended Public Key\"\n          interaction={this.interaction()}\n          onStart={disableChangeMethod}\n          onSuccess={this.import}\n          onClear={this.onClear}\n        />\n        <FormHelperText className=\"text-danger\">\n          {extendedPublicKeyError}\n        </FormHelperText>\n      </FormGroup>\n    );\n  };\n\n  setError = (value) => {\n    this.setState({ extendedPublicKeyError: value });\n  };\n\n  import = (data) => {\n    const {\n      validateAndSetBIP32Path,\n      validateAndSetExtendedPublicKey,\n      enableChangeMethod,\n    } = this.props;\n    enableChangeMethod();\n    const { xpub, bip32Path } = data;\n    validateAndSetBIP32Path(\n      bip32Path,\n      () => {\n        validateAndSetExtendedPublicKey(xpub, this.setError);\n      },\n      this.setError\n    );\n  };\n\n  onClear = () => {\n    const { reset, enableChangeMethod } = this.props;\n    reset(true); // clear BIP32 path\n    this.setError(\"\");\n    enableChangeMethod();\n  };\n}\n\nHermitExtendedPublicKeyImporter.propTypes = {\n  enableChangeMethod: PropTypes.func.isRequired,\n  extendedPublicKeyImporter: PropTypes.shape({\n    bip32Path: PropTypes.string,\n  }).isRequired,\n  disableChangeMethod: PropTypes.func.isRequired,\n  network: PropTypes.string.isRequired,\n  reset: PropTypes.func.isRequired,\n  resetBIP32Path: PropTypes.func.isRequired,\n  validateAndSetBIP32Path: PropTypes.func.isRequired,\n  validateAndSetExtendedPublicKey: PropTypes.func.isRequired,\n};\n\nexport default HermitExtendedPublicKeyImporter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  UNSUPPORTED,\n  PENDING,\n  ACTIVE,\n  ERROR,\n  ExportExtendedPublicKey,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Button,\n  TextField,\n  FormHelperText,\n  Box,\n  Grid,\n} from \"@material-ui/core\";\n\nimport InteractionMessages from \"../InteractionMessages\";\n\nclass HardwareWalletExtendedPublicKeyImporter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      extendedPublicKeyError: \"\",\n      bip32PathError: \"\",\n      status: this.interaction().isSupported() ? PENDING : UNSUPPORTED,\n    };\n  }\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n  };\n\n  interaction = () => {\n    const { network, extendedPublicKeyImporter } = this.props;\n    return ExportExtendedPublicKey({\n      network,\n      keystore: extendedPublicKeyImporter.method,\n      bip32Path: extendedPublicKeyImporter.bip32Path,\n    });\n  };\n\n  render = () => {\n    const { extendedPublicKeyImporter } = this.props;\n    const { status, extendedPublicKeyError } = this.state;\n    const interaction = this.interaction();\n    if (status === UNSUPPORTED) {\n      return (\n        <FormHelperText className=\"text-danger\">\n          {interaction.messageTextFor({ status })}\n        </FormHelperText>\n      );\n    }\n    return (\n      <Box mt={2}>\n        <Grid container>\n          <Grid item md={6}>\n            <TextField\n              fullWidth\n              label=\"BIP32 Path\"\n              value={extendedPublicKeyImporter.bip32Path}\n              onChange={this.handleBIP32PathChange}\n              disabled={status !== PENDING}\n              error={this.hasBIP32PathError()}\n              helperText={this.bip32PathError()}\n            />\n          </Grid>\n          <Grid item md={6}>\n            {!this.bip32PathIsDefault() && (\n              <Button\n                type=\"button\"\n                variant=\"contained\"\n                size=\"small\"\n                onClick={this.resetBIP32Path}\n                disabled={status !== PENDING}\n              >\n                Default\n              </Button>\n            )}\n          </Grid>\n        </Grid>\n        <FormHelperText>\n          Use the default value if you don&rsquo;t understand BIP32 paths.\n        </FormHelperText>\n        <Box mt={2}>\n          <Button\n            type=\"button\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.import}\n            disabled={this.hasBIP32PathError() || status === ACTIVE}\n          >\n            Import Extended Public Key\n          </Button>\n        </Box>\n        <InteractionMessages\n          messages={interaction.messagesFor({ state: status })}\n          excludeCodes={[\"bip32\"]}\n        />\n        <FormHelperText className=\"text-danger\">\n          {extendedPublicKeyError}\n        </FormHelperText>\n      </Box>\n    );\n  };\n\n  import = async () => {\n    const {\n      validateAndSetExtendedPublicKey,\n      enableChangeMethod,\n      disableChangeMethod,\n    } = this.props;\n    disableChangeMethod();\n    this.setState({ extendedPublicKeyError: \"\", status: ACTIVE });\n    try {\n      const extendedPublicKey = await this.interaction().run();\n      validateAndSetExtendedPublicKey(extendedPublicKey, (error) => {\n        this.setState({ extendedPublicKeyError: error, status: PENDING });\n      });\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n      this.setState({ extendedPublicKeyError: e.message, status: PENDING });\n    }\n\n    enableChangeMethod();\n  };\n\n  hasBIP32PathError = () => {\n    const { bip32PathError, status } = this.state;\n    return (\n      bip32PathError !== \"\" ||\n      this.interaction().hasMessagesFor({\n        state: status,\n        level: ERROR,\n        code: \"bip32\",\n      })\n    );\n  };\n\n  bip32PathError = () => {\n    const { bip32PathError, status } = this.state;\n    if (bip32PathError !== \"\") {\n      return bip32PathError;\n    }\n    return this.interaction().messageTextFor({\n      state: status,\n      level: ERROR,\n      code: \"bip32\",\n    });\n  };\n\n  setBIP32PathError = (value) => {\n    this.setState({ bip32PathError: value });\n  };\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError);\n  };\n\n  bip32PathIsDefault = () => {\n    const { extendedPublicKeyImporter, defaultBIP32Path } = this.props;\n    return extendedPublicKeyImporter.bip32Path === defaultBIP32Path;\n  };\n\n  resetBIP32Path = () => {\n    const { resetBIP32Path } = this.props;\n    this.setBIP32PathError(\"\");\n    resetBIP32Path();\n  };\n}\n\nHardwareWalletExtendedPublicKeyImporter.propTypes = {\n  network: PropTypes.string.isRequired,\n  extendedPublicKeyImporter: PropTypes.shape({\n    bip32Path: PropTypes.string,\n    method: PropTypes.string,\n  }).isRequired,\n  validateAndSetExtendedPublicKey: PropTypes.func.isRequired,\n  validateAndSetBIP32Path: PropTypes.func.isRequired,\n  defaultBIP32Path: PropTypes.string.isRequired,\n  resetBIP32Path: PropTypes.func.isRequired,\n  enableChangeMethod: PropTypes.func.isRequired,\n  disableChangeMethod: PropTypes.func.isRequired,\n};\n\nexport default HardwareWalletExtendedPublicKeyImporter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Components\nimport {\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport { Warning } from \"@material-ui/icons\";\n\nconst Conflict = (props) => {\n  const { message } = props;\n\n  return (\n    <small>\n      <List>\n        <ListItem color=\"error.main\">\n          <ListItemIcon>\n            <Typography color=\"error\">\n              <Warning />\n            </Typography>\n          </ListItemIcon>\n          <ListItemText>\n            <Typography color=\"error\">{message}</Typography>\n          </ListItemText>\n        </ListItem>\n      </List>\n    </small>\n  );\n};\n\nConflict.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Conflict;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  validateBIP32Path,\n  convertExtendedPublicKey,\n  validateExtendedPublicKey,\n  NETWORKS,\n} from \"unchained-bitcoin\";\nimport { TREZOR, LEDGER, HERMIT } from \"unchained-wallets\";\n\n// Components\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  Button,\n  FormHelperText,\n  Box,\n  withStyles,\n} from \"@material-ui/core\";\nimport Copyable from \"../Copyable\";\nimport ExtendedPublicKeyExtendedPublicKeyImporter from \"./ExtendedPublicKeyExtendedPublicKeyImporter\";\nimport TextExtendedPublicKeyImporter from \"./TextExtendedPublicKeyImporter\";\nimport HermitExtendedPublicKeyImporter from \"./HermitExtendedPublicKeyImporter\";\nimport HardwareWalletExtendedPublicKeyImporter from \"./HardwareWalletExtendedPublicKeyImporter\";\nimport EditableName from \"../EditableName\";\nimport Conflict from \"../CreateAddress/Conflict\";\n\n// Actions\nimport {\n  setExtendedPublicKeyImporterName,\n  resetExtendedPublicKeyImporterBIP32Path,\n  setExtendedPublicKeyImporterBIP32Path,\n  setExtendedPublicKeyImporterMethod,\n  setExtendedPublicKeyImporterExtendedPublicKey,\n  setExtendedPublicKeyImporterFinalized,\n} from \"../../actions/extendedPublicKeyImporterActions\";\n\nconst XPUB = \"xpub\";\nconst TEXT = \"text\";\n\nconst useStyles = () => ({\n  xpub: {\n    lineHeight: \".8rem\",\n    overflowWrap: \"break-word\",\n  },\n});\n\nclass ExtendedPublicKeyImporter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disableChangeMethod: false,\n      conversionMessage: \"\",\n    };\n  }\n\n  title = () => {\n    const { number, extendedPublicKeyImporter, setName } = this.props;\n    return (\n      <EditableName\n        number={number}\n        name={extendedPublicKeyImporter.name}\n        setName={setName}\n      />\n    );\n  };\n\n  renderImport = () => {\n    const { extendedPublicKeyImporter, number } = this.props;\n    const { disableChangeMethod } = this.state;\n    const labelId = `xpub-${number}-importer-select-label`;\n    return (\n      <div>\n        <FormControl fullWidth>\n          <InputLabel id={labelId}>Select Method</InputLabel>\n\n          <Select\n            labelId={labelId}\n            id={`public-key-${number}-importer-select`}\n            disabled={disableChangeMethod}\n            value={extendedPublicKeyImporter.method}\n            onChange={this.handleMethodChange}\n          >\n            <MenuItem value=\"\">{\"< Select method >\"}</MenuItem>\n            <MenuItem value={TREZOR}>Trezor</MenuItem>\n            <MenuItem value={LEDGER}>Ledger</MenuItem>\n            <MenuItem value={HERMIT}>Hermit</MenuItem>\n            <MenuItem value={XPUB}>Derive from extended public key</MenuItem>\n            <MenuItem value={TEXT}>Enter as text</MenuItem>\n          </Select>\n        </FormControl>\n\n        {this.renderImportByMethod()}\n      </div>\n    );\n  };\n\n  renderImportByMethod = () => {\n    const {\n      extendedPublicKeyImporters,\n      extendedPublicKeyImporter,\n      network,\n      addressType,\n      defaultBIP32Path,\n    } = this.props;\n    if (\n      extendedPublicKeyImporter.method === TREZOR ||\n      extendedPublicKeyImporter.method === LEDGER\n    ) {\n      return (\n        <HardwareWalletExtendedPublicKeyImporter\n          extendedPublicKeyImporter={extendedPublicKeyImporter}\n          validateAndSetExtendedPublicKey={this.validateAndSetExtendedPublicKey}\n          validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n          resetBIP32Path={this.resetBIP32Path}\n          enableChangeMethod={this.enableChangeMethod}\n          disableChangeMethod={this.disableChangeMethod}\n          addressType={addressType}\n          defaultBIP32Path={defaultBIP32Path}\n          network={network}\n        />\n      );\n    }\n    if (extendedPublicKeyImporter.method === HERMIT) {\n      return (\n        <HermitExtendedPublicKeyImporter\n          extendedPublicKeyImporter={extendedPublicKeyImporter}\n          validateAndSetExtendedPublicKey={this.validateAndSetExtendedPublicKey}\n          validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n          enableChangeMethod={this.enableChangeMethod}\n          disableChangeMethod={this.disableChangeMethod}\n          resetBIP32Path={this.resetBIP32Path}\n          reset={this.reset}\n        />\n      );\n    }\n    if (extendedPublicKeyImporter.method === XPUB) {\n      return (\n        <ExtendedPublicKeyExtendedPublicKeyImporter\n          extendedPublicKeyImporter={extendedPublicKeyImporter}\n          extendedPublicKeyImporters={extendedPublicKeyImporters}\n          validateAndSetExtendedPublicKey={this.validateAndSetExtendedPublicKey}\n          network={network}\n          validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n        />\n      );\n    }\n    if (extendedPublicKeyImporter.method === TEXT) {\n      return (\n        <TextExtendedPublicKeyImporter\n          extendedPublicKeyImporter={extendedPublicKeyImporter}\n          validateAndSetExtendedPublicKey={this.validateAndSetExtendedPublicKey}\n        />\n      );\n    }\n    return null;\n  };\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { number, setMethod, setExtendedPublicKey } = this.props;\n    setMethod(number, event.target.value);\n    setExtendedPublicKey(number, \"\");\n  };\n\n  disableChangeMethod = () => {\n    this.setState({ disableChangeMethod: true });\n  };\n\n  enableChangeMethod = () => {\n    this.setState({ disableChangeMethod: false });\n  };\n\n  //\n  // State\n  //\n\n  finalize = () => {\n    const { number, setFinalized } = this.props;\n    setFinalized(number, true);\n  };\n\n  reset = (resetBIP32Path) => {\n    const { number, setExtendedPublicKey, setFinalized } = this.props;\n    setExtendedPublicKey(number, \"\");\n    setFinalized(number, false);\n    if (resetBIP32Path) {\n      this.resetBIP32Path();\n    }\n  };\n\n  //\n  // BIP32 Path\n  //\n\n  renderBIP32Path = () => {\n    const { extendedPublicKeyImporter } = this.props;\n    if (extendedPublicKeyImporter.method === TEXT) {\n      return (\n        <div className=\"mt-4\">\n          <p>\n            Make sure you <strong>record the corresponding BIP32 path.</strong>\n          </p>\n        </div>\n      );\n    }\n    return (\n      <div className=\"mt-4\">\n        <p>The BIP32 path for this extended public key is:</p>\n        <div className=\"text-center\">\n          <Copyable text={extendedPublicKeyImporter.bip32Path} showIcon />\n        </div>\n        <p className=\"mt-4\">\n          You will need this BIP32 path to sign for this key later.{\" \"}\n          <strong>Write down this BIP32 path!</strong>\n        </p>\n      </div>\n    );\n  };\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const { number, setBIP32Path } = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(number, bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback(\"\");\n      callback();\n    }\n  };\n\n  resetBIP32Path = () => {\n    const { number, resetBIP32Path } = this.props;\n    resetBIP32Path(number);\n  };\n\n  //\n  // Extended Public Key\n  //\n\n  renderExtendedPublicKey = () => {\n    const { extendedPublicKeyImporter, network, classes } = this.props;\n    const { conversionMessage } = this.state;\n    const conversionAppend =\n      extendedPublicKeyImporter.method === HERMIT &&\n      network === NETWORKS.TESTNET\n        ? \"this should not be an issue as hermit signing is not affected by the conversion.\"\n        : \"this may indicate an invalid network setting, if so correct setting, remove key and try again.\";\n    return (\n      <div>\n        <p>The following extended public key was imported:</p>\n        <div className={classes.xpub}>\n          <Copyable\n            text={extendedPublicKeyImporter.extendedPublicKey}\n            showIcon\n          />\n        </div>\n        {this.renderBIP32Path()}\n        {conversionMessage !== \"\" && (\n          <Box mb={2}>\n            <FormHelperText>\n              {conversionMessage}, {conversionAppend}{\" \"}\n            </FormHelperText>\n          </Box>\n        )}\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          onClick={() => {\n            this.reset(extendedPublicKeyImporter.method === HERMIT);\n          }}\n        >\n          Remove Extended Public Key\n        </Button>\n      </div>\n    );\n  };\n\n  validateAndSetExtendedPublicKey = (extendedPublicKey, errback, callback) => {\n    const {\n      number,\n      network,\n      extendedPublicKeyImporters,\n      setExtendedPublicKey,\n    } = this.props;\n    const networkError = validateExtendedPublicKey(extendedPublicKey, network);\n    let actualExtendedPublicKey = extendedPublicKey;\n    if (networkError !== \"\") {\n      try {\n        actualExtendedPublicKey = convertExtendedPublicKey(\n          extendedPublicKey,\n          network === \"testnet\" ? \"tpub\" : \"xpub\"\n        );\n      } catch (error) {\n        errback(error.message);\n        setExtendedPublicKey(number, extendedPublicKey);\n        return;\n      }\n    }\n\n    const validationError = validateExtendedPublicKey(\n      actualExtendedPublicKey,\n      network\n    );\n    if (validationError !== \"\") {\n      errback(validationError);\n      setExtendedPublicKey(number, extendedPublicKey);\n      return;\n    }\n    setExtendedPublicKey(number, actualExtendedPublicKey);\n\n    if (\n      actualExtendedPublicKey &&\n      Object.values(extendedPublicKeyImporters).find(\n        (extendedPublicKeyImporter, extendedPublicKeyImporterIndex) =>\n          extendedPublicKeyImporterIndex !== number - 1 &&\n          extendedPublicKeyImporter.extendedPublicKey ===\n            actualExtendedPublicKey\n      )\n    ) {\n      errback(\"This extended public key has already been imported.\");\n    } else {\n      errback(\"\");\n      const conversionMessage =\n        actualExtendedPublicKey === extendedPublicKey\n          ? \"\"\n          : `Your extended public key has been converted from ${extendedPublicKey.slice(\n              0,\n              4\n            )} to ${actualExtendedPublicKey.slice(0, 4)}`;\n      this.setState({ conversionMessage });\n      this.finalize();\n\n      if (callback) {\n        callback();\n      }\n    }\n  };\n\n  render() {\n    const { extendedPublicKeyImporter, finalizedNetwork, network } = this.props;\n    const hasConflict =\n      extendedPublicKeyImporter.method /* && extendedPublicKeyImporter.method !== TEXT */ &&\n      extendedPublicKeyImporter.conflict;\n    let conflictMessage = \"\";\n    if (hasConflict) {\n      if (finalizedNetwork !== network) {\n        conflictMessage =\n          \"Warning, you can not mix xpub and tpub.  Do not proceed without resolving by either removing conflicting imported keys or returning network type to original state!\";\n      } else {\n        conflictMessage =\n          \"Warning, BIP32 path is in conflict with the network and address type settings.  Do not proceed unless you are absolutely sure you know what you are doing!\";\n      }\n    }\n    return (\n      <Card>\n        <CardHeader title={this.title()} />\n        <CardContent>\n          {hasConflict && <Conflict message={conflictMessage} />}\n          {extendedPublicKeyImporter.finalized\n            ? this.renderExtendedPublicKey()\n            : this.renderImport()}\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nExtendedPublicKeyImporter.propTypes = {\n  addressType: PropTypes.string.isRequired,\n  classes: PropTypes.shape({\n    xpub: PropTypes.string,\n  }).isRequired,\n  defaultBIP32Path: PropTypes.string.isRequired,\n  extendedPublicKeyImporter: PropTypes.shape({\n    bip32Path: PropTypes.string,\n    conflict: PropTypes.bool,\n    extendedPublicKey: PropTypes.string,\n    finalized: PropTypes.bool,\n    name: PropTypes.string,\n    method: PropTypes.string,\n  }).isRequired,\n  extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n  finalizedNetwork: PropTypes.string.isRequired,\n  network: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  resetBIP32Path: PropTypes.func.isRequired,\n  setBIP32Path: PropTypes.func.isRequired,\n  setExtendedPublicKey: PropTypes.func.isRequired,\n  setFinalized: PropTypes.func.isRequired,\n  setName: PropTypes.func.isRequired,\n  setMethod: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...state.settings,\n    ...state.quorum,\n    ...{\n      extendedPublicKeyImporter:\n        state.quorum.extendedPublicKeyImporters[ownProps.number],\n    },\n  };\n}\n\nconst mapDispatchToProps = {\n  setName: setExtendedPublicKeyImporterName,\n  resetBIP32Path: resetExtendedPublicKeyImporterBIP32Path,\n  setBIP32Path: setExtendedPublicKeyImporterBIP32Path,\n  setMethod: setExtendedPublicKeyImporterMethod,\n  setExtendedPublicKey: setExtendedPublicKeyImporterExtendedPublicKey,\n  setFinalized: setExtendedPublicKeyImporterFinalized,\n};\n\nconst ExtendedPublicKeyImporterWithStyles = withStyles(useStyles)(\n  ExtendedPublicKeyImporter\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ExtendedPublicKeyImporterWithStyles);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Button,\n  ButtonGroup,\n  Grid,\n  makeStyles,\n  Tooltip,\n} from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  RefreshOutlined,\n  ExitToAppOutlined,\n  GetAppOutlined,\n} from \"@material-ui/icons\";\n\nimport { clientPropTypes } from \"../../proptypes\";\nimport { CARAVAN_CONFIG } from \"./constants\";\n\nimport ImportAddressesButton from \"../ImportAddressesButton\";\n\nconst useStyles = makeStyles(() => ({\n  card: {\n    height: \"100%\",\n    flexDirection: \"column\",\n    display: \"flex\",\n  },\n  cardContent: {\n    textAlign: \"center\",\n    paddingTop: \"0px\",\n    display: \"flex\",\n    flex: 1,\n  },\n}));\n\nconst WalletActionsPanel = ({\n  addresses,\n  client,\n  handleRefresh,\n  onClearConfig,\n  onDownloadConfig,\n  onImportAddresses,\n  refreshing,\n  walletActivated,\n}) => {\n  const classes = useStyles();\n  const handleClearClick = (e) => {\n    e.preventDefault();\n    if (sessionStorage) sessionStorage.removeItem(CARAVAN_CONFIG);\n    onClearConfig(e);\n  };\n  return (\n    <Card className={classes.card}>\n      <CardHeader title=\"Wallet Actions\" />\n      <CardContent className={classes.cardContent}>\n        <Grid container spacing={1} alignItems=\"center\" justify=\"center\">\n          <Grid item xs={12}>\n            <ButtonGroup variant=\"outlined\">\n              <Tooltip title=\"Force a refresh for latest wallet state and balance.\">\n                <Button\n                  onClick={handleRefresh}\n                  disabled={!walletActivated}\n                  startIcon={\n                    refreshing ? (\n                      <CircularProgress size={24} />\n                    ) : (\n                      <RefreshOutlined />\n                    )\n                  }\n                >\n                  Refresh\n                </Button>\n              </Tooltip>\n              <Tooltip title=\"Download wallet configuration to local machine for backup. No security is lost with this, but access to this file provides anyone who has it information about balances.\">\n                <Button\n                  startIcon={<GetAppOutlined />}\n                  onClick={onDownloadConfig}\n                >\n                  Download Configuration\n                </Button>\n              </Tooltip>\n              <Tooltip title=\"Only clears the wallet config from browser sessions. Funds remain unaffected.\">\n                <Button\n                  startIcon={<ExitToAppOutlined />}\n                  onClick={handleClearClick}\n                >\n                  Clear Wallet\n                </Button>\n              </Tooltip>\n            </ButtonGroup>\n          </Grid>\n          {client.type === \"private\" && (\n            <Grid item>\n              <ImportAddressesButton\n                addresses={addresses}\n                client={client}\n                importCallback={onImportAddresses}\n              />\n            </Grid>\n          )}\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nWalletActionsPanel.propTypes = {\n  addresses: PropTypes.arrayOf(PropTypes.string),\n  onImportAddresses: PropTypes.func.isRequired,\n  walletActivated: PropTypes.bool,\n  handleRefresh: PropTypes.func.isRequired,\n  onClearConfig: PropTypes.func.isRequired,\n  onDownloadConfig: PropTypes.func.isRequired,\n  refreshing: PropTypes.bool,\n  client: PropTypes.shape(clientPropTypes).isRequired,\n};\n\nWalletActionsPanel.defaultProps = {\n  walletActivated: false,\n  refreshing: false,\n  addresses: [],\n};\n\nexport default WalletActionsPanel;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  validateBIP32Index,\n  validateBIP32Path,\n  validateExtendedPublicKey,\n  satoshisToBitcoins,\n} from \"unchained-bitcoin\";\nimport { Grid, Box, Button, FormHelperText } from \"@material-ui/core\";\nimport { downloadFile } from \"../../utils\";\nimport {\n  updateDepositSliceAction,\n  updateChangeSliceAction,\n  resetWallet as resetWalletAction,\n  updateWalletNameAction as updateWalletNameActionImport,\n} from \"../../actions/walletActions\";\nimport { fetchSliceData as fetchSliceDataAction } from \"../../actions/braidActions\";\nimport walletSelectors from \"../../selectors\";\nimport { CARAVAN_CONFIG } from \"./constants\";\n\n// Components\n\nimport WalletInfoCard from \"./WalletInfoCard\";\nimport NetworkPicker from \"../NetworkPicker\";\nimport QuorumPicker from \"../QuorumPicker\";\nimport AddressTypePicker from \"../AddressTypePicker\";\nimport ClientPicker from \"../ClientPicker\";\nimport StartingAddressIndexPicker from \"../StartingAddressIndexPicker\";\nimport WalletGenerator from \"./WalletGenerator\";\nimport ExtendedPublicKeyImporter from \"./ExtendedPublicKeyImporter\";\nimport WalletActionsPanel from \"./WalletActionsPanel\";\n\nimport {\n  getUnknownAddresses,\n  getUnknownAddressSlices,\n} from \"../../selectors/wallet\";\n\n// Actions\nimport {\n  setTotalSigners as setTotalSignersAction,\n  setRequiredSigners as setRequiredSignersAction,\n  setAddressType as setAddressTypeAction,\n  setNetwork as setNetworkAction,\n  setStartingAddressIndex as setStartingAddressIndexAction,\n} from \"../../actions/settingsActions\";\nimport {\n  setExtendedPublicKeyImporterMethod as setExtendedPublicKeyImporterMethodAction,\n  setExtendedPublicKeyImporterExtendedPublicKey as setExtendedPublicKeyImporterExtendedPublicKeyAction,\n  setExtendedPublicKeyImporterBIP32Path as setExtendedPublicKeyImporterBIP32PathAction,\n  setExtendedPublicKeyImporterName as setExtendedPublicKeyImporterNameAction,\n  setExtendedPublicKeyImporterFinalized as setExtendedPublicKeyImporterFinalizedAction,\n  setExtendedPublicKeyImporterVisible as setExtendedPublicKeyImporterVisibleAction,\n} from \"../../actions/extendedPublicKeyImporterActions\";\nimport { wrappedActions } from \"../../actions/utils\";\nimport {\n  SET_CLIENT_TYPE,\n  SET_CLIENT_URL,\n  SET_CLIENT_USERNAME,\n  SET_CLIENT_PASSWORD,\n} from \"../../actions/clientActions\";\nimport { clientPropTypes, slicePropTypes } from \"../../proptypes\";\n\nclass CreateWallet extends React.Component {\n  static validateProperties(config, properties, key) {\n    for (let index = 0; index < properties.length; index += 1) {\n      const property = properties[index];\n      const configObj = key !== \"\" ? config[key] : config;\n      if (!Object.prototype.hasOwnProperty.call(configObj, property)) {\n        return `Configuration missing property \"${\n          key !== \"\" ? `${key}.` : \"\"\n        }${property}\"`;\n      }\n    }\n    return \"\";\n  }\n\n  static validateConfig(config) {\n    const configProperties = [\n      \"name\",\n      \"addressType\",\n      \"network\",\n      \"quorum\",\n      \"extendedPublicKeys\",\n    ];\n    const validProperties = CreateWallet.validateProperties(\n      config,\n      configProperties,\n      \"\"\n    );\n    if (validProperties !== \"\") return validProperties;\n\n    if (config.startingAddressIndex !== undefined) {\n      const startingAddressIndexError = validateBIP32Index(\n        String(config.startingAddressIndex),\n        { mode: \"unhardened \" }\n      ).replace(\"BIP32\", \"Starting Address\");\n      if (startingAddressIndexError !== \"\") return startingAddressIndexError;\n    }\n\n    if (config.client) {\n      const clientProperties =\n        config.client.type === \"public\"\n          ? [\"type\"]\n          : [\"type\", \"url\", \"username\"];\n      const validClient = CreateWallet.validateProperties(\n        config,\n        clientProperties,\n        \"client\"\n      );\n      if (validClient !== \"\") return validClient;\n    }\n\n    const quorumProperties = [\"requiredSigners\", \"totalSigners\"];\n    const validQuorum = CreateWallet.validateProperties(\n      config,\n      quorumProperties,\n      \"quorum\"\n    );\n    if (validQuorum !== \"\") return validQuorum;\n\n    return CreateWallet.validateExtendedPublicKeys(\n      config.extendedPublicKeys,\n      config.network\n    );\n  }\n\n  static validateExtendedPublicKeys(xpubs, network) {\n    let tmpNetwork = network;\n    if (network === \"regtest\") {\n      tmpNetwork = \"testnet\";\n    }\n    const xpubFields = {\n      name: (name, index) =>\n        typeof name === \"string\"\n          ? \"\"\n          : `Extended public key ${index} name must be a string`,\n      bip32Path: (bip32Path, index) => {\n        if (xpubs[index - 1].method === \"text\") return \"\";\n        if (typeof xpubs[index - 1].method === \"undefined\") return \"\";\n        const pathError = validateBIP32Path(bip32Path);\n        if (pathError !== \"\")\n          return `Extended public key ${index} error: ${pathError}`;\n        return \"\";\n      },\n      xpub: (xpub) => validateExtendedPublicKey(xpub, tmpNetwork),\n      method: (method, index) =>\n        // eslint-disable-next-line no-bitwise\n        ~[\"trezor\", \"ledger\", \"hermit\", \"xpub\", \"text\", undefined].indexOf(\n          method\n        )\n          ? \"\"\n          : `Invalid method for extended public key ${index}`,\n    };\n\n    const keys = Object.keys(xpubFields);\n    for (let xpubIndex = 0; xpubIndex < xpubs.length; xpubIndex += 1) {\n      for (let keyIndex = 0; keyIndex < keys.length; keyIndex += 1) {\n        const key = keys[keyIndex];\n        const value = xpubs[xpubIndex][key];\n        const valueError = xpubFields[key](value, xpubIndex + 1);\n        if (valueError !== \"\") return valueError;\n      }\n    }\n    return \"\";\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      configError: \"\",\n      configJson: \"\",\n      refreshing: false,\n      generating: false,\n    };\n  }\n\n  componentDidMount() {\n    if (sessionStorage) {\n      const configJson = sessionStorage.getItem(CARAVAN_CONFIG);\n      if (configJson) this.setConfigJson(configJson);\n    }\n  }\n\n  setConfigJson(configJson) {\n    let configError;\n    try {\n      const config = JSON.parse(configJson);\n      configError = CreateWallet.validateConfig(config);\n    } catch (parseError) {\n      configError = \"Invalid JSON\";\n    }\n\n    if (sessionStorage) sessionStorage.setItem(CARAVAN_CONFIG, configJson);\n\n    // async since importDetails needs the updated state for it to work\n    this.setState({ configJson, configError }, () => {\n      if (configError === \"\") this.importDetails();\n    });\n  }\n\n  setGenerating(_val) {\n    const { generating } = this.state;\n    let val = _val;\n    if (_val === undefined) val = !generating;\n    this.setState({ generating: val });\n  }\n\n  handleImport = ({ target }) => {\n    const fileReader = new FileReader();\n\n    fileReader.readAsText(target.files[0]);\n    fileReader.onload = (event) => {\n      const configJson = event.target.result;\n      this.setConfigJson(configJson);\n    };\n  };\n\n  refresh = async () => {\n    this.setState({ refreshing: true });\n    await this.generatorRefresh();\n    this.setState({ refreshing: false });\n  };\n\n  importDetails = () => {\n    const { configJson } = this.state;\n    const {\n      setTotalSigners,\n      setRequiredSigners,\n      setAddressType,\n      setNetwork,\n      setStartingAddressIndex,\n      setExtendedPublicKeyImporterMethod,\n      setExtendedPublicKeyImporterExtendedPublicKey,\n      setExtendedPublicKeyImporterBIP32Path,\n      setExtendedPublicKeyImporterFinalized,\n      setExtendedPublicKeyImporterName,\n      updateWalletNameAction,\n      setClientType,\n      setClientUrl,\n      setClientUsername,\n    } = this.props;\n\n    const walletConfiguration = JSON.parse(configJson);\n    setTotalSigners(walletConfiguration.quorum.totalSigners);\n    setRequiredSigners(walletConfiguration.quorum.requiredSigners);\n    setAddressType(walletConfiguration.addressType);\n    if (walletConfiguration.network === \"regtest\") {\n      setNetwork(\"testnet\");\n    } else {\n      setNetwork(walletConfiguration.network);\n    }\n    updateWalletNameAction(0, walletConfiguration.name);\n    // set client to unknown\n    if (walletConfiguration.client) {\n      setClientType(walletConfiguration.client.type);\n      if (walletConfiguration.client.type === \"private\") {\n        setClientUrl(walletConfiguration.client.url);\n        setClientUsername(walletConfiguration.client.username);\n      }\n    } else {\n      setClientType(\"unknown\");\n    }\n    // optionally, set starting address index\n    if (walletConfiguration.startingAddressIndex) {\n      setStartingAddressIndex(walletConfiguration.startingAddressIndex);\n    }\n    walletConfiguration.extendedPublicKeys.forEach(\n      (extendedPublicKey, index) => {\n        const number = index + 1;\n        setExtendedPublicKeyImporterName(number, extendedPublicKey.name);\n        if (extendedPublicKey.method) {\n          setExtendedPublicKeyImporterMethod(number, extendedPublicKey.method);\n        } else {\n          setExtendedPublicKeyImporterMethod(number, \"unknown\");\n        }\n\n        setExtendedPublicKeyImporterBIP32Path(\n          number,\n          extendedPublicKey.bip32Path\n        );\n        setExtendedPublicKeyImporterExtendedPublicKey(\n          number,\n          extendedPublicKey.xpub\n        );\n        setExtendedPublicKeyImporterFinalized(number, true);\n      }\n    );\n  };\n\n  // add client picker if client === 'unknown'\n  renderWalletImporter = () => {\n    const { configError } = this.state;\n    const { configuring } = this.props;\n\n    if (configuring)\n      return (\n        <>\n          <label htmlFor=\"upload-config\">\n            <input\n              style={{ display: \"none\" }}\n              id=\"upload-config\"\n              name=\"upload-config\"\n              accept=\"application/json\"\n              onChange={this.handleImport}\n              type=\"file\"\n            />\n\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              component=\"span\"\n              style={{ marginTop: \"20px\" }}\n            >\n              Import Wallet Configuration\n            </Button>\n          </label>\n          <FormHelperText error>{configError}</FormHelperText>\n        </>\n      );\n    return \"\";\n  };\n\n  renderSettings = () => {\n    const { configuring } = this.props;\n    let settings = null;\n\n    if (configuring)\n      settings = (\n        <Grid item md={4}>\n          <Box>\n            <QuorumPicker />\n          </Box>\n          <Box mt={2}>\n            <AddressTypePicker />\n          </Box>\n          <Box mt={2}>\n            <NetworkPicker />\n          </Box>\n          <Box mt={2}>\n            <ClientPicker />\n          </Box>\n          <Box mt={2}>\n            <StartingAddressIndexPicker />\n          </Box>\n        </Grid>\n      );\n    return settings;\n  };\n\n  renderExtendedPublicKeyImporters = () => {\n    const { totalSigners, configuring } = this.props;\n    const extendedPublicKeyImporters = [];\n    for (\n      let extendedPublicKeyImporterNum = 1;\n      extendedPublicKeyImporterNum <= totalSigners;\n      extendedPublicKeyImporterNum += 1\n    ) {\n      extendedPublicKeyImporters.push(\n        <Box\n          key={extendedPublicKeyImporterNum}\n          mt={extendedPublicKeyImporterNum === 1 ? 0 : 2}\n          display={configuring ? \"block\" : \"none\"}\n        >\n          <ExtendedPublicKeyImporter\n            key={extendedPublicKeyImporterNum}\n            number={extendedPublicKeyImporterNum}\n          />\n        </Box>\n      );\n    }\n    return extendedPublicKeyImporters;\n  };\n\n  downloadWalletDetails = (event) => {\n    event.preventDefault();\n    const body = this.walletDetailsText();\n    const filename = this.walletDetailsFilename();\n    downloadFile(body, filename);\n  };\n\n  walletDetailsText = () => {\n    const {\n      addressType,\n      network,\n      totalSigners,\n      requiredSigners,\n      walletName,\n      startingAddressIndex,\n    } = this.props;\n    return `{\n  \"name\": \"${walletName}\",\n  \"addressType\": \"${addressType}\",\n  \"network\": \"${network}\",\n  \"client\":  ${this.clientDetails()},\n  \"quorum\": {\n    \"requiredSigners\": ${requiredSigners},\n    \"totalSigners\": ${totalSigners}\n  },\n  \"extendedPublicKeys\": [\n${this.extendedPublicKeyImporterBIP32Paths()}\n  ],\n  \"startingAddressIndex\": ${startingAddressIndex}\n}`;\n  };\n\n  clientDetails = () => {\n    const { client } = this.props;\n\n    if (client.type === \"private\") {\n      return `{\n    \"type\": \"private\",\n    \"url\": \"${client.url}\",\n    \"username\": \"${client.username}\"\n  }`;\n    }\n    return `{\n    \"type\": \"public\"\n  }`;\n  };\n\n  extendedPublicKeyImporterBIP32Paths = () => {\n    const { totalSigners } = this.props;\n    const extendedPublicKeyImporterBIP32Paths = [];\n    for (\n      let extendedPublicKeyImporterNum = 1;\n      extendedPublicKeyImporterNum <= totalSigners;\n      extendedPublicKeyImporterNum += 1\n    ) {\n      extendedPublicKeyImporterBIP32Paths.push(\n        `${this.extendedPublicKeyImporterBIP32Path(\n          extendedPublicKeyImporterNum\n        )}${extendedPublicKeyImporterNum < totalSigners ? \",\" : \"\"}`\n      );\n    }\n    return extendedPublicKeyImporterBIP32Paths.join(\"\\n\");\n  };\n\n  extendedPublicKeyImporterBIP32Path = (number) => {\n    const { extendedPublicKeyImporters } = this.props;\n    const extendedPublicKeyImporter = extendedPublicKeyImporters[number];\n    const bip32Path =\n      extendedPublicKeyImporter.method === \"text\"\n        ? \"Unknown (make sure you have written this down previously!)\"\n        : extendedPublicKeyImporter.bip32Path;\n    const importer =\n      extendedPublicKeyImporter.method === \"unknown\"\n        ? `    {\n        \"name\": \"${extendedPublicKeyImporter.name}\",\n        \"bip32Path\": \"${bip32Path}\",\n        \"xpub\": \"${extendedPublicKeyImporter.extendedPublicKey}\"\n        }`\n        : `    {\n        \"name\": \"${extendedPublicKeyImporter.name}\",\n        \"bip32Path\": \"${bip32Path}\",\n        \"xpub\": \"${extendedPublicKeyImporter.extendedPublicKey}\",\n        \"method\": \"${extendedPublicKeyImporter.method}\"\n      }`;\n    return importer;\n  };\n\n  walletDetailsFilename = () => {\n    const {\n      totalSigners,\n      requiredSigners,\n      addressType,\n      walletName,\n    } = this.props;\n    return `bitcoin-${requiredSigners}-of-${totalSigners}-${addressType}-${walletName}.json`;\n  };\n\n  totalBalance = () => {\n    const { deposits, change } = this.props;\n    if (!Object.keys(deposits.nodes).length) return \"\";\n    const btc = satoshisToBitcoins(\n      deposits.balanceSats.plus(change.balanceSats)\n    ).toFixed();\n    return btc;\n  };\n\n  clearConfig = (e) => {\n    const { setExtendedPublicKeyImporterVisible, resetWallet } = this.props;\n    e.preventDefault();\n    resetWallet();\n    setExtendedPublicKeyImporterVisible(true);\n    this.setState({ generating: false });\n  };\n\n  /**\n   * Callback function to pass to the address importer\n   * after addresses have been imported we want\n   * @param {Array<string>} importedAddresses\n   * @param {boolean} rescan - whether or not a rescan is being performed\n   */\n  async afterImportAddresses(importedAddresses, rescan) {\n    // if rescan is true then there's no point in fetching\n    // the slice data yet since we likely won't get anything\n    // until the rescan is complete\n    if (rescan) return;\n\n    const { unknownSlices, fetchSliceData } = this.props;\n    const importedSlices = unknownSlices.reduce((slices, slice) => {\n      if (importedAddresses.indexOf(slice.multisig.address) > -1)\n        slices.push(slice);\n      return slice;\n    }, []);\n\n    await fetchSliceData(importedSlices);\n  }\n\n  render = () => {\n    const {\n      client,\n      configuring,\n      confirmedBalance,\n      walletName,\n      setName,\n      deposits,\n      change,\n      network,\n      pendingBalance,\n      nodesLoaded,\n      frozen,\n      unknownAddresses,\n    } = this.props;\n    const { refreshing, generating } = this.state;\n    const walletLoadError =\n      change.fetchUTXOsErrors + deposits.fetchUTXOsErrors > 0\n        ? \"Wallet loaded with errors\"\n        : \"\";\n\n    return (\n      <>\n        <Box mt={3}>\n          <Grid container spacing={3}>\n            <Grid item xs={10} md={6}>\n              <WalletInfoCard\n                editable={\n                  !Object.keys(deposits.nodes).length ||\n                  !Object.keys(change.nodes).length\n                }\n                walletName={walletName}\n                setName={setName}\n                balance={+satoshisToBitcoins(confirmedBalance).toFixed()}\n                pendingBalance={+satoshisToBitcoins(pendingBalance).toFixed()}\n                network={network}\n              />\n            </Grid>\n            <Grid item xs={10} md={6}>\n              {(nodesLoaded || frozen) && (\n                <WalletActionsPanel\n                  addresses={unknownAddresses}\n                  refreshing={refreshing}\n                  walletActivated={nodesLoaded}\n                  handleRefresh={() => this.refresh()}\n                  onClearConfig={(e) => {\n                    this.clearConfig(e);\n                  }}\n                  onDownloadConfig={(e) => this.downloadWalletDetails(e)}\n                  client={client}\n                  onImportAddresses={(addresses, rescan) =>\n                    this.afterImportAddresses(rescan)\n                  }\n                />\n              )}\n            </Grid>\n          </Grid>\n        </Box>\n        {walletLoadError.length ? (\n          <FormHelperText style={{ float: \"right\", padding: \"11px\" }} error>\n            {walletLoadError}\n          </FormHelperText>\n        ) : (\n          \"\"\n        )}\n        <Box>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              {this.renderWalletImporter()}\n            </Grid>\n            <Grid item md={configuring ? 8 : 12}>\n              {this.renderExtendedPublicKeyImporters()}\n              <Box mt={2}>\n                <WalletGenerator\n                  generating={generating}\n                  setGenerating={(value) => this.setGenerating(value)}\n                  downloadWalletDetails={this.downloadWalletDetails}\n                  // eslint-disable-next-line no-return-assign\n                  refreshNodes={(click) => (this.generatorRefresh = click)} // FIXME TIGHT COUPLING ALERT, this calls function downstream\n                />\n              </Box>\n            </Grid>\n            {this.renderSettings()}\n          </Grid>\n        </Box>\n      </>\n    );\n  };\n}\n\nCreateWallet.propTypes = {\n  addressType: PropTypes.string.isRequired,\n  startingAddressIndex: PropTypes.number.isRequired,\n  change: PropTypes.shape({\n    balanceSats: PropTypes.shape({}),\n    fetchUTXOsErrors: PropTypes.number,\n    nodes: PropTypes.shape({}),\n  }).isRequired,\n  client: PropTypes.shape(clientPropTypes).isRequired,\n  configuring: PropTypes.bool.isRequired,\n  deposits: PropTypes.shape({\n    balanceSats: PropTypes.shape({\n      plus: PropTypes.func,\n    }),\n    fetchUTXOsErrors: PropTypes.number,\n    nodes: PropTypes.shape({}),\n  }).isRequired,\n  confirmedBalance: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n    .isRequired,\n  extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n  frozen: PropTypes.bool.isRequired,\n  fetchSliceData: PropTypes.func.isRequired,\n  network: PropTypes.string.isRequired,\n  nodesLoaded: PropTypes.bool.isRequired,\n  pendingBalance: PropTypes.number,\n  requiredSigners: PropTypes.number.isRequired,\n  resetWallet: PropTypes.func.isRequired,\n  setTotalSigners: PropTypes.func.isRequired,\n  setRequiredSigners: PropTypes.func.isRequired,\n  setAddressType: PropTypes.func.isRequired,\n  setName: PropTypes.func.isRequired,\n  setNetwork: PropTypes.func.isRequired,\n  setStartingAddressIndex: PropTypes.func.isRequired,\n  setExtendedPublicKeyImporterMethod: PropTypes.func.isRequired,\n  setExtendedPublicKeyImporterExtendedPublicKey: PropTypes.func.isRequired,\n  setExtendedPublicKeyImporterBIP32Path: PropTypes.func.isRequired,\n  setExtendedPublicKeyImporterFinalized: PropTypes.func.isRequired,\n  setExtendedPublicKeyImporterName: PropTypes.func.isRequired,\n  setExtendedPublicKeyImporterVisible: PropTypes.func.isRequired,\n  setClientType: PropTypes.func.isRequired,\n  setClientUrl: PropTypes.func.isRequired,\n  setClientUsername: PropTypes.func.isRequired,\n  totalSigners: PropTypes.number.isRequired,\n  updateWalletNameAction: PropTypes.func.isRequired,\n  unknownAddresses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  unknownSlices: PropTypes.arrayOf(PropTypes.shape(slicePropTypes)).isRequired,\n  walletName: PropTypes.string.isRequired,\n};\n\nCreateWallet.defaultProps = {\n  pendingBalance: 0,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    ...state.quorum,\n    ...{\n      walletName: state.wallet.common.walletName,\n      nodesLoaded: state.wallet.common.nodesLoaded,\n      walletMode: state.wallet.common.walletMode,\n    },\n    confirmedBalance: walletSelectors.getConfirmedBalance(state),\n    pendingBalance: walletSelectors.getPendingBalance(state),\n    unknownAddresses: getUnknownAddresses(state),\n    unknownSlices: getUnknownAddressSlices(state),\n    ...state.wallet,\n    client: state.client,\n  };\n}\n\nconst mapDispatchToProps = {\n  fetchSliceData: fetchSliceDataAction,\n  resetWallet: resetWalletAction,\n  setName: updateWalletNameActionImport,\n  setTotalSigners: setTotalSignersAction,\n  setRequiredSigners: setRequiredSignersAction,\n  setAddressType: setAddressTypeAction,\n  setNetwork: setNetworkAction,\n  setStartingAddressIndex: setStartingAddressIndexAction,\n  setExtendedPublicKeyImporterMethod: setExtendedPublicKeyImporterMethodAction,\n  setExtendedPublicKeyImporterExtendedPublicKey: setExtendedPublicKeyImporterExtendedPublicKeyAction,\n  setExtendedPublicKeyImporterBIP32Path: setExtendedPublicKeyImporterBIP32PathAction,\n  setExtendedPublicKeyImporterName: setExtendedPublicKeyImporterNameAction,\n  setExtendedPublicKeyImporterFinalized: setExtendedPublicKeyImporterFinalizedAction,\n  setExtendedPublicKeyImporterVisible: setExtendedPublicKeyImporterVisibleAction,\n  updateWalletNameAction: updateWalletNameActionImport,\n  ...wrappedActions({\n    setClientType: SET_CLIENT_TYPE,\n    setClientUrl: SET_CLIENT_URL,\n    setClientUsername: SET_CLIENT_USERNAME,\n    setClientPassword: SET_CLIENT_PASSWORD,\n  }),\n  updateDepositNode: updateDepositSliceAction,\n  updateChangeNode: updateChangeSliceAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateWallet);\n","import { wrappedNumberedActions } from \"./utils\";\n\nexport const SET_PUBLIC_KEY_IMPORTER_NAME = \"SET_PUBLIC_KEY_IMPORTER_NAME\";\nexport const RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH =\n  \"RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_BIP32_PATH =\n  \"SET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_METHOD = \"SET_PUBLIC_KEY_IMPORTER_METHOD\";\nexport const SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY =\n  \"SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY\";\nexport const SET_PUBLIC_KEY_IMPORTER_FINALIZED =\n  \"SET_PUBLIC_KEY_IMPORTER_FINALIZED\";\nexport const MOVE_PUBLIC_KEY_IMPORTER_UP = \"MOVE_PUBLIC_KEY_IMPORTER_UP\";\nexport const MOVE_PUBLIC_KEY_IMPORTER_DOWN = \"MOVE_PUBLIC_KEY_IMPORTER_DOWN\";\nexport const SORT_PUBLIC_KEY_IMPORTERS = \"SORT_PUBLIC_KEY_IMPORTERS\";\nexport const UPDATE_MULTISIG_ADDRESS = \"UPDATE_MULTISIG_ADDRESS\";\n\nexport function sortPublicKeyImporters() {\n  return {\n    type: SORT_PUBLIC_KEY_IMPORTERS,\n  };\n}\n\nexport function setMultisigAddress(address) {\n  return {\n    type: UPDATE_MULTISIG_ADDRESS,\n    value: address,\n  };\n}\n\nexport const {\n  setPublicKeyImporterName,\n  setPublicKeyImporterBIP32Path,\n  resetPublicKeyImporterBIP32Path,\n  setPublicKeyImporterMethod,\n  setPublicKeyImporterPublicKey,\n  setPublicKeyImporterFinalized,\n  movePublicKeyImporterUp,\n  movePublicKeyImporterDown,\n} = wrappedNumberedActions({\n  setPublicKeyImporterName: SET_PUBLIC_KEY_IMPORTER_NAME,\n  resetPublicKeyImporterBIP32Path: RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setPublicKeyImporterBIP32Path: SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setPublicKeyImporterMethod: SET_PUBLIC_KEY_IMPORTER_METHOD,\n  setPublicKeyImporterPublicKey: SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n  setPublicKeyImporterFinalized: SET_PUBLIC_KEY_IMPORTER_FINALIZED,\n  movePublicKeyImporterUp: MOVE_PUBLIC_KEY_IMPORTER_UP,\n  movePublicKeyImporterDown: MOVE_PUBLIC_KEY_IMPORTER_DOWN,\n});\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  generateMultisigFromPublicKeys,\n  scriptToHex,\n  multisigRedeemScript,\n  multisigWitnessScript,\n} from \"unchained-bitcoin\";\nimport {\n  Box,\n  Grid,\n  Button,\n  Card,\n  CardHeader,\n  CardContent,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport { externalLink, downloadFile } from \"../../utils\";\n\n// Actions\nimport {\n  sortPublicKeyImporters as sortPublicKeyImportersAction,\n  setMultisigAddress as setMultisigAddressAction,\n} from \"../../actions/publicKeyImporterActions\";\n\n// Components\nimport MultisigDetails from \"../MultisigDetails\";\nimport Conflict from \"./Conflict\";\n\nclass AddressGenerator extends React.Component {\n  isInConflict = () => {\n    const { publicKeyImporters } = this.props;\n    return Object.values(publicKeyImporters).some(\n      (importer) => importer.conflict\n    );\n  };\n\n  publicKeyCount = () => {\n    const { publicKeyImporters } = this.props;\n    return Object.values(publicKeyImporters).filter(\n      (publicKeyImporter) => publicKeyImporter.finalized\n    ).length;\n  };\n\n  publicKeysAreCanonicallySorted = () => {\n    const { publicKeyImporters } = this.props;\n    const publicKeys = Object.values(publicKeyImporters)\n      .map((publicKeyImporter) => publicKeyImporter.publicKey)\n      .filter((publicKey) => publicKey !== \"\");\n    const sortedPublicKeys = Object.values(publicKeyImporters)\n      .map((publicKeyImporter) => publicKeyImporter.publicKey)\n      .filter((publicKey) => publicKey !== \"\")\n      .sort(); // sort mutates the array\n    const sorted =\n      publicKeys.filter((publicKey, index) => {\n        return publicKey === sortedPublicKeys[index];\n      }).length === publicKeys.length;\n    return sorted;\n  };\n\n  canonicallySortPublicKeys = () => {\n    const { sortPublicKeyImporters } = this.props;\n    sortPublicKeyImporters();\n  };\n\n  generateMultisig = () => {\n    const {\n      network,\n      publicKeyImporters,\n      totalSigners,\n      requiredSigners,\n      addressType,\n      setMultisigAddress,\n    } = this.props;\n    const publicKeys = [];\n    for (\n      let publicKeyImporterNum = 1;\n      publicKeyImporterNum <= totalSigners;\n      publicKeyImporterNum += 1\n    ) {\n      publicKeys.push(publicKeyImporters[publicKeyImporterNum].publicKey);\n    }\n    const multisig = generateMultisigFromPublicKeys(\n      network,\n      addressType,\n      requiredSigners,\n      ...publicKeys\n    );\n    setMultisigAddress(multisig.address);\n    return multisig;\n  };\n\n  downloadAddressDetails = (event) => {\n    event.preventDefault();\n    const multisig = this.generateMultisig();\n    const body = this.addressDetailsText(multisig);\n    const filename = this.addressDetailsFilename(multisig);\n    downloadFile(body, filename);\n  };\n\n  addressDetailsFilename = (multisig) => {\n    const { totalSigners, requiredSigners, addressType } = this.props;\n    return `bitcoin-${requiredSigners}-of-${totalSigners}-${addressType}-${multisig.address}.txt`;\n  };\n\n  addressDetailsText = (multisig) => {\n    const { addressType, network, totalSigners, requiredSigners } = this.props;\n    const redeemScript = multisigRedeemScript(multisig);\n    const witnessScript = multisigWitnessScript(multisig);\n    const redeemScriptLine = redeemScript\n      ? `Redeem Script: ${scriptToHex(redeemScript)}`\n      : \"\";\n    const witnessScriptLine = witnessScript\n      ? `Witness Script: ${scriptToHex(witnessScript)}`\n      : \"\";\n    const scriptsSpacer = redeemScript && witnessScript ? \"\\n\\n\" : \"\";\n    return `Address: ${multisig.address}\n\nType: ${addressType}\n\nNetwork: ${network}\n\nQuorum: ${requiredSigners}-of-${totalSigners}\n\nBIP32 Paths:\n${this.publicKeyImporterBIP32Paths()}\n\n${redeemScriptLine}${scriptsSpacer}${witnessScriptLine}\n`;\n  };\n\n  publicKeyImporterBIP32Paths = () => {\n    const { totalSigners } = this.props;\n    const publicKeyImporterBIP32Paths = [];\n    for (\n      let publicKeyImporterNum = 1;\n      publicKeyImporterNum <= totalSigners;\n      publicKeyImporterNum += 1\n    ) {\n      publicKeyImporterBIP32Paths.push(\n        this.publicKeyImporterBIP32Path(publicKeyImporterNum)\n      );\n    }\n    return publicKeyImporterBIP32Paths.join(\"\\n\");\n  };\n\n  publicKeyImporterBIP32Path = (number) => {\n    const { publicKeyImporters } = this.props;\n    const publicKeyImporter = publicKeyImporters[number];\n    const bip32Path =\n      publicKeyImporter.method === \"text\"\n        ? \"Unknown (make sure you have written this down previously!)\"\n        : publicKeyImporter.bip32Path;\n    return `  * ${publicKeyImporter.name}: ${bip32Path}: ${publicKeyImporter.publicKey}`;\n  };\n\n  title = () => {\n    const { totalSigners, requiredSigners, addressType } = this.props;\n    return (\n      <Grid container justify=\"space-between\">\n        <Grid item>\n          {requiredSigners}\n          -of-\n          {totalSigners} Multisig {addressType}{\" \"}\n        </Grid>\n        <Grid item>\n          <small>{`Public Keys: ${this.publicKeyCount()}/${totalSigners}`}</small>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  body() {\n    const { totalSigners } = this.props;\n    if (this.publicKeyCount() === totalSigners) {\n      const multisig = this.generateMultisig();\n\n      const canonicallySorted = this.publicKeysAreCanonicallySorted();\n      return (\n        <div>\n          {this.isInConflict() && <Conflict />}\n          {!canonicallySorted && (\n            <Grid container justify=\"space-between\">\n              <Grid item md={8}>\n                <FormHelperText error>\n                  WARNING: These public keys are not in the standard{\" \"}\n                  {externalLink(\n                    \"https://github.com/bitcoin/bips/blob/master/bip-0067.mediawiki\",\n                    \"BIP67 order\"\n                  )}\n                  .\n                </FormHelperText>\n              </Grid>\n              <Grid item md={4}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={this.canonicallySortPublicKeys}\n                >\n                  Sort Public Keys\n                </Button>\n              </Grid>\n            </Grid>\n          )}\n\n          <Box mt={2}>\n            <MultisigDetails multisig={multisig} />\n          </Box>\n\n          <Box mt={2}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.downloadAddressDetails}\n            >\n              Download Address Details\n            </Button>\n          </Box>\n        </div>\n      );\n    }\n    return (\n      <p>\n        {`Once you have imported all ${totalSigners} public keys, `}\n        {\"your address details will be displayed here.\"}\n      </p>\n    );\n  }\n\n  render() {\n    return (\n      <Card>\n        <CardHeader title={this.title()} />\n        <CardContent>{this.body()}</CardContent>\n      </Card>\n    );\n  }\n}\n\nAddressGenerator.propTypes = {\n  network: PropTypes.string.isRequired,\n  totalSigners: PropTypes.number.isRequired,\n  requiredSigners: PropTypes.number.isRequired,\n  addressType: PropTypes.string.isRequired,\n  publicKeyImporters: PropTypes.shape({}).isRequired,\n  sortPublicKeyImporters: PropTypes.func.isRequired,\n  setMultisigAddress: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    ...state.address,\n  };\n}\n\nconst mapDispatchToProps = {\n  sortPublicKeyImporters: sortPublicKeyImportersAction,\n  setMultisigAddress: setMultisigAddressAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressGenerator);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { validatePublicKey } from \"unchained-bitcoin\";\n\n// Components\nimport { Button, TextField, Box } from \"@material-ui/core\";\n\nclass TextPublicKeyImporter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: \"\",\n      publicKey: \"\",\n    };\n  }\n\n  render = () => {\n    const { error, publicKey } = this.state;\n    return (\n      <Box mt={2}>\n        <TextField\n          fullWidth\n          name=\"publicKey\"\n          label=\"Public Key\"\n          value={publicKey}\n          onChange={this.handleChange}\n          error={this.hasError()}\n          helperText={error}\n        />\n\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.import}\n            disabled={publicKey === \"\" || this.hasError()}\n          >\n            Add Public Key\n          </Button>\n        </Box>\n      </Box>\n    );\n  };\n\n  import = () => {\n    const { validateAndSetPublicKey } = this.props;\n    const { publicKey } = this.state;\n    validateAndSetPublicKey(publicKey, this.setError);\n  };\n\n  hasError = () => {\n    const { error } = this.state;\n    return error !== \"\";\n  };\n\n  setError = (value) => {\n    this.setState({ error: value });\n  };\n\n  handleChange = (event) => {\n    const publicKey = event.target.value;\n    const error = validatePublicKey(publicKey);\n    this.setState({ publicKey, error });\n  };\n}\n\nTextPublicKeyImporter.propTypes = {\n  publicKeyImporter: PropTypes.shape({}).isRequired,\n  validateAndSetPublicKey: PropTypes.func.isRequired,\n};\n\nexport default TextPublicKeyImporter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  convertExtendedPublicKey,\n  validateExtendedPublicKey,\n  validateExtendedPublicKeyForNetwork,\n  deriveChildPublicKey,\n} from \"unchained-bitcoin\";\n\n// Components\nimport {\n  Button,\n  TextField,\n  FormHelperText,\n  Box,\n  Grid,\n} from \"@material-ui/core\";\n\nconst DEFAULT_BIP32_PATH = \"m/0\";\n\nclass ExtendedPublicKeyPublicKeyImporter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      extendedPublicKey: \"\",\n      extendedPublicKeyError: \"\",\n      bip32PathError: \"\",\n      conversionMessage: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    this.setBIP32PathToDefault();\n  };\n\n  render = () => {\n    const { publicKeyImporter } = this.props;\n    const {\n      extendedPublicKey,\n      extendedPublicKeyError,\n      bip32PathError,\n      conversionMessage,\n    } = this.state;\n    return (\n      <div>\n        <Box mt={2}>\n          <TextField\n            fullWidth\n            name=\"extendedPublicKey\"\n            label=\"Extended Public Key\"\n            value={extendedPublicKey}\n            onChange={this.handleExtendedPublicKeyChange}\n            error={this.hasExtendedPublicKeyError()}\n            helperText={extendedPublicKeyError}\n          />\n        </Box>\n        {conversionMessage !== \"\" && (\n          <Box mb={2}>\n            <FormHelperText>\n              {conversionMessage}, this may indicate an invalid network setting,\n              if so correct setting, remove key and try again.\n            </FormHelperText>\n          </Box>\n        )}\n\n        <Box mt={2}>\n          <Grid container>\n            <Grid item md={10}>\n              <TextField\n                fullWidth\n                name=\"bip32Path\"\n                label=\"BIP32 Path (relative to xpub)\"\n                type=\"text\"\n                value={publicKeyImporter.bip32Path}\n                onChange={this.handleBIP32PathChange}\n                error={this.hasBIP32PathError()}\n                helperText={bip32PathError}\n              />\n              <FormHelperText>\n                Use the default value if you don&rsquo;t understand BIP32 paths.\n              </FormHelperText>\n            </Grid>\n            <Grid item md={2}>\n              {!this.bip32PathIsDefault() && (\n                <Button\n                  type=\"button\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  onClick={this.resetBIP32Path}\n                >\n                  Default\n                </Button>\n              )}\n            </Grid>\n          </Grid>\n          <Box mt={2}>\n            <Button\n              type=\"button\"\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              onClick={this.import}\n              disabled={extendedPublicKey === \"\" || this.hasError()}\n            >\n              Import Public Key\n            </Button>\n          </Box>\n        </Box>\n      </div>\n    );\n  };\n\n  import = () => {\n    const { network, publicKeyImporter, validateAndSetPublicKey } = this.props;\n    const { extendedPublicKey } = this.state;\n    const publicKey = deriveChildPublicKey(\n      extendedPublicKey,\n      publicKeyImporter.bip32Path,\n      network\n    );\n    validateAndSetPublicKey(publicKey, (bip32PathError) =>\n      this.setState({ bip32PathError })\n    );\n  };\n\n  setBIP32PathToDefault = () => {\n    const { validateAndSetBIP32Path } = this.props;\n    validateAndSetBIP32Path(\n      DEFAULT_BIP32_PATH,\n      () => {},\n      () => {}\n    );\n  };\n\n  hasBIP32PathError = () => {\n    const { bip32PathError } = this.state;\n    return bip32PathError !== \"\";\n  };\n\n  hasExtendedPublicKeyError = () => {\n    const { extendedPublicKeyError } = this.state;\n    return extendedPublicKeyError !== \"\";\n  };\n\n  hasError = () => this.hasBIP32PathError() || this.hasExtendedPublicKeyError();\n\n  setBIP32PathError = (value) => {\n    this.setState({ bip32PathError: value });\n  };\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError, {\n      mode: \"unhardened\",\n    });\n  };\n\n  bip32PathIsDefault = () => {\n    const { publicKeyImporter } = this.props;\n    return publicKeyImporter.bip32Path === DEFAULT_BIP32_PATH;\n  };\n\n  resetBIP32Path = () => {\n    this.setBIP32PathToDefault();\n    this.setBIP32PathError(\"\");\n  };\n\n  handleExtendedPublicKeyChange = (event) => {\n    const { network } = this.props;\n\n    const extendedPublicKey = event.target.value;\n\n    const networkError = validateExtendedPublicKeyForNetwork(\n      extendedPublicKey,\n      network\n    );\n    let actualExtendedPublicKey = extendedPublicKey;\n    if (networkError !== \"\") {\n      try {\n        actualExtendedPublicKey = convertExtendedPublicKey(\n          extendedPublicKey,\n          network === \"testnet\" ? \"tpub\" : \"xpub\"\n        );\n      } catch (error) {\n        this.setState({\n          extendedPublicKey,\n          extendedPublicKeyError: error.message,\n          conversionMessage: \"\",\n        });\n        return;\n      }\n    }\n\n    const validationError = validateExtendedPublicKey(\n      actualExtendedPublicKey,\n      network\n    );\n    if (validationError !== \"\") {\n      this.setState({\n        extendedPublicKey,\n        extendedPublicKeyError: validationError,\n        conversionMessage: \"\",\n      });\n      return;\n    }\n    const conversionMessage =\n      actualExtendedPublicKey === extendedPublicKey\n        ? \"\"\n        : `Your extended public key has been converted from ${extendedPublicKey.slice(\n            0,\n            4\n          )} to ${actualExtendedPublicKey.slice(0, 4)}`;\n\n    this.setState({\n      extendedPublicKey: actualExtendedPublicKey,\n      extendedPublicKeyError: \"\",\n      conversionMessage,\n    });\n  };\n}\n\nExtendedPublicKeyPublicKeyImporter.propTypes = {\n  network: PropTypes.string.isRequired,\n  publicKeyImporter: PropTypes.shape({\n    bip32Path: PropTypes.string,\n  }).isRequired,\n  validateAndSetPublicKey: PropTypes.func.isRequired,\n  validateAndSetBIP32Path: PropTypes.func.isRequired,\n};\n\nexport default ExtendedPublicKeyPublicKeyImporter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { HERMIT, ExportPublicKey } from \"unchained-wallets\";\n\n// Components\nimport { FormGroup, FormHelperText } from \"@material-ui/core\";\n\nimport HermitReader from \"../Hermit/HermitReader\";\n\nclass HermitPublicKeyImporter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      publicKeyError: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    const { resetBIP32Path } = this.props;\n    resetBIP32Path();\n  };\n\n  interaction = () => {\n    const { network, publicKeyImporter } = this.props;\n    return ExportPublicKey({\n      keystore: HERMIT,\n      network,\n      bip32Path: publicKeyImporter.bip32Path,\n    });\n  };\n\n  render = () => {\n    const { disableChangeMethod } = this.props;\n    const { publicKeyError } = this.state;\n    return (\n      <FormGroup>\n        <HermitReader\n          startText=\"Import Public Key\"\n          interaction={this.interaction()}\n          onStart={disableChangeMethod}\n          onSuccess={this.import}\n          onClear={this.onClear}\n        />\n        <FormHelperText error>{publicKeyError}</FormHelperText>\n      </FormGroup>\n    );\n  };\n\n  setError = (value) => {\n    this.setState({ publicKeyError: value });\n  };\n\n  import = (data) => {\n    const {\n      validateAndSetBIP32Path,\n      validateAndSetPublicKey,\n      enableChangeMethod,\n    } = this.props;\n    enableChangeMethod();\n    const { pubkey, bip32Path } = data;\n    validateAndSetBIP32Path(\n      bip32Path,\n      () => {\n        validateAndSetPublicKey(pubkey, this.setError);\n      },\n      this.setError\n    );\n  };\n\n  onClear = () => {\n    const { reset, enableChangeMethod } = this.props;\n    reset(true); // clear BIP32 path\n    this.setError(\"\");\n    enableChangeMethod();\n  };\n}\n\nHermitPublicKeyImporter.propTypes = {\n  network: PropTypes.string.isRequired,\n  publicKeyImporter: PropTypes.shape({\n    bip32Path: PropTypes.string,\n  }).isRequired,\n  validateAndSetPublicKey: PropTypes.func.isRequired,\n  validateAndSetBIP32Path: PropTypes.func.isRequired,\n  reset: PropTypes.func.isRequired,\n  resetBIP32Path: PropTypes.func.isRequired,\n  enableChangeMethod: PropTypes.func.isRequired,\n  disableChangeMethod: PropTypes.func.isRequired,\n};\n\nexport default HermitPublicKeyImporter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  UNSUPPORTED,\n  PENDING,\n  ACTIVE,\n  ERROR,\n  ExportPublicKey,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Button,\n  TextField,\n  FormHelperText,\n  Box,\n  Grid,\n} from \"@material-ui/core\";\n\nimport InteractionMessages from \"../InteractionMessages\";\n\nclass HardwareWalletPublicKeyImporter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      publicKeyError: \"\",\n      bip32PathError: \"\",\n      status: this.interaction().isSupported() ? PENDING : UNSUPPORTED,\n    };\n  }\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n  };\n\n  interaction = () => {\n    const { network, publicKeyImporter } = this.props;\n    return ExportPublicKey({\n      network,\n      keystore: publicKeyImporter.method,\n      bip32Path: publicKeyImporter.bip32Path,\n    });\n  };\n\n  render = () => {\n    const { publicKeyImporter } = this.props;\n    const { status, publicKeyError } = this.state;\n    const interaction = this.interaction();\n    if (status === UNSUPPORTED) {\n      return (\n        <FormHelperText error>\n          {interaction.messageTextFor({ status })}\n        </FormHelperText>\n      );\n    }\n    return (\n      <Box mt={2}>\n        <Grid container>\n          <Grid item md={6}>\n            <TextField\n              fullWidth\n              label=\"BIP32 Path\"\n              value={publicKeyImporter.bip32Path}\n              onChange={this.handleBIP32PathChange}\n              disabled={status !== PENDING}\n              error={this.hasBIP32PathError()}\n              helperText={this.bip32PathError()}\n            />\n          </Grid>\n          <Grid item md={6}>\n            {!this.bip32PathIsDefault() && (\n              <Button\n                type=\"button\"\n                variant=\"contained\"\n                size=\"small\"\n                onClick={this.resetBIP32Path}\n                disabled={status !== PENDING}\n              >\n                Default\n              </Button>\n            )}\n          </Grid>\n        </Grid>\n        <FormHelperText>\n          Use the default value if you don&rsquo;t understand BIP32 paths.\n        </FormHelperText>\n        <Box mt={2}>\n          <Button\n            type=\"button\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.import}\n            disabled={this.hasBIP32PathError() || status === ACTIVE}\n          >\n            Import Public Key\n          </Button>\n        </Box>\n        <InteractionMessages\n          messages={interaction.messagesFor({ state: status })}\n          excludeCodes={[\"bip32\"]}\n        />\n        <FormHelperText error>{publicKeyError}</FormHelperText>\n      </Box>\n    );\n  };\n\n  import = async () => {\n    const {\n      validateAndSetPublicKey,\n      enableChangeMethod,\n      disableChangeMethod,\n    } = this.props;\n    disableChangeMethod();\n    this.setState({ publicKeyError: \"\", status: ACTIVE });\n    try {\n      const publicKey = await this.interaction().run();\n      validateAndSetPublicKey(publicKey, (error) => {\n        this.setState({ publicKeyError: error, status: PENDING });\n      });\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n      this.setState({ publicKeyError: e.message, status: PENDING });\n    }\n\n    enableChangeMethod();\n  };\n\n  hasBIP32PathError = () => {\n    const { bip32PathError, status } = this.state;\n    return (\n      bip32PathError !== \"\" ||\n      this.interaction().hasMessagesFor({\n        state: status,\n        level: ERROR,\n        code: \"bip32\",\n      })\n    );\n  };\n\n  bip32PathError = () => {\n    const { bip32PathError, status } = this.state;\n    if (bip32PathError !== \"\") {\n      return bip32PathError;\n    }\n    return this.interaction().messageTextFor({\n      state: status,\n      level: ERROR,\n      code: \"bip32\",\n    });\n  };\n\n  setBIP32PathError = (value) => {\n    this.setState({ bip32PathError: value });\n  };\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError);\n  };\n\n  bip32PathIsDefault = () => {\n    const { publicKeyImporter, defaultBIP32Path } = this.props;\n    return publicKeyImporter.bip32Path === defaultBIP32Path;\n  };\n\n  resetBIP32Path = () => {\n    const { resetBIP32Path } = this.props;\n    this.setBIP32PathError(\"\");\n    resetBIP32Path();\n  };\n}\n\nHardwareWalletPublicKeyImporter.propTypes = {\n  network: PropTypes.string.isRequired,\n  publicKeyImporter: PropTypes.shape({\n    bip32Path: PropTypes.string,\n    method: PropTypes.string,\n  }).isRequired,\n  validateAndSetPublicKey: PropTypes.func.isRequired,\n  validateAndSetBIP32Path: PropTypes.func.isRequired,\n  resetBIP32Path: PropTypes.func.isRequired,\n  defaultBIP32Path: PropTypes.string.isRequired,\n  enableChangeMethod: PropTypes.func.isRequired,\n  disableChangeMethod: PropTypes.func.isRequired,\n};\n\nexport default HardwareWalletPublicKeyImporter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { validateBIP32Path, validatePublicKey } from \"unchained-bitcoin\";\nimport { TREZOR, LEDGER, HERMIT } from \"unchained-wallets\";\n\n// Components\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  Button,\n  Grid,\n  Box,\n} from \"@material-ui/core\";\nimport { ArrowUpward, ArrowDownward } from \"@material-ui/icons\";\n\nimport Copyable from \"../Copyable\";\nimport TextPublicKeyImporter from \"./TextPublicKeyImporter\";\nimport ExtendedPublicKeyPublicKeyImporter from \"./ExtendedPublicKeyPublicKeyImporter\";\nimport HermitPublicKeyImporter from \"./HermitPublicKeyImporter\";\nimport HardwareWalletPublicKeyImporter from \"./HardwareWalletPublicKeyImporter\";\nimport EditableName from \"../EditableName\";\nimport Conflict from \"./Conflict\";\n\n// Actions\nimport {\n  setPublicKeyImporterName,\n  setPublicKeyImporterBIP32Path,\n  resetPublicKeyImporterBIP32Path,\n  setPublicKeyImporterMethod,\n  setPublicKeyImporterPublicKey,\n  setPublicKeyImporterFinalized,\n  movePublicKeyImporterUp,\n  movePublicKeyImporterDown,\n} from \"../../actions/publicKeyImporterActions\";\n\nconst XPUB = \"xpub\";\nconst TEXT = \"text\";\n\nclass PublicKeyImporter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      disableChangeMethod: false,\n    };\n  }\n\n  title = () => {\n    const { number, totalSigners, publicKeyImporter, setName } = this.props;\n    return (\n      <Grid container justify=\"space-between\">\n        <Grid item>\n          <EditableName\n            number={number}\n            name={publicKeyImporter.name}\n            setName={setName}\n          />\n        </Grid>\n        <Grid item>\n          <Grid container justify=\"flex-end\">\n            <Button\n              type=\"button\"\n              variant=\"contained\"\n              onClick={this.moveUp}\n              disabled={number === 1}\n            >\n              <ArrowUpward />\n            </Button>\n            <span>&nbsp;</span>\n            <Button\n              type=\"button\"\n              variant=\"contained\"\n              onClick={this.moveDown}\n              disabled={number === totalSigners}\n            >\n              <ArrowDownward />\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  renderImport = () => {\n    const { publicKeyImporter, number } = this.props;\n    const { disableChangeMethod } = this.state;\n    const labelId = `public-key-${number}-importer-select-label`;\n    return (\n      <div>\n        <FormControl fullWidth>\n          <InputLabel id={labelId}>Select Method</InputLabel>\n\n          <Select\n            labelId={labelId}\n            id={`public-key-${number}-importer-select`}\n            disabled={disableChangeMethod}\n            value={publicKeyImporter.method}\n            onChange={this.handleMethodChange}\n          >\n            <MenuItem value=\"\">{\"< Select method >\"}</MenuItem>\n            <MenuItem value={TREZOR}>Trezor</MenuItem>\n            <MenuItem value={LEDGER}>Ledger</MenuItem>\n            <MenuItem value={HERMIT}>Hermit</MenuItem>\n            <MenuItem value={XPUB}>Derive from extended public key</MenuItem>\n            <MenuItem value={TEXT}>Enter as text</MenuItem>\n          </Select>\n        </FormControl>\n\n        {this.renderImportByMethod()}\n      </div>\n    );\n  };\n\n  renderImportByMethod = () => {\n    const {\n      publicKeyImporter,\n      network,\n      addressType,\n      defaultBIP32Path,\n    } = this.props;\n    if (\n      publicKeyImporter.method === TREZOR ||\n      publicKeyImporter.method === LEDGER\n    ) {\n      return (\n        <HardwareWalletPublicKeyImporter\n          publicKeyImporter={publicKeyImporter}\n          validateAndSetPublicKey={this.validateAndSetPublicKey}\n          validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n          resetBIP32Path={this.resetBIP32Path}\n          enableChangeMethod={this.enableChangeMethod}\n          disableChangeMethod={this.disableChangeMethod}\n          addressType={addressType}\n          defaultBIP32Path={defaultBIP32Path}\n          network={network}\n        />\n      );\n    }\n    if (publicKeyImporter.method === HERMIT) {\n      return (\n        <HermitPublicKeyImporter\n          publicKeyImporter={publicKeyImporter}\n          validateAndSetPublicKey={this.validateAndSetPublicKey}\n          validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n          resetBIP32Path={this.resetBIP32Path}\n          enableChangeMethod={this.enableChangeMethod}\n          disableChangeMethod={this.disableChangeMethod}\n          reset={this.reset}\n        />\n      );\n    }\n    if (publicKeyImporter.method === XPUB) {\n      return (\n        <ExtendedPublicKeyPublicKeyImporter\n          network={network}\n          publicKeyImporter={publicKeyImporter}\n          validateAndSetPublicKey={this.validateAndSetPublicKey}\n          validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n        />\n      );\n    }\n    if (publicKeyImporter.method === TEXT) {\n      return (\n        <TextPublicKeyImporter\n          publicKeyImporter={publicKeyImporter}\n          validateAndSetPublicKey={this.validateAndSetPublicKey}\n        />\n      );\n    }\n    return null;\n  };\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { number, setMethod, setPublicKey } = this.props;\n    setMethod(number, event.target.value);\n    setPublicKey(number, \"\");\n  };\n\n  disableChangeMethod = () => {\n    this.setState({ disableChangeMethod: true });\n  };\n\n  enableChangeMethod = () => {\n    this.setState({ disableChangeMethod: false });\n  };\n\n  //\n  // State\n  //\n\n  finalize = () => {\n    const { number, setFinalized } = this.props;\n    setFinalized(number, true);\n  };\n\n  reset = (resetBIP32Path) => {\n    const { number, setPublicKey, setFinalized } = this.props;\n    setPublicKey(number, \"\");\n    setFinalized(number, false);\n    if (resetBIP32Path) {\n      this.resetBIP32Path();\n    }\n  };\n\n  //\n  // Position\n  //\n\n  moveUp = (event) => {\n    const { moveUp, number } = this.props;\n    event.preventDefault();\n    moveUp(number);\n  };\n\n  moveDown = (event) => {\n    const { moveDown, number } = this.props;\n    event.preventDefault();\n    moveDown(number);\n  };\n\n  //\n  // BIP32 Path\n  //\n\n  renderBIP32Path = () => {\n    const { publicKeyImporter } = this.props;\n    if (publicKeyImporter.method !== TEXT) {\n      return (\n        <Box mt={4}>\n          <p>The BIP32 path for this public key is:</p>\n          <Grid container justify=\"center\">\n            <Copyable text={publicKeyImporter.bip32Path} code />\n          </Grid>\n          <Box mt={4}>\n            <p>\n              You will need this BIP32 path to sign for this key later.{\" \"}\n              <strong>Write down this BIP32 path!</strong>\n            </p>\n          </Box>\n        </Box>\n      );\n    }\n    return null;\n  };\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const { number, setBIP32Path } = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(number, bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback(\"\");\n      callback();\n    }\n  };\n\n  resetBIP32Path = () => {\n    const { number, resetBIP32Path } = this.props;\n    resetBIP32Path(number);\n  };\n\n  //\n  // Public Key\n  //\n\n  renderPublicKey = () => {\n    const { publicKeyImporter } = this.props;\n    return (\n      <div>\n        <p>The following public key was imported:</p>\n        <Grid container justify=\"center\">\n          <Copyable text={publicKeyImporter.publicKey} showIcon code />\n        </Grid>\n        {this.renderBIP32Path()}\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"small\"\n            onClick={() => {\n              this.reset(publicKeyImporter.method === HERMIT);\n            }}\n          >\n            Remove Public Key\n          </Button>\n        </Box>\n      </div>\n    );\n  };\n\n  validateAndSetPublicKey = (publicKey, errback, callback) => {\n    const { number, publicKeyImporters, setPublicKey } = this.props;\n    const error = validatePublicKey(publicKey);\n    setPublicKey(number, publicKey);\n    if (error) {\n      if (errback) errback(error);\n    } else if (\n      publicKey &&\n      Object.values(publicKeyImporters).find(\n        (publicKeyImporter, publicKeyImporterIndex) =>\n          publicKeyImporterIndex !== number - 1 &&\n          publicKeyImporter.publicKey === publicKey\n      )\n    ) {\n      if (errback) errback(\"This public key has already been imported.\");\n    } else {\n      if (errback) errback(\"\");\n      this.finalize();\n      if (callback) callback();\n    }\n  };\n\n  render() {\n    const { publicKeyImporter } = this.props;\n    return (\n      <Card>\n        <CardHeader title={this.title()} />\n        <CardContent>\n          {publicKeyImporter.method &&\n            publicKeyImporter.method !== TEXT &&\n            publicKeyImporter.conflict && (\n              <Conflict message=\"Warning, BIP32 path is in conflict with the network and address type settings.  Do not proceed unless you are absolutely sure you know what you are doing!\" />\n            )}\n          {publicKeyImporter.finalized\n            ? this.renderPublicKey()\n            : this.renderImport()}\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nPublicKeyImporter.propTypes = {\n  network: PropTypes.string.isRequired,\n  totalSigners: PropTypes.number.isRequired,\n  number: PropTypes.number.isRequired,\n  publicKeyImporter: PropTypes.shape({\n    bip32Path: PropTypes.string,\n    conflict: PropTypes.bool,\n    finalized: PropTypes.bool,\n    method: PropTypes.string,\n    name: PropTypes.string,\n    publicKey: PropTypes.string,\n  }).isRequired,\n  publicKeyImporters: PropTypes.shape({}).isRequired,\n  defaultBIP32Path: PropTypes.string.isRequired,\n  resetBIP32Path: PropTypes.func.isRequired,\n  addressType: PropTypes.string.isRequired,\n  setName: PropTypes.func.isRequired,\n  setBIP32Path: PropTypes.func.isRequired,\n  setMethod: PropTypes.func.isRequired,\n  setPublicKey: PropTypes.func.isRequired,\n  setFinalized: PropTypes.func.isRequired,\n  moveUp: PropTypes.func.isRequired,\n  moveDown: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...state.settings,\n    ...state.address,\n    ...{ publicKeyImporter: state.address.publicKeyImporters[ownProps.number] },\n  };\n}\n\nconst mapDispatchToProps = {\n  setName: setPublicKeyImporterName,\n  setBIP32Path: setPublicKeyImporterBIP32Path,\n  resetBIP32Path: resetPublicKeyImporterBIP32Path,\n  setMethod: setPublicKeyImporterMethod,\n  setPublicKey: setPublicKeyImporterPublicKey,\n  setFinalized: setPublicKeyImporterFinalized,\n  moveUp: movePublicKeyImporterUp,\n  moveDown: movePublicKeyImporterDown,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PublicKeyImporter);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, Box } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\n\n// Components\nimport NetworkPicker from \"../NetworkPicker\";\nimport QuorumPicker from \"../QuorumPicker\";\nimport AddressTypePicker from \"../AddressTypePicker\";\nimport AddressGenerator from \"./AddressGenerator\";\nimport PublicKeyImporter from \"./PublicKeyImporter\";\nimport ClientPicker from \"../ClientPicker\";\nimport ImportAddressesButton from \"../ImportAddressesButton\";\n\nimport { clientPropTypes } from \"../../proptypes\";\nimport \"../styles.css\";\n\nclass CreateAddress extends React.Component {\n  render = () => {\n    const { address, client } = this.props;\n    return (\n      <Box mt={2}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <h1>Address Generator</h1>\n          </Grid>\n          <Grid item md={8}>\n            {this.renderPublicKeyImporters()}\n            <Box mt={2}>\n              <AddressGenerator />\n            </Box>\n          </Grid>\n          <Grid item md={4}>\n            <Box>\n              <QuorumPicker />\n            </Box>\n            <Box mt={2}>\n              <AddressTypePicker />\n            </Box>\n            <Box mt={2}>\n              <NetworkPicker />\n            </Box>\n            <Box mt={2}>\n              <ClientPicker\n                publicNotes={\n                  <span>\n                    If you plan to use this address with your own bitcoind node\n                    you can import the address created here by switching for\n                    &quot;Public&quot; to &quot;Private&quot;. Otherwise no\n                    action is needed here.\n                  </span>\n                }\n                privateNotes={\n                  <div>\n                    <ImportAddressesButton\n                      addresses={[address]}\n                      client={client}\n                    />\n                  </div>\n                }\n              />\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  };\n\n  renderPublicKeyImporters = () => {\n    const { totalSigners } = this.props;\n    const publicKeyImporters = [];\n    for (\n      let publicKeyImporterNum = 1;\n      publicKeyImporterNum <= totalSigners;\n      publicKeyImporterNum += 1\n    ) {\n      publicKeyImporters.push(\n        <Box key={publicKeyImporterNum} mt={publicKeyImporterNum === 1 ? 0 : 2}>\n          <PublicKeyImporter number={publicKeyImporterNum} />\n        </Box>\n      );\n    }\n    return publicKeyImporters;\n  };\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...{ totalSigners: state.settings.totalSigners },\n    ...state.address,\n    client: state.client,\n  };\n}\n\nCreateAddress.propTypes = {\n  address: PropTypes.string,\n  totalSigners: PropTypes.number.isRequired,\n  client: PropTypes.shape(clientPropTypes).isRequired,\n};\n\nCreateAddress.defaultProps = {\n  address: \"\",\n};\n\nexport default connect(mapStateToProps)(CreateAddress);\n","export const START_TEST_SUITE_RUN = \"START_TEST_SUITE_RUN\";\nexport const SET_CURRENT_TEST_RUN = \"SET_CURRENT_TEST_RUN\";\n\nexport function startTestSuiteRun() {\n  return {\n    type: START_TEST_SUITE_RUN,\n  };\n}\n\nexport function setCurrentTestRun(runIndex) {\n  return {\n    type: SET_CURRENT_TEST_RUN,\n    value: runIndex,\n  };\n}\n","export const SET_KEYSTORE = \"SET_KEYSTORE\";\nexport const SET_KEYSTORE_NOTE = \"SET_KEYSTORE_NOTE\";\nexport const SET_KEYSTORE_STATUS = \"SET_KEYSTORE_STATUS\";\n\nexport function setKeystore(keystoreType, version) {\n  return {\n    type: SET_KEYSTORE,\n    keystoreType,\n    version,\n  };\n}\n\nexport function setKeystoreNote(text) {\n  return {\n    type: SET_KEYSTORE_NOTE,\n    value: text,\n  };\n}\n\nexport function setKeystoreStatus(status) {\n  return {\n    type: SET_KEYSTORE_STATUS,\n    value: status,\n  };\n}\n","export const START_TEST_RUN = \"START_TEST_RUN\";\nexport const END_TEST_RUN = \"END_TEST_RUN\";\nexport const RESET_TEST_RUN = \"RESET_TEST_RUN\";\nexport const SET_TEST_RUN_NOTE = \"SET_TEST_RUN_NOTE\";\n\nexport function startTestRun(testRunIndex) {\n  return {\n    type: START_TEST_RUN,\n    testRunIndex,\n  };\n}\n\nexport function endTestRun(testRunIndex, status, message) {\n  return {\n    type: END_TEST_RUN,\n    testRunIndex,\n    status,\n    message,\n  };\n}\n\nexport function resetTestRun(testRunIndex) {\n  return {\n    type: RESET_TEST_RUN,\n    testRunIndex,\n  };\n}\n\nexport function setTestRunNote(testRunIndex, text) {\n  return {\n    type: SET_TEST_RUN_NOTE,\n    testRunIndex,\n    note: text,\n  };\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { PropTypes } from \"prop-types\";\n\nimport { TextField } from \"@material-ui/core\";\nimport { setKeystoreNote } from \"../../actions/keystoreActions\";\nimport { setTestRunNote } from \"../../actions/testRunActions\";\n\nconst KEYSTORE_MODE = \"keystore\";\nconst TEST_RUN_MODE = \"testRun\";\n\nclass NoteBase extends React.Component {\n  handleChange = (event) => {\n    const { setNote, mode, testRunIndex } = this.props;\n    const newNote = event.target.value;\n    if (mode === TEST_RUN_MODE) {\n      setNote(testRunIndex, newNote);\n    } else {\n      setNote(newNote);\n    }\n  };\n\n  render() {\n    const { note } = this.props;\n    return (\n      <TextField\n        name=\"notes\"\n        label=\"Notes\"\n        value={note}\n        onChange={this.handleChange}\n        multiline\n        fullWidth\n        rows={3}\n      />\n    );\n  }\n}\n\nNoteBase.propTypes = {\n  note: PropTypes.string.isRequired,\n  mode: PropTypes.string.isRequired,\n  setNote: PropTypes.func.isRequired,\n  testRunIndex: PropTypes.number,\n};\n\nNoteBase.defaultProps = {\n  testRunIndex: 0,\n};\n\nconst mapStateToKeystoreNoteProps = (state) => {\n  return {\n    note: state.keystore.note,\n    mode: KEYSTORE_MODE,\n  };\n};\n\nconst mapDispatchToKeystoreNoteProps = {\n  setNote: setKeystoreNote,\n};\n\nconst mapStateToTestRunNoteProps = (state) => {\n  return {\n    mode: TEST_RUN_MODE,\n    testRunIndex: state.testSuiteRun.currentTestRunIndex,\n    note:\n      state.testSuiteRun.testRuns[state.testSuiteRun.currentTestRunIndex].note,\n  };\n};\n\nconst mapDispatchToTestRunNoteProps = {\n  setNote: setTestRunNote,\n};\n\nconst KeystoreNote = connect(\n  mapStateToKeystoreNoteProps,\n  mapDispatchToKeystoreNoteProps\n)(NoteBase);\nconst TestRunNote = connect(\n  mapStateToTestRunNoteProps,\n  mapDispatchToTestRunNoteProps\n)(NoteBase);\n\nexport { KeystoreNote, TestRunNote };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n  PENDING,\n  ACTIVE,\n  GetMetadata,\n} from \"unchained-wallets\";\n\nimport {\n  Box,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport * as keystoreActions from \"../../actions/keystoreActions\";\nimport { setErrorNotification as setErrorNotificationAction } from \"../../actions/errorNotificationActions\";\n\nimport { KeystoreNote } from \"./Note\";\nimport InteractionMessages from \"../InteractionMessages\";\n\nclass KeystorePickerBase extends React.Component {\n  detectVersion = async () => {\n    const {\n      type,\n      setKeystore,\n      setKeystoreStatus,\n      setErrorNotification,\n    } = this.props;\n    setKeystoreStatus(ACTIVE);\n    try {\n      const result = await this.interaction().run();\n      if (result) {\n        setKeystore(type, result.spec);\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n      setErrorNotification(e.message);\n    }\n    setKeystoreStatus(PENDING);\n  };\n\n  interaction = () => {\n    const { type } = this.props;\n    return GetMetadata({ keystore: type });\n  };\n\n  handleTypeChange = (event) => {\n    const { version, setKeystore } = this.props;\n    const newType = event.target.value;\n    setKeystore(newType, version);\n  };\n\n  handleVersionChange = (event) => {\n    const { type, setKeystore } = this.props;\n    const newVersion = event.target.value;\n    setKeystore(type, newVersion);\n  };\n\n  render() {\n    const { type, status, version } = this.props;\n    return (\n      <Box>\n        <Grid container spacing={2} justify=\"center\">\n          <Grid item md={4}>\n            <FormControl fullWidth>\n              <InputLabel id=\"keystore-select-label\">Type</InputLabel>\n              <Select\n                labelId=\"keystore-select-label\"\n                id=\"keystore-select\"\n                value={type}\n                onChange={this.handleTypeChange}\n              >\n                <MenuItem value=\"\">{\"< Select type >\"}</MenuItem>\n                <MenuItem value={TREZOR}>Trezor</MenuItem>\n                <MenuItem value={LEDGER}>Ledger</MenuItem>\n                <MenuItem value={HERMIT}>Hermit</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item md={6}>\n            <TextField\n              name=\"version\"\n              fullWidth\n              label=\"Version\"\n              value={version}\n              disabled={type === \"\"}\n              onChange={this.handleVersionChange}\n            />\n          </Grid>\n\n          <Grid item md={2}>\n            <Button\n              disabled={status === ACTIVE || type === \"\" || type === HERMIT}\n              onClick={this.detectVersion}\n            >\n              {status === ACTIVE ? \"Detecting...\" : \"Detect\"}\n            </Button>\n          </Grid>\n        </Grid>\n\n        {type && type !== HERMIT && (\n          <InteractionMessages\n            messages={this.interaction().messagesFor({ state: status })}\n          />\n        )}\n\n        <KeystoreNote />\n      </Box>\n    );\n  }\n}\n\nKeystorePickerBase.propTypes = {\n  setErrorNotification: PropTypes.func.isRequired,\n  setKeystore: PropTypes.func.isRequired,\n  setKeystoreStatus: PropTypes.func.isRequired,\n  status: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  version: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    ...state.keystore,\n  };\n};\n\nconst mapDispatchToProps = {\n  ...keystoreActions,\n  setErrorNotification: setErrorNotificationAction,\n};\n\nconst KeystorePicker = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(KeystorePickerBase);\n\nexport default KeystorePicker;\n","import { diffChars, diffArrays, diffJSON } from \"diff\";\n\nconst SUCCESS = \"success\";\nconst FAILURE = \"failure\";\nconst ERROR = \"error\";\n\nclass Test {\n  static SUCCESS = SUCCESS;\n\n  static FAILURE = FAILURE;\n\n  static ERROR = ERROR;\n\n  // eslint-disable-next-line class-methods-use-this\n  postprocess(thing) {\n    return thing;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  interaction() {\n    throw Error(\"Define the `interaction` method in your subclass of `Test`.\");\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  matches(expected, actual) {\n    return expected === actual;\n  }\n\n  constructor(params) {\n    this.params = params || {};\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  diff(expected, actual) {\n    if (typeof expected === \"string\" && typeof actual === \"string\") {\n      return diffChars(expected, actual);\n    }\n    if (typeof expected === \"object\" && typeof actual === \"object\") {\n      if (expected.length !== undefined && actual.length !== undefined) {\n        return diffArrays(expected, actual);\n      }\n      if (expected.length === undefined && actual.length === undefined) {\n        return diffJSON(expected, actual);\n      }\n    }\n    return null;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  supports() {\n    return true;\n  }\n\n  name() {\n    return this.params.name;\n  }\n\n  description() {\n    return this.params.description;\n  }\n\n  expected() {\n    return this.params.expected;\n  }\n\n  async actual() {\n    return this.postprocess(this.interaction().run());\n  }\n\n  async run() {\n    try {\n      const actual = await this.actual();\n      return this.resolve(actual);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n      return { status: ERROR, message: e.message };\n    }\n  }\n\n  resolve(actual) {\n    const expected = this.expected();\n    if (this.matches(expected, actual)) {\n      return { status: SUCCESS };\n    }\n    return {\n      status: FAILURE,\n      expected,\n      actual,\n      diff: this.diff(expected, actual),\n    };\n  }\n}\n\nexport default Test;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\nimport Bowser from \"bowser\";\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n  PENDING,\n  ACTIVE,\n  VERSION as UNCHAINED_WALLETS_VERSION,\n} from \"unchained-wallets\";\n\nimport {\n  Grid,\n  Box,\n  Typography,\n  Card,\n  CardHeader,\n  CardContent,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n  Tooltip,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport {\n  ThumbUp as SuccessIcon,\n  ThumbDown as FailureIcon,\n  Error as ErrorIcon,\n  Notes as NoteIcon,\n  MoreHoriz as PendingIcon,\n} from \"@material-ui/icons\";\nimport Test from \"../../tests/Test\";\n\nimport { setCurrentTestRun as setCurrentTestRunAction } from \"../../actions/testSuiteRunActions\";\n\nimport \"./TestSuiteRunSummary.css\";\n\nclass TestSuiteRunSummaryBase extends React.Component {\n  render = () => {\n    const { testSuiteRun, keystore } = this.props;\n    const environment = Bowser.getParser(window.navigator.userAgent);\n    return (\n      <Grid container direction=\"column\" spacing={3}>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Summary\" />\n            <CardContent>\n              <dl>\n                <dt>OS:</dt>\n                <dd>\n                  {environment.getOSName()} {environment.getOSVersion()}\n                </dd>\n                <dt>Browser:</dt>\n                <dd>\n                  {environment.getBrowserName()}{\" \"}\n                  {environment.getBrowserVersion()}\n                </dd>\n                <dt>unchained-wallets:</dt>\n                <dd>\n                  v.\n                  {UNCHAINED_WALLETS_VERSION}\n                </dd>\n                {keystore.type && (\n                  <Box>\n                    <dt>Keystore:</dt>\n                    <dd>\n                      {this.keystoreName(keystore.type)} {keystore.version}\n                    </dd>\n                  </Box>\n                )}\n                {keystore.note && (\n                  <Box>\n                    <dt>Notes:</dt>\n                    <dd>{keystore.note}</dd>\n                  </Box>\n                )}\n              </dl>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item>\n          <Card>\n            <CardHeader\n              title=\"Tests\"\n              subheader={`${testSuiteRun.testRuns.length} Total`}\n            />\n            <CardContent>{this.renderTests()}</CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  renderTests = () => {\n    const { testSuiteRun, keystore } = this.props;\n    if (keystore.type === \"\") {\n      return <p>Choose a keystore type to generate a test suite...</p>;\n    }\n    return (\n      <Box>\n        <Typography variant=\"h6\">\n          <span className=\"TestSuiteRunSummary-success\">\n            {\n              testSuiteRun.testRuns.filter(\n                (testRun) => testRun.status === Test.SUCCESS\n              ).length\n            }{\" \"}\n            <small>SUCCESS</small>\n          </span>\n          &nbsp; / &nbsp;\n          <span className=\"TestSuiteRunSummary-failure\">\n            {\n              testSuiteRun.testRuns.filter(\n                (testRun) => testRun.status === Test.FAILURE\n              ).length\n            }{\" \"}\n            <small>FAIL</small>\n          </span>\n          &nbsp; / &nbsp;\n          <span className=\"TestSuiteRunSummary-error\">\n            {\n              testSuiteRun.testRuns.filter(\n                (testRun) => testRun.status === Test.ERROR\n              ).length\n            }{\" \"}\n            <small>ERROR</small>\n          </span>\n        </Typography>\n\n        <Divider />\n\n        <List\n          style={{ maxHeight: \"200px\", overflow: \"auto\" }}\n          dense\n          component=\"nav\"\n        >\n          {testSuiteRun.testRuns.map(this.renderTestRun)}\n        </List>\n      </Box>\n    );\n  };\n\n  renderTestRun = (testRun, i) => {\n    const { testSuiteRun } = this.props;\n    return (\n      <ListItem\n        selected={testSuiteRun.currentTestRunIndex === i}\n        button\n        key={i}\n        onClick={this.testRunChooser(i)}\n        disabled={!testSuiteRun.started}\n      >\n        {this.renderTestRunResult(testRun)}\n        <ListItemText>\n          {testRun.test.name()}\n          {testRun.status !== PENDING && testRun.status !== ACTIVE && (\n            <small>\n              &nbsp; (\n              {moment\n                .duration(testRun.endedAt.diff(testRun.startedAt))\n                .asSeconds()}\n              s)\n            </small>\n          )}\n        </ListItemText>\n        {testRun.note && (\n          <ListItemIcon>\n            <Tooltip title={testRun.note}>\n              <NoteIcon />\n            </Tooltip>\n          </ListItemIcon>\n        )}\n      </ListItem>\n    );\n  };\n\n  renderTestRunResult = (testRun) => {\n    switch (testRun.status) {\n      case PENDING:\n        return (\n          <ListItemIcon>\n            <PendingIcon className=\"TestSuiteRunSummary-pending\" />\n          </ListItemIcon>\n        );\n      case Test.SUCCESS:\n        return (\n          <ListItemIcon>\n            <SuccessIcon className=\"TestSuiteRunSummary-success\" />\n          </ListItemIcon>\n        );\n      case Test.FAILURE:\n        return (\n          <ListItemIcon>\n            <FailureIcon className=\"TestSuiteRunSummary-failure\" />\n          </ListItemIcon>\n        );\n      case Test.ERROR:\n        return (\n          <ListItemIcon>\n            <ErrorIcon className=\"TestSuiteRunSummary-error\" />\n          </ListItemIcon>\n        );\n      case ACTIVE:\n        return (\n          <ListItemIcon>\n            <CircularProgress className=\"TestSuiteRunSummary-active\" />\n          </ListItemIcon>\n        );\n      default:\n        return null;\n    }\n  };\n\n  testRunChooser = (testRunIndex) => {\n    const { setCurrentTestRun } = this.props;\n    return () => {\n      setCurrentTestRun(testRunIndex);\n    };\n  };\n\n  keystoreName = (type) => {\n    switch (type) {\n      case TREZOR:\n        return \"Trezor\";\n      case LEDGER:\n        return \"Ledger\";\n      case HERMIT:\n        return \"Hermit\";\n      default:\n        return \"\";\n    }\n  };\n}\n\nTestSuiteRunSummaryBase.propTypes = {\n  keystore: PropTypes.shape({\n    note: PropTypes.string,\n    type: PropTypes.string,\n    version: PropTypes.string,\n  }).isRequired,\n  testSuiteRun: PropTypes.shape({\n    currentTestRunIndex: PropTypes.number,\n    started: PropTypes.bool,\n    testRuns: PropTypes.arrayOf(PropTypes.shape({})),\n  }).isRequired,\n  setCurrentTestRun: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    keystore: state.keystore,\n    testSuiteRun: state.testSuiteRun,\n  };\n};\n\nconst mapDispatchToProps = {\n  setCurrentTestRun: setCurrentTestRunAction,\n};\n\nconst TestSuiteRunSummary = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TestSuiteRunSummaryBase);\n\nexport default TestSuiteRunSummary;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { PENDING, ACTIVE, HERMIT } from \"unchained-wallets\";\nimport {\n  Box,\n  Typography,\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Button,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport {\n  ThumbUp as SuccessIcon,\n  ThumbDown as FailureIcon,\n  Error as ErrorIcon,\n} from \"@material-ui/icons\";\nimport Test from \"../../tests/Test\";\n\nimport * as testRunActions from \"../../actions/testRunActions\";\nimport * as errorNotificationActions from \"../../actions/errorNotificationActions\";\n\nimport InteractionMessages from \"../InteractionMessages\";\nimport { TestRunNote } from \"./Note\";\nimport { HermitReader, HermitDisplayer } from \"../Hermit\";\n\nimport \"./TestRun.css\";\n\nconst SPACEBAR_CODE = 32;\n\nclass TestRunBase extends React.Component {\n  componentDidMount = () => {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  };\n\n  handleKeyDown = (event) => {\n    const { status, isLastTest, nextTest } = this.props;\n    if (event.keyCode !== SPACEBAR_CODE) {\n      return;\n    }\n    if (event.target.tagName.toLowerCase() === \"textarea\") {\n      return;\n    }\n    event.preventDefault();\n    if (status === ACTIVE) {\n      return;\n    }\n    if (status === PENDING) {\n      this.start();\n    } else if (!isLastTest) {\n      nextTest();\n    }\n  };\n\n  render = () => {\n    const { test, testRunIndex, status, keystore } = this.props;\n    if (!test) {\n      return (\n        <Box>\n          <p>No test selected.</p>\n        </Box>\n      );\n    }\n    return (\n      <Box>\n        <Card>\n          <CardHeader\n            title={test.name()}\n            subheader={`Test ${testRunIndex + 1}`}\n          />\n          <CardContent>\n            {test.description()}\n            {this.renderInteractionMessages()}\n            {keystore.type === HERMIT &&\n              test.interaction().displayer &&\n              status === PENDING && (\n                <Box align=\"center\">\n                  <HermitDisplayer\n                    width={400}\n                    string={test.interaction().request()}\n                  />\n                </Box>\n              )}\n            {status === PENDING && keystore.type !== HERMIT && (\n              <Box align=\"center\">\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={this.start}\n                >\n                  Start Test\n                </Button>\n              </Box>\n            )}\n            {keystore.type === HERMIT && !this.testComplete() && (\n              <Box>\n                <HermitReader\n                  onStart={this.start}\n                  onSuccess={this.resolve}\n                  onClear={this.reset}\n                  startText=\"Scan Hermit Response\"\n                  interaction={test.interaction()}\n                />\n              </Box>\n            )}\n            {this.testComplete() && this.renderResult()}\n\n            <TestRunNote />\n          </CardContent>\n          <CardActions>\n            {status === ACTIVE && (\n              <Button disabled>\n                <CircularProgress />\n                &nbsp; Running test...\n              </Button>\n            )}\n            {this.testComplete() && (\n              <Button color=\"secondary\" onClick={this.reset}>\n                Reset Test\n              </Button>\n            )}\n          </CardActions>\n        </Card>\n      </Box>\n    );\n  };\n\n  testComplete = () => {\n    const { status } = this.props;\n    return (\n      status === Test.SUCCESS ||\n      status === Test.ERROR ||\n      status === Test.FAILURE\n    );\n  };\n\n  renderInteractionMessages = () => {\n    const { status, test } = this.props;\n    if (status === PENDING || status === ACTIVE) {\n      return (\n        <InteractionMessages\n          excludeCodes={[\"hermit.command\"]}\n          messages={test.interaction().messagesFor({ state: status })}\n        />\n      );\n    }\n    return null;\n  };\n\n  renderResult = () => {\n    const { status, message } = this.props;\n    switch (status) {\n      case Test.SUCCESS:\n        return (\n          <Box mt={2} align=\"center\">\n            <Typography variant=\"h5\" className=\"TestRun-success\">\n              <SuccessIcon />\n              &nbsp; Test passed\n            </Typography>\n          </Box>\n        );\n      case Test.FAILURE:\n        return (\n          <Box mt={2}>\n            <Box align=\"center\">\n              <Typography variant=\"h5\" className=\"TestRun-failure\">\n                <FailureIcon />\n                &nbsp; Test failed\n              </Typography>\n            </Box>\n            {message}\n          </Box>\n        );\n      case Test.ERROR:\n        return (\n          <Box mt={2}>\n            <Box align=\"center\">\n              <Typography variant=\"h5\" className=\"TestRun-error\">\n                <ErrorIcon />\n                &nbsp; Test error\n              </Typography>\n            </Box>\n            {message}\n          </Box>\n        );\n      default:\n        return null;\n    }\n  };\n\n  start = async () => {\n    const { test, keystore, testRunIndex, startTestRun } = this.props;\n    startTestRun(testRunIndex);\n    if (keystore.type === HERMIT) {\n      return;\n    }\n    const result = await test.run();\n    this.handleResult(result);\n  };\n\n  resolve = (actual) => {\n    const { test } = this.props;\n    const result = test.resolve(test.postprocess(actual));\n    this.handleResult(result);\n  };\n\n  handleResult = (result) => {\n    const { testRunIndex, endTestRun, setErrorNotification } = this.props;\n    if (result.status === Test.ERROR) {\n      setErrorNotification(result.message);\n    }\n    endTestRun(testRunIndex, result.status, this.formatMessage(result));\n  };\n\n  reset = () => {\n    const { testRunIndex, resetTestRun } = this.props;\n    resetTestRun(testRunIndex);\n  };\n\n  formatMessage = (result) => {\n    switch (result.status) {\n      case Test.FAILURE:\n        return (\n          <Box>\n            <dl>\n              <dt>Expected:</dt>\n              <dd>\n                <code className=\"TestRun-wrap\">\n                  {this.formatOutput(result.expected)}\n                </code>\n              </dd>\n              <dt>Actual:</dt>\n              <dd>\n                <code className=\"TestRun-wrap\">\n                  {this.formatOutput(result.actual)}\n                </code>\n              </dd>\n              {result.diff && (\n                <div>\n                  <dt>Diff:</dt>\n                  <dd>\n                    <code className=\"TestRun-wrap\">\n                      {result.diff.map(this.formatDiffSegment)}\n                    </code>\n                  </dd>\n                </div>\n              )}\n            </dl>\n          </Box>\n        );\n      case Test.ERROR:\n        return <code>{result.message}</code>;\n      default:\n        return \"\";\n    }\n  };\n\n  formatOutput = (output) => {\n    switch (typeof output) {\n      case \"object\":\n        return JSON.stringify(output);\n      case \"string\":\n      case \"number\":\n        return output;\n      default:\n        return \"Did not recognize output type\";\n    }\n  };\n\n  formatDiffSegment = (segment, i) => {\n    return (\n      <span\n        key={i}\n        className={`TestRun-diff-segment-${this.diffSegmentClass(segment)}`}\n      >\n        {segment.value}\n      </span>\n    );\n  };\n\n  diffSegmentClass = (segment) => {\n    if (segment.added) {\n      return \"added\";\n    }\n    if (segment.removed) {\n      return \"removed\";\n    }\n    return \"common\";\n  };\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    ...{ keystore: state.keystore },\n    ...(state.testSuiteRun.testRuns[ownProps.testRunIndex] || {}),\n    ...{ testRunIndex: ownProps.testRunIndex },\n  };\n};\n\nconst mapDispatchToProps = {\n  ...testRunActions,\n  ...errorNotificationActions,\n};\n\nconst TestRun = connect(mapStateToProps, mapDispatchToProps)(TestRunBase);\n\nTestRunBase.propTypes = {\n  endTestRun: PropTypes.func.isRequired,\n  isLastTest: PropTypes.bool.isRequired,\n  keystore: PropTypes.shape({\n    type: PropTypes.string.isRequired,\n  }).isRequired,\n  message: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({})])\n    .isRequired,\n  nextTest: PropTypes.func.isRequired,\n  resetTestRun: PropTypes.func.isRequired,\n  testRunIndex: PropTypes.number.isRequired,\n  test: PropTypes.shape({\n    name: PropTypes.func.isRequired,\n    description: PropTypes.func.isRequired,\n    interaction: PropTypes.func.isRequired,\n    run: PropTypes.func.isRequired,\n    resolve: PropTypes.func.isRequired,\n    postprocess: PropTypes.func.isRequired,\n  }),\n  setErrorNotification: PropTypes.func.isRequired,\n  startTestRun: PropTypes.func.isRequired,\n  status: PropTypes.string.isRequired,\n};\n\nTestRunBase.defaultProps = {\n  test: {},\n};\n\nexport default TestRun;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { TEST_FIXTURES } from \"unchained-bitcoin\";\n\nimport { Grid } from \"@material-ui/core\";\n\nconst { bip39Phrase } = TEST_FIXTURES;\n\nclass SeedBase extends React.Component {\n  static renderSeedWord(word, i) {\n    return (\n      <li key={i}>\n        <code>{word}</code>\n      </li>\n    );\n  }\n\n  render() {\n    return (\n      <Grid container>\n        <Grid item md={3}>\n          <ol>{bip39Phrase.slice(0, 6).map(SeedBase.renderSeedWord)}</ol>\n        </Grid>\n        <Grid item md={3}>\n          <ol start={7}>\n            {bip39Phrase.slice(6, 12).map(SeedBase.renderSeedWord)}\n          </ol>\n        </Grid>\n        <Grid item md={3}>\n          <ol start={13}>\n            {bip39Phrase.slice(12, 18).map(SeedBase.renderSeedWord)}\n          </ol>\n        </Grid>\n        <Grid item md={3}>\n          <ol start={19}>\n            {bip39Phrase.slice(18, 24).map(SeedBase.renderSeedWord)}\n          </ol>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = () => {\n  return {};\n};\n\nconst mapDispatchToProps = {};\n\nconst Seed = connect(mapStateToProps, mapDispatchToProps)(SeedBase);\n\nexport default Seed;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { PENDING, ACTIVE } from \"unchained-wallets\";\n\nimport {\n  Grid,\n  Box,\n  Card,\n  CardHeader,\n  CardContent,\n  Button,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport { ArrowBack, ArrowForward } from \"@material-ui/icons\";\nimport * as testSuiteRunActions from \"../../actions/testSuiteRunActions\";\nimport KeystorePicker from \"./KeystorePicker\";\nimport TestSuiteRunSummary from \"./TestSuiteRunSummary\";\nimport TestRun from \"./TestRun\";\nimport Seed from \"./Seed\";\n\nconst SPACEBAR_CODE = 32;\nconst LEFT_ARROW_CODE = 37;\nconst UP_ARROW_CODE = 38;\nconst RIGHT_ARROW_CODE = 39;\nconst DOWN_ARROW_CODE = 40;\n\nclass TestSuiteRunBase extends React.Component {\n  componentDidMount = () => {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  };\n\n  currentTestIsActive = () => {\n    const { testSuiteRun } = this.props;\n    if (!testSuiteRun.started) {\n      return false;\n    }\n    const test = testSuiteRun.testRuns[testSuiteRun.currentTestRunIndex];\n    if (!test) {\n      return false;\n    }\n    return test.status === ACTIVE;\n  };\n\n  handleKeyDown = (event) => {\n    const { testSuiteRun } = this.props;\n    if (testSuiteRun.started) {\n      if (this.currentTestIsActive()) {\n        return;\n      }\n      switch (event.keyCode) {\n        case LEFT_ARROW_CODE:\n          if (!this.isFirstTest()) {\n            this.previousTest();\n          }\n          break;\n        case UP_ARROW_CODE:\n          if (!this.isFirstTest()) {\n            this.previousTest();\n          }\n          break;\n        case RIGHT_ARROW_CODE:\n          if (!this.isLastTest()) {\n            this.nextTest();\n          }\n          break;\n        case DOWN_ARROW_CODE:\n          if (!this.isLastTest()) {\n            this.nextTest();\n          }\n          break;\n        default:\n          break;\n      }\n    } else {\n      if (event.keyCode !== SPACEBAR_CODE) {\n        return;\n      }\n      const tag = event.target.tagName.toLowerCase();\n      if (tag === \"textarea\" || tag === \"input\") {\n        return;\n      }\n      event.preventDefault();\n      if (this.startDisabled()) {\n        return;\n      }\n      this.start();\n    }\n  };\n\n  render = () => {\n    const { testSuiteRun } = this.props;\n    return (\n      <Box mt={2}>\n        {testSuiteRun.started && (\n          <Box mt={2} mb={2}>\n            <LinearProgress\n              variant=\"determinate\"\n              value={\n                100 *\n                (testSuiteRun.testRuns.filter(\n                  (testRun) =>\n                    testRun.status !== PENDING && testRun.status !== ACTIVE\n                ).length /\n                  testSuiteRun.testRuns.length)\n              }\n            />\n          </Box>\n        )}\n        <Grid container spacing={3}>\n          <Grid item md={4}>\n            <TestSuiteRunSummary />\n          </Grid>\n          <Grid item md={8}>\n            {this.renderBody()}\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  };\n\n  renderSetup = () => {\n    return (\n      <Grid container direction=\"column\" spacing={3}>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Choose Keystore\" />\n            <CardContent>\n              <KeystorePicker />\n              <Box align=\"center\" mt={2}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={this.startDisabled()}\n                  onClick={this.start}\n                  type=\"submit\"\n                >\n                  Begin Test Suite\n                </Button>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Keystore Setup\" />\n            <CardContent>\n              <p>\n                Ensure your keystore has been initialized with the following\n                seed:\n              </p>\n              <Seed />\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  renderBody = () => {\n    const { testSuiteRun } = this.props;\n    if (testSuiteRun.started) {\n      return (\n        <Box>\n          <TestRun\n            isLastTest={this.isLastTest()}\n            nextTest={this.nextTest}\n            testRunIndex={testSuiteRun.currentTestRunIndex}\n          />\n          <Box mt={2}>\n            <Grid container justify=\"space-between\">\n              <Grid item>\n                <Button\n                  disabled={this.isFirstTest() || this.currentTestIsActive()}\n                  onClick={this.previousTest}\n                >\n                  <ArrowBack /> &nbsp; Previous\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  disabled={this.isLastTest() || this.currentTestIsActive()}\n                  onClick={this.nextTest}\n                >\n                  Next &nbsp; <ArrowForward />\n                </Button>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      );\n    }\n    return this.renderSetup();\n  };\n\n  start = () => {\n    const { startTestSuiteRun } = this.props;\n    startTestSuiteRun();\n  };\n\n  startDisabled = () => {\n    const { testSuiteRun, keystore } = this.props;\n    return (\n      keystore.type === \"\" ||\n      keystore.status === ACTIVE ||\n      testSuiteRun.started ||\n      testSuiteRun.testRuns.length === 0\n    );\n  };\n\n  isFirstTest = () => {\n    const { testSuiteRun } = this.props;\n    return testSuiteRun.currentTestRunIndex === 0;\n  };\n\n  isLastTest = () => {\n    const { testSuiteRun } = this.props;\n    return (\n      testSuiteRun.currentTestRunIndex === testSuiteRun.testRuns.length - 1\n    );\n  };\n\n  previousTest = () => {\n    const { testSuiteRun, setCurrentTestRun } = this.props;\n    if (testSuiteRun.currentTestRunIndex < 1) {\n      return;\n    }\n    setCurrentTestRun(testSuiteRun.currentTestRunIndex - 1);\n  };\n\n  nextTest = () => {\n    const { testSuiteRun, setCurrentTestRun } = this.props;\n    if (testSuiteRun.currentTestRunIndex === testSuiteRun.testRuns.length - 1) {\n      return;\n    }\n    setCurrentTestRun(testSuiteRun.currentTestRunIndex + 1);\n  };\n}\n\nTestSuiteRunBase.propTypes = {\n  keystore: PropTypes.shape({\n    note: PropTypes.string,\n    type: PropTypes.string,\n    status: PropTypes.string,\n    version: PropTypes.string,\n  }).isRequired,\n  setCurrentTestRun: PropTypes.func.isRequired,\n  startTestSuiteRun: PropTypes.func.isRequired,\n  testSuiteRun: PropTypes.shape({\n    currentTestRunIndex: PropTypes.number,\n    started: PropTypes.bool,\n    testRuns: PropTypes.arrayOf(PropTypes.shape({})),\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    keystore: state.keystore,\n    testSuiteRun: state.testSuiteRun,\n  };\n};\n\nconst mapDispatchToProps = {\n  ...testSuiteRunActions,\n};\n\nconst TestSuiteRun = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TestSuiteRunBase);\n\nexport default TestSuiteRun;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  P2SH,\n  P2SH_P2WSH,\n  P2WSH,\n  generateMultisigFromHex,\n  validateHex,\n  multisigRequiredSigners,\n  multisigTotalSigners,\n} from \"unchained-bitcoin\";\nimport {\n  Box,\n  Grid,\n  Card,\n  CardHeader,\n  CardContent,\n  Button,\n  TextField,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport { fetchAddressUTXOs } from \"../../blockchain\";\n\n// Components\nimport MultisigDetails from \"../MultisigDetails\";\nimport ImportAddressesButton from \"../ImportAddressesButton\";\n\n// Actions\nimport { setFrozen as setFrozenAction } from \"../../actions/settingsActions\";\nimport {\n  choosePerformSpend as chosePerformSpendAction,\n  setRequiredSigners as setRequiredSignersAction,\n  setTotalSigners as setTotalSignersAction,\n  setInputs as setInputsAction,\n} from \"../../actions/transactionActions\";\nimport {\n  chooseConfirmOwnership as chooseConfirmOwnershipAction,\n  setOwnershipMultisig as setOwnershipMultisigAction,\n} from \"../../actions/ownershipActions\";\n\nclass ScriptEntry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      scriptHex: \"\",\n      scriptError: \"\",\n      fetchUTXOsError: \"\",\n      fetchedUTXOs: false,\n    };\n  }\n\n  disabled = () => {};\n\n  hasScriptError = () => {\n    const { scriptError } = this.state;\n    return scriptError !== \"\";\n  };\n\n  hasFetchUTXOsError = () => {\n    const { fetchUTXOsError } = this.state;\n    return fetchUTXOsError !== \"\";\n  };\n\n  hasError = () => this.hasScriptError() || this.hasFetchUTXOsError();\n\n  //\n  // Script\n  //\n\n  scriptName = () => {\n    const { addressType } = this.props;\n    switch (addressType) {\n      case P2SH:\n        return \"redeem\";\n      case P2SH_P2WSH:\n        return \"witness\";\n      case P2WSH:\n        return \"witness\";\n      default:\n        return null;\n    }\n  };\n\n  scriptTitle = () => {\n    const scriptName = this.scriptName();\n    return scriptName.charAt(0).toUpperCase() + scriptName.substring(1);\n  };\n\n  handleScriptChange = (event) => {\n    const scriptHex = event.target.value;\n    let scriptError = \"\";\n\n    if (scriptHex === \"\") {\n      scriptError = `${this.scriptTitle()} script cannot be blank.`;\n    }\n\n    if (\n      scriptError === \"\" &&\n      (scriptHex.includes(\"\\n\") ||\n        scriptHex.includes(\"\\t\") ||\n        scriptHex.includes(\" \"))\n    ) {\n      scriptError = `${this.scriptTitle()} script should not contain spaces, tabs, or newlines.`;\n    }\n\n    if (scriptError === \"\") {\n      const hexError = validateHex(scriptHex);\n      if (hexError !== \"\") {\n        scriptError = `${this.scriptTitle()} script is not valid hex.`;\n      }\n    }\n\n    if (scriptHex !== \"\" && scriptError === \"\") {\n      try {\n        this.generateMultisig(scriptHex);\n      } catch (parseError) {\n        // eslint-disable-next-line no-console\n        console.error(parseError);\n        scriptError = `Failed to parse ${this.scriptName()} script.`;\n      }\n    }\n\n    this.setState({\n      scriptHex,\n      scriptError,\n      fetchUTXOsError: \"\",\n      fetchedUTXOs: false,\n    });\n  };\n\n  generateMultisig = (newScriptHex) => {\n    const { network, addressType } = this.props;\n    const { scriptHex } = this.state;\n    let multisigScriptHex = scriptHex;\n    if (newScriptHex) multisigScriptHex = newScriptHex;\n\n    return generateMultisigFromHex(network, addressType, multisigScriptHex);\n  };\n\n  //\n  // Details\n  //\n\n  renderDetails = () => {\n    const { fetchUTXOsError } = this.state;\n    const { chosePerformSpend, choseConfirmOwnership, client } = this.props;\n    const multisig = this.generateMultisig();\n    const buttonsDisabled = chosePerformSpend || choseConfirmOwnership;\n    return (\n      <div>\n        <MultisigDetails multisig={multisig} />\n        <Box mt={2}>\n          <Grid container spacing={3}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                onClick={this.performSpend}\n                disabled={buttonsDisabled}\n              >\n                Spend from this address\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                size=\"large\"\n                onClick={this.confirmOwnership}\n                disabled={buttonsDisabled}\n              >\n                Confirm ownership\n              </Button>\n            </Grid>\n          </Grid>\n          <FormHelperText error>{fetchUTXOsError}</FormHelperText>\n        </Box>\n        {client.type === \"private\" && (\n          <Box mt={2}>\n            <ImportAddressesButton\n              addresses={[multisig.address]}\n              client={client}\n            />\n          </Box>\n        )}\n      </div>\n    );\n  };\n\n  //\n  // Perform Spend\n  //\n\n  performSpend = async () => {\n    const {\n      setRequiredSigners,\n      setTotalSigners,\n      setInputs,\n      setFrozen,\n      choosePerformSpend,\n    } = this.props;\n    const multisig = this.generateMultisig();\n    const fetchUTXOsResult = await this.fetchUTXOs(multisig);\n    if (fetchUTXOsResult) {\n      const { utxos, balanceSats } = fetchUTXOsResult;\n      let fetchUTXOsError = \"\";\n      if (balanceSats.isLessThanOrEqualTo(0)) {\n        fetchUTXOsError = \"This address has a zero balance.\";\n      }\n      this.setState({\n        fetchedUTXOs: true,\n        fetchUTXOsError,\n      });\n      if (fetchUTXOsError === \"\") {\n        // transaction methods expect inputs to have a multisig prop\n        // that provides input info such as address\n        const inputs = utxos.map((utxo) => {\n          const input = { ...utxo, multisig };\n          return input;\n        });\n        setInputs(inputs);\n        setRequiredSigners(multisigRequiredSigners(multisig));\n        setTotalSigners(multisigTotalSigners(multisig));\n        setFrozen(true);\n        choosePerformSpend();\n      }\n    } else {\n      this.setState({\n        fetchedUTXOs: false,\n        fetchUTXOsError: \"Failed to fetch UTXOs.\",\n      });\n    }\n  };\n\n  fetchUTXOs = async (multisig) => {\n    const { network, client } = this.props;\n    const addressData = await fetchAddressUTXOs(\n      multisig.address,\n      network,\n      client\n    );\n\n    if (addressData && addressData.utxos && addressData.utxos.length)\n      return addressData;\n\n    return false;\n  };\n\n  //\n  // Confirm Ownership\n  //\n\n  confirmOwnership = () => {\n    const {\n      chooseConfirmOwnership,\n      setOwnershipMultisig,\n      setFrozen,\n    } = this.props;\n    setOwnershipMultisig(this.generateMultisig());\n    chooseConfirmOwnership();\n    setFrozen(true);\n  };\n\n  //\n  // Render\n  //\n  render() {\n    const { scriptHex, scriptError, fetchedUTXOs } = this.state;\n\n    return (\n      <Card>\n        <CardHeader title={`Enter ${this.scriptTitle()} Script`} />\n        <CardContent>\n          <form>\n            <TextField\n              fullWidth\n              multiline\n              autoFocus\n              variant=\"outlined\"\n              label={`${this.scriptTitle()} Script`}\n              value={scriptHex}\n              rows={5}\n              onChange={this.handleScriptChange}\n              disabled={fetchedUTXOs && !this.hasFetchUTXOsError()}\n              helperText={scriptError}\n              error={scriptError !== \"\"}\n            />\n          </form>\n\n          {scriptHex !== \"\" && !this.hasScriptError() ? (\n            this.renderDetails()\n          ) : (\n            <p>\n              Enter a valid {this.scriptName()} script to generate an address to\n              spend funds from.\n            </p>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nScriptEntry.propTypes = {\n  addressType: PropTypes.string.isRequired,\n  choosePerformSpend: PropTypes.func.isRequired,\n  chosePerformSpend: PropTypes.bool.isRequired,\n  choseConfirmOwnership: PropTypes.bool.isRequired,\n  chooseConfirmOwnership: PropTypes.func.isRequired,\n  client: PropTypes.shape({\n    type: PropTypes.string,\n  }).isRequired,\n  network: PropTypes.string.isRequired,\n  setFrozen: PropTypes.func.isRequired,\n  setInputs: PropTypes.func.isRequired,\n  setOwnershipMultisig: PropTypes.func.isRequired,\n  setRequiredSigners: PropTypes.func.isRequired,\n  setTotalSigners: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    ...{ client: state.client },\n    ...{\n      choseConfirmOwnership: state.spend.ownership.chosen,\n      chosePerformSpend: state.spend.transaction.chosen,\n    },\n  };\n}\n\nconst mapDispatchToProps = {\n  choosePerformSpend: chosePerformSpendAction,\n  setInputs: setInputsAction,\n  setTotalSigners: setTotalSignersAction,\n  setRequiredSigners: setRequiredSignersAction,\n  chooseConfirmOwnership: chooseConfirmOwnershipAction,\n  setOwnershipMultisig: setOwnershipMultisigAction,\n  setFrozen: setFrozenAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScriptEntry);\n","export const CHOOSE_CONFIRM_OWNERSHIP = \"CHOOSE_CONFIRM_OWNERSHIP\";\nexport const SET_OWNERSHIP_MULTISIG = \"SET_OWNERSHIP_MULTISIG\";\nexport const RESET_PUBLIC_KEY_IMPORTER = \"RESET_PUBLIC_KEY_IMPORTER\";\nexport const RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH =\n  \"RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_BIP32_PATH =\n  \"SET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_METHOD = \"SET_PUBLIC_KEY_IMPORTER_METHOD\";\nexport const SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY =\n  \"SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY\";\n\nexport function chooseConfirmOwnership() {\n  return {\n    type: CHOOSE_CONFIRM_OWNERSHIP,\n  };\n}\n\nexport function setOwnershipMultisig(value) {\n  return {\n    type: SET_OWNERSHIP_MULTISIG,\n    value,\n  };\n}\n\nexport function resetPublicKeyImporter() {\n  return {\n    type: RESET_PUBLIC_KEY_IMPORTER,\n  };\n}\n\nexport function resetPublicKeyImporterBIP32Path() {\n  return {\n    type: RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  };\n}\n\nexport function setPublicKeyImporterBIP32Path(value) {\n  return {\n    type: SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n    value,\n  };\n}\n\nexport function setPublicKeyImporterMethod(value) {\n  return {\n    type: SET_PUBLIC_KEY_IMPORTER_METHOD,\n    value,\n  };\n}\n\nexport function setPublicKeyImporterPublicKey(value) {\n  return {\n    type: SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n    value,\n  };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { validatePublicKey, validateBIP32Path } from \"unchained-bitcoin\";\nimport { TREZOR, LEDGER, HERMIT } from \"unchained-wallets\";\n\n// Components\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport { styled } from \"@material-ui/core/styles\";\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl,\n  Button,\n  Typography,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport HardwareWalletPublicKeyImporter from \"../CreateAddress/HardwareWalletPublicKeyImporter\";\nimport HermitPublicKeyImporter from \"../CreateAddress/HermitPublicKeyImporter\";\n\n// Actions\nimport {\n  resetPublicKeyImporter,\n  resetPublicKeyImporterBIP32Path,\n  setPublicKeyImporterBIP32Path,\n  setPublicKeyImporterMethod,\n  setPublicKeyImporterPublicKey,\n} from \"../../actions/ownershipActions\";\n\nimport \"react-table/react-table.css\";\n\nclass ConfirmOwnership extends React.Component {\n  titleRef = React.createRef();\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      disableChangeMethod: false,\n    };\n  }\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n    this.scrollToTitle();\n  };\n\n  componentDidUpdate = () => {\n    this.scrollToTitle();\n  };\n\n  scrollToTitle = () => {\n    this.titleRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { setMethod } = this.props;\n    setMethod(event.target.value);\n    this.reset();\n  };\n\n  disableChangeMethod = () => {\n    this.setState({ disableChangeMethod: true });\n  };\n\n  enableChangeMethod = () => {\n    this.setState({ disableChangeMethod: false });\n  };\n\n  //\n  // State\n  //\n\n  reset = () => {\n    const { reset } = this.props;\n    reset();\n  };\n\n  //\n  // BIP32 Path\n  //\n\n  resetBIP32Path = () => {\n    const { resetBIP32Path } = this.props;\n    resetBIP32Path();\n  };\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const { setBIP32Path } = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback(\"\");\n      callback();\n    }\n  };\n\n  //\n  // Public Keey & Confirmation\n  //\n\n  validateAndSetPublicKey = (publicKey, errback, callback) => {\n    const { setPublicKey } = this.props;\n    const error = validatePublicKey(publicKey);\n    setPublicKey(publicKey);\n    if (error) {\n      if (errback) errback(error);\n    } else {\n      if (errback) errback(\"\");\n      if (callback) callback();\n    }\n  };\n\n  renderConfirmation = () => {\n    const { publicKeys, publicKeyImporter } = this.props;\n    if (publicKeyImporter.publicKey === \"\") {\n      return null;\n    }\n    if (publicKeys.includes(publicKeyImporter.publicKey)) {\n      const GreenListItemIcon = styled(ListItemIcon)({ color: \"green\" });\n      return (\n        <List>\n          <ListItem>\n            <GreenListItemIcon>\n              <CheckIcon />\n            </GreenListItemIcon>\n            <ListItemText>\n              The public key exported at BIP32 path{\" \"}\n              <code>{publicKeyImporter.bip32Path}</code> is present in the\n              provided redeem script.\n            </ListItemText>\n          </ListItem>\n        </List>\n      );\n    }\n    return (\n      <List>\n        <ListItem>\n          <ListItemIcon>\n            <Typography color=\"error\">\n              <ClearIcon />\n            </Typography>\n          </ListItemIcon>\n          <ListItemText>\n            The public key exported at BIP32 path{\" \"}\n            <code>{publicKeyImporter.bip32Path}</code> is not present in the\n            provided redeem script.\n          </ListItemText>\n        </ListItem>\n      </List>\n    );\n  };\n\n  renderImportByMethod = () => {\n    const { network, publicKeyImporter, defaultBIP32Path } = this.props;\n    if (publicKeyImporter.method === HERMIT) {\n      return (\n        <HermitPublicKeyImporter\n          publicKeyImporter={publicKeyImporter}\n          validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n          validateAndSetPublicKey={this.validateAndSetPublicKey}\n          resetBIP32Path={this.resetBIP32Path}\n          enableChangeMethod={this.enableChangeMethod}\n          disableChangeMethod={this.disableChangeMethod}\n          reset={this.reset}\n        />\n      );\n    }\n    if (\n      publicKeyImporter.method === TREZOR ||\n      publicKeyImporter.method === LEDGER\n    ) {\n      return (\n        <HardwareWalletPublicKeyImporter\n          network={network}\n          publicKeyImporter={publicKeyImporter}\n          validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n          resetBIP32Path={this.resetBIP32Path}\n          defaultBIP32Path={defaultBIP32Path}\n          validateAndSetPublicKey={this.validateAndSetPublicKey}\n          enableChangeMethod={this.enableChangeMethod}\n          disableChangeMethod={this.disableChangeMethod}\n        />\n      );\n    }\n    return null;\n  };\n\n  render() {\n    const { publicKeyImporter } = this.props;\n    const { disableChangeMethod } = this.state;\n    const labelId = \"public-key-importer-select-label\";\n    const selectLabelId = `${labelId}-select`;\n\n    return (\n      <Card>\n        <CardHeader ref={this.titleRef} title=\"Confirm Ownership\" />\n        <CardContent>\n          <form>\n            <p>How will you confirm your ownership of this address?</p>\n\n            <FormControl fullWidth>\n              <InputLabel id={labelId}>Select Method</InputLabel>\n\n              <Select\n                labelId={selectLabelId}\n                id=\"public-key-importer-select\"\n                disabled={disableChangeMethod}\n                value={publicKeyImporter.method}\n                onChange={this.handleMethodChange}\n              >\n                <MenuItem value=\"\">{\"< Select method >\"}</MenuItem>\n                <MenuItem value={TREZOR}>Trezor</MenuItem>\n                <MenuItem value={LEDGER}>Ledger</MenuItem>\n                <MenuItem value={HERMIT}>Hermit</MenuItem>\n              </Select>\n            </FormControl>\n\n            {this.renderImportByMethod()}\n\n            {this.renderConfirmation()}\n\n            {publicKeyImporter.method !== \"\" && (\n              <Button\n                variant=\"contained\"\n                size=\"small\"\n                color=\"secondary\"\n                role=\"button\"\n                onClick={this.reset}\n              >\n                Start Again\n              </Button>\n            )}\n          </form>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nConfirmOwnership.propTypes = {\n  defaultBIP32Path: PropTypes.string.isRequired,\n  network: PropTypes.string.isRequired,\n  publicKeys: PropTypes.arrayOf(PropTypes.string).isRequired,\n  publicKeyImporter: PropTypes.shape({\n    bip32Path: PropTypes.string,\n    method: PropTypes.string,\n    publicKey: PropTypes.string,\n  }).isRequired,\n  reset: PropTypes.func.isRequired,\n  resetBIP32Path: PropTypes.func.isRequired,\n  setMethod: PropTypes.func.isRequired,\n  setPublicKey: PropTypes.func.isRequired,\n  setBIP32Path: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return state.spend.ownership;\n}\n\nconst mapDispatchToProps = {\n  setMethod: setPublicKeyImporterMethod,\n  setBIP32Path: setPublicKeyImporterBIP32Path,\n  setPublicKey: setPublicKeyImporterPublicKey,\n  resetBIP32Path: resetPublicKeyImporterBIP32Path,\n  reset: resetPublicKeyImporter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmOwnership);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\n// Components\nimport { Grid, Box, Card, CardContent, Typography } from \"@material-ui/core\";\nimport NetworkPicker from \"../NetworkPicker\";\nimport ClientPicker from \"../ClientPicker\";\nimport AddressTypePicker from \"../AddressTypePicker\";\nimport ScriptEntry from \"./ScriptEntry\";\nimport UTXOSet from \"./UTXOSet\";\nimport OutputsForm from \"./OutputsForm\";\nimport SignatureImporter from \"./SignatureImporter\";\nimport Transaction from \"./Transaction\";\nimport ConfirmOwnership from \"./ConfirmOwnership\";\nimport UnsignedTransaction from \"../UnsignedTransaction\";\nimport \"../styles.css\";\n\nclass Spend extends React.Component {\n  render = () => {\n    return (\n      <Box mt={2}>\n        <Grid container spacing={3}>\n          <Grid item md={8}>\n            <Box>\n              <ScriptEntry />\n            </Box>\n            {this.renderBody()}\n          </Grid>\n          <Grid item md={4}>\n            <Box>\n              <AddressTypePicker />\n            </Box>\n            <Box mt={2}>\n              <NetworkPicker />\n            </Box>\n            <Box mt={2}>\n              <ClientPicker />\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  };\n\n  renderBody = () => {\n    const { transaction, ownership } = this.props;\n    if (ownership.chosen) {\n      return (\n        <Box mt={2}>\n          <ConfirmOwnership />\n        </Box>\n      );\n    }\n    return (\n      <Box>\n        {this.spendable() && (\n          <Box>\n            <Box mt={2}>\n              <Card>\n                <CardContent>\n                  <UTXOSet\n                    inputs={transaction.inputs}\n                    inputsTotalSats={transaction.inputsTotalSats}\n                  />\n                </CardContent>\n              </Card>\n            </Box>\n            <Box mt={2}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h5\">Define Outputs</Typography>\n                  <OutputsForm />\n                </CardContent>\n              </Card>\n            </Box>\n          </Box>\n        )}\n\n        {transaction.finalizedOutputs && (\n          <div>\n            <Box mt={2}>\n              <UnsignedTransaction />\n            </Box>\n\n            <Box mt={2}>{this.renderSignatureImporters()}</Box>\n          </div>\n        )}\n\n        {this.signaturesFinalized() && (\n          <Box mt={2}>\n            <Transaction />\n          </Box>\n        )}\n      </Box>\n    );\n  };\n\n  renderSignatureImporters = () => {\n    const { transaction } = this.props;\n    const signatureImporters = [];\n    for (\n      let signatureImporterNum = 1;\n      signatureImporterNum <= transaction.requiredSigners;\n      signatureImporterNum += 1\n    ) {\n      signatureImporters.push(\n        <Box key={signatureImporterNum} mt={2}>\n          <SignatureImporter number={signatureImporterNum} />\n        </Box>\n      );\n    }\n    return signatureImporters;\n  };\n\n  spendable = () => {\n    const { transaction } = this.props;\n    return transaction.inputs.length > 0;\n  };\n\n  signaturesFinalized = () => {\n    const { signatureImporters } = this.props;\n    return (\n      Object.values(signatureImporters).length > 0 &&\n      Object.values(signatureImporters).every(\n        (signatureImporter) => signatureImporter.finalized\n      )\n    );\n  };\n\n  confirmOwnership = (value) => {\n    // TODO can this entire function be removed? The states aren't being used.\n    // eslint-disable-next-line react/no-unused-state\n    this.setState({ addressFinalized: true, confirmOwnership: value });\n  };\n}\n\nSpend.propTypes = {\n  transaction: PropTypes.shape({\n    finalizedOutputs: PropTypes.bool,\n    inputs: PropTypes.arrayOf(PropTypes.shape({})),\n    inputsTotalSats: PropTypes.shape({}),\n    requiredSigners: PropTypes.number,\n  }).isRequired,\n  ownership: PropTypes.shape({\n    chosen: PropTypes.bool,\n  }).isRequired,\n  signatureImporters: PropTypes.shape({}).isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return state.spend;\n}\n\nexport default connect(mapStateToProps)(Spend);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  AppBar,\n  Toolbar,\n  Button,\n  makeStyles,\n  Typography,\n  Menu,\n  MenuItem,\n  Box,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  menuItem: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    paddingX: theme.spacing(3),\n  },\n  menuLink: {\n    color: \"inherit\",\n    textDecoration: \"none\",\n  },\n}));\n\n// This needs to be a class component because it uses a ref\n// eslint-disable-next-line react/prefer-stateless-function\nclass NavItem extends React.Component {\n  render() {\n    const { href, title, classes, handleClose } = this.props;\n    return (\n      <a href={href} className={classes.menuLink}>\n        <MenuItem className={classes.menuItem} onClick={handleClose}>\n          {title}\n        </MenuItem>\n      </a>\n    );\n  }\n}\n\nNavItem.propTypes = {\n  href: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  classes: PropTypes.shape({\n    menuLink: PropTypes.string.isRequired,\n    menuItem: PropTypes.string.isRequired,\n  }).isRequired,\n  handleClose: PropTypes.func.isRequired,\n};\n\nconst Navbar = () => {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const menuItems = [\n    { href: \"#/wallet\", title: \"Wallet\" },\n    { href: \"#/address\", title: \"Create Address\" },\n    { href: \"#/script\", title: \"Script Explorer\" },\n    { href: \"#/help\", title: \"Help\" },\n  ];\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            <Button color=\"inherit\" href=\"#/\">\n              Caravan\n            </Button>\n          </Typography>\n\n          <Button\n            aria-controls=\"simple-menu\"\n            aria-haspopup=\"true\"\n            color=\"inherit\"\n            onClick={handleClick}\n          >\n            <Box mr={3}>\n              <Typography>Menu</Typography>\n            </Box>\n            <MenuIcon />\n          </Button>\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={() => setAnchorEl(null)}\n          >\n            {menuItems.map(({ href, title }) => (\n              <NavItem\n                href={href}\n                title={title}\n                classes={classes}\n                key={href}\n                handleClose={() => setAnchorEl(null)}\n              />\n            ))}\n          </Menu>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport { Grid, Box } from \"@material-ui/core\";\nimport { externalLink } from \"../utils\";\nimport { version } from \"../../package.json\";\n\n// Components\n\n// Assets\nconst logo = require(\"../images/logo.png\");\n\nconst Footer = () => (\n  <Box mt={2}>\n    <hr />\n    <Grid container justify=\"space-between\" alignItems=\"center\">\n      <Grid item sm={2}>\n        {externalLink(\n          \"https://www.unchained-capital.com\",\n          <img\n            src={logo}\n            className=\"logo\"\n            alt=\"Unchained Capital logo\"\n            height=\"32\"\n          />\n        )}\n      </Grid>\n\n      <Grid item sm={6}>\n        <p>\n          Copyright&nbsp;\n          {new Date(Date.now()).getFullYear()} by Unchained Capital and released\n          under an MIT license.\n        </p>\n      </Grid>\n\n      <Grid item sm={1} align=\"right\">\n        <p> v{version} </p>\n      </Grid>\n    </Grid>\n  </Box>\n);\n\nexport default Footer;\n","import { Box, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst reportingURL = \"https://github.com/unchained-capital/caravan/issues\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      errorInfo,\n      error,\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    const { error, errorInfo } = this.state;\n    if (errorInfo) {\n      return (\n        <Box m={4}>\n          <Box m={2}>\n            <Typography variant=\"h3\" component=\"h1\">\n              Something went wrong.\n            </Typography>\n          </Box>\n          <Box m={2}>\n            <Typography variant=\"body1\">\n              Let us know what happened on{\" \"}\n              <a href={reportingURL} target=\"_blank\" rel=\"noopener noreferrer\">\n                github\n              </a>\n              .\n            </Typography>\n          </Box>\n          <Box mx={2} my={3}>\n            <details style={{ whiteSpace: \"pre-wrap\" }}>\n              {error && error.toString()}\n              <br />\n              {errorInfo.componentStack}\n            </details>\n          </Box>\n        </Box>\n      );\n    }\n\n    return children;\n  }\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n\nexport default ErrorBoundary;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { Snackbar, IconButton } from \"@material-ui/core\";\nimport { Close } from \"@material-ui/icons\";\nimport { clearErrorNotification as clearErrorNotificationAction } from \"../actions/errorNotificationActions\";\n\nconst ErrorNotificationBase = (props) => {\n  const { open, message, clearErrorNotification } = props;\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"left\",\n      }}\n      open={open}\n      /* autoHideDuration={6000} */\n      onClose={clearErrorNotification}\n      ContentProps={{\n        \"aria-describedby\": \"error-notification\",\n      }}\n      message={<span id=\"error-notification\">{message}</span>}\n      action={[\n        <IconButton\n          key=\"close\"\n          aria-label=\"close\"\n          color=\"inherit\"\n          onClick={clearErrorNotification}\n        >\n          <Close />\n        </IconButton>,\n      ]}\n    />\n  );\n};\n\nErrorNotificationBase.propTypes = {\n  open: PropTypes.bool.isRequired,\n  message: PropTypes.string.isRequired,\n  clearErrorNotification: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  return state.errorNotification;\n};\n\nconst mapDispatchToProps = {\n  clearErrorNotification: clearErrorNotificationAction,\n};\n\nconst ErrorNotification = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ErrorNotificationBase);\n\nexport default ErrorNotification;\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\n\n// Components\nimport { CssBaseline, Container } from \"@material-ui/core\";\nimport { SnackbarProvider } from \"notistack\";\n\nimport Help from \"./Help\";\nimport Wallet from \"./Wallet\";\nimport CreateAddress from \"./CreateAddress\";\nimport TestSuiteRun from \"./TestSuiteRun\";\nimport ScriptExplorer from \"./ScriptExplorer\";\nimport Navbar from \"./Navbar\";\nimport Footer from \"./Footer\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport ErrorNotification from \"./ErrorNotification\";\n\nconst App = () => (\n  <div className=\"App\">\n    <CssBaseline />\n    <SnackbarProvider maxSnack={3}>\n      <Container maxWidth=\"lg\">\n        <Navbar />\n        <ErrorBoundary>\n          <Router>\n            <Switch>\n              <Route path=\"/test\" component={TestSuiteRun} />\n              <Route path=\"/address\" component={CreateAddress} />\n              <Redirect from=\"/spend\" to=\"/script\" />\n              <Route path=\"/script\" component={ScriptExplorer} />\n              <Route path=\"/wallet\" component={Wallet} />\n              <Route path=\"/help\" component={Help} />\n              <Route path=\"/\" component={Help} />\n            </Switch>\n          </Router>\n          <ErrorNotification />\n        </ErrorBoundary>\n        <Footer />\n      </Container>\n    </SnackbarProvider>\n  </div>\n);\n\nexport default App;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { createBrowserHistory } from \"history\";\nimport { connect } from \"react-redux\";\n\nimport App from \"./App\";\n\nclass AppContainer extends Component {\n  history = createBrowserHistory();\n\n  componentDidMount() {\n    const { resetApp } = this.props;\n    // Listen for changes to the current location\n    // and reset the redux store which is needed\n    // to avoid conflicts in the state between views/pages\n    this.unlisten = this.history.listen(() => {\n      resetApp();\n    });\n  }\n\n  componentWillUnmount() {\n    this.unlisten();\n  }\n\n  render() {\n    return <App />;\n  }\n}\n\nAppContainer.propTypes = {\n  resetApp: PropTypes.func.isRequired,\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    resetApp: () => dispatch({ type: \"RESET_APP_STATE\" }),\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(AppContainer);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // TODO FIXME\n      // eslint-disable-next-line  no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              // eslint-disable-next-line no-console\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","function updateState(state, change) {\n  return {\n    ...state,\n    ...change,\n  };\n}\n\nexport default updateState;\n","import { MAINNET, P2SH } from \"unchained-bitcoin\";\n\nimport updateState from \"./utils\";\nimport {\n  SET_NETWORK,\n  SET_TOTAL_SIGNERS,\n  SET_REQUIRED_SIGNERS,\n  SET_STARTING_ADDRESS_INDEX,\n  SET_ADDRESS_TYPE,\n  SET_FROZEN,\n} from \"../actions/settingsActions\";\n\nconst initialState = {\n  network: MAINNET,\n  totalSigners: 3,\n  requiredSigners: 2,\n  addressType: P2SH,\n  startingAddressIndex: 0,\n  frozen: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_NETWORK:\n      return updateState(state, { network: action.value });\n    case SET_TOTAL_SIGNERS:\n      return updateState(state, { totalSigners: action.value });\n    case SET_REQUIRED_SIGNERS:\n      return updateState(state, { requiredSigners: action.value });\n    case SET_STARTING_ADDRESS_INDEX:\n      return updateState(state, { startingAddressIndex: action.value });\n    case SET_ADDRESS_TYPE:\n      return updateState(state, { addressType: action.value });\n    case SET_FROZEN:\n      return updateState(state, { frozen: action.value });\n    default:\n      return state;\n  }\n};\n","import updateState from \"./utils\";\nimport {\n  SET_CLIENT_TYPE,\n  SET_CLIENT_URL,\n  SET_CLIENT_USERNAME,\n  SET_CLIENT_PASSWORD,\n  SET_CLIENT_URL_ERROR,\n  SET_CLIENT_USERNAME_ERROR,\n  SET_CLIENT_PASSWORD_ERROR,\n} from \"../actions/clientActions\";\n\nconst initialState = {\n  type: \"public\",\n  url: \"\",\n  username: \"\",\n  password: \"\",\n  urlError: \"\",\n  usernameError: \"\",\n  passwordError: \"\",\n  status: \"unknown\",\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_CLIENT_TYPE:\n      return updateState(state, { type: action.value });\n    case SET_CLIENT_URL:\n      return updateState(state, { url: action.value });\n    case SET_CLIENT_USERNAME:\n      return updateState(state, { username: action.value });\n    case SET_CLIENT_PASSWORD:\n      return updateState(state, { password: action.value });\n    case SET_CLIENT_URL_ERROR:\n      return updateState(state, { urlError: action.value });\n    case SET_CLIENT_USERNAME_ERROR:\n      return updateState(state, { usernameError: action.value });\n    case SET_CLIENT_PASSWORD_ERROR:\n      return updateState(state, { passwordError: action.value });\n\n    default:\n      return state;\n  }\n};\n","import BigNumber from \"bignumber.js\";\nimport {\n  RESET_NODES_SPEND,\n  RESET_NODES_FETCH_ERRORS,\n} from \"../actions/walletActions\";\nimport updateState from \"./utils\";\n\nconst intialSliceState = {\n  present: true,\n  bip32Path: \"\",\n  publicKeys: [],\n  multisig: {},\n  address: \"\",\n  balanceSats: new BigNumber(0),\n  utxos: [],\n  change: false,\n  spend: false,\n  fetchedUTXOs: false,\n  fetchUTXOsError: \"\",\n  addressUsed: false,\n  addressKnown: true,\n};\n\nconst initialState = {\n  nodes: {},\n  trailingEmptyNodes: 0,\n  fetchUTXOsErrors: 0,\n  balanceSats: new BigNumber(0),\n  spendingSats: new BigNumber(0),\n  nextNode: null,\n};\n\nfunction getNextNode(state) {\n  const nodes = Object.values(state.nodes);\n  for (let i = 0; i < nodes.length; i += 1) {\n    const node = nodes[i];\n    if (node.balanceSats.isEqualTo(0) && !node.addressUsed) {\n      return node;\n    }\n  }\n  return null;\n}\n\nfunction updateSlice(state, action) {\n  const slice = {\n    ...intialSliceState,\n    ...(state.nodes[action.value.bip32Path] || {}),\n    ...action.value,\n  };\n  const newSlices = {};\n  newSlices[slice.bip32Path] = slice;\n\n  const updatedState = {\n    ...state,\n    ...{\n      nodes: {\n        ...state.nodes,\n        ...newSlices,\n      },\n    },\n  };\n  if (typeof action.value.spend !== \"undefined\") {\n    // TODO (BUCK): I'm not sure this works. If you change\n    // the output value of a spend before spending, this will just\n    // add the new value to the previous value. We also can't just\n    // reset spendingSats because there might be multiple outputs\n    updatedState.spendingSats = action.value.spend\n      ? state.spendingSats.plus(slice.balanceSats)\n      : state.spendingSats.minus(slice.balanceSats);\n  }\n\n  if (action.value.balanceSats) {\n    const currentNodeBalance = state.nodes[slice.bip32Path]\n      ? state.nodes[slice.bip32Path].balanceSats\n      : BigNumber(0);\n    updatedState.balanceSats = state.balanceSats.plus(\n      slice.balanceSats.minus(currentNodeBalance)\n    );\n  }\n\n  let trailingEmptyNodes = 0;\n  let fetchUTXOsErrors = 0;\n  const allBIP32Paths = Object.keys(updatedState.nodes);\n  allBIP32Paths.sort((p1, p2) => {\n    const p1Segments = (p1 || \"\").split(\"/\");\n    const p2Segments = (p2 || \"\").split(\"/\");\n    const p1Index = parseInt(p1Segments[2], 10);\n    const p2Index = parseInt(p2Segments[2], 10);\n    return p1Index - p2Index;\n  });\n  let nodeFoundWithValue = false;\n  for (let i = 0; i < allBIP32Paths.length; i += 1) {\n    const bip32Path = allBIP32Paths[allBIP32Paths.length - (i + 1)];\n    const otherNode = updatedState.nodes[bip32Path];\n    if (otherNode.fetchedUTXOs) {\n      if (\n        otherNode.balanceSats.isEqualTo(0) &&\n        !otherNode.addressUsed &&\n        !nodeFoundWithValue\n      ) {\n        trailingEmptyNodes += 1;\n      } else nodeFoundWithValue = true;\n    }\n    if (otherNode.fetchUTXOsError !== \"\") {\n      fetchUTXOsErrors += 1;\n    }\n  }\n  updatedState.trailingEmptyNodes = trailingEmptyNodes;\n  updatedState.fetchUTXOsErrors = fetchUTXOsErrors;\n  updatedState.nextNode = getNextNode(updatedState);\n  return updatedState;\n}\n\nfunction resetSpend(state) {\n  const updatedState = { ...state };\n  Object.values(updatedState.nodes).forEach((node) => {\n    node.spend = false; // eslint-disable-line no-param-reassign\n  });\n  return updatedState;\n}\n\nexport default (actionType) => (state = initialState, action) => {\n  switch (action.type) {\n    case RESET_NODES_SPEND:\n      return resetSpend(state);\n    case RESET_NODES_FETCH_ERRORS:\n      return updateState(state, {\n        fetchUTXOsErrors: 0,\n        nodes: Object.values(state.nodes).reduce((allNodes, thisNode) => {\n          const updatedNodes = allNodes;\n          updatedNodes[thisNode.bip32Path] = {\n            ...thisNode,\n            fetchUTXOsError: \"\",\n          };\n          return updatedNodes;\n        }, {}),\n      });\n    case actionType:\n      return updateSlice(state, action);\n    default:\n      return state;\n  }\n};\n","import { MAINNET, P2SH, multisigBIP32Root } from \"unchained-bitcoin\";\nimport updateState from \"./utils\";\nimport {\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME,\n  RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE,\n} from \"../actions/extendedPublicKeyImporterActions\";\nimport {\n  SET_TOTAL_SIGNERS,\n  SET_NETWORK,\n  SET_ADDRESS_TYPE,\n} from \"../actions/settingsActions\";\n\nfunction fingerprint(state) {\n  const timestamp = new Date().getTime().toString();\n  const extendedPublicKeys = Object.values(state.extendedPublicKeyImporters)\n    .map(\n      (extendedPublicKeyImporter) => extendedPublicKeyImporter.extendedPublicKey\n    )\n    .join(\"\");\n  return `${timestamp}-${extendedPublicKeys}`;\n}\n\nconst initialExtendedPublicKeyImporterState = (name = \"\") => ({\n  name,\n  bip32Path: multisigBIP32Root(P2SH, MAINNET),\n  bip32PathModified: false,\n  method: \"\",\n  extendedPublicKey: \"\",\n  finalized: false,\n  confliect: false,\n});\n\nfunction createInitialState() {\n  const extendedPublicKeyImporters = [...Array(4).keys()]\n    .slice(1)\n    .reduce((importers, index) => {\n      return {\n        ...importers,\n        [index]: initialExtendedPublicKeyImporterState(\n          `Extended Public Key ${index}`\n        ),\n      };\n    }, {});\n\n  return {\n    extendedPublicKeyImporters,\n    defaultBIP32Path: multisigBIP32Root(P2SH, MAINNET),\n    network: MAINNET,\n    addressType: P2SH,\n    fingerprint: \"\",\n    finalizedNetwork: \"\",\n    finalizedAddressType: \"\",\n    configuring: true,\n  };\n}\n\nfunction setConflict(extendedPublicKeyImporter, state) {\n  if (state.finalizedNetwork) {\n    // eslint-disable-next-line no-param-reassign\n    extendedPublicKeyImporter.conflict =\n      state.finalizedNetwork !== state.network ||\n      state.finalizedAddressType !== state.addressType;\n  }\n}\n\nfunction updateExtendedPublicKeyImporterState(state, action, field) {\n  const extendedPublicKeyImporterChange = {};\n  extendedPublicKeyImporterChange[field] = action.value;\n  const newState = {\n    ...state,\n    ...{ nodes: {} },\n  };\n  newState.extendedPublicKeyImporters[action.number] = updateState(\n    state.extendedPublicKeyImporters[action.number],\n    extendedPublicKeyImporterChange\n  );\n  const importCount = Object.values(newState.extendedPublicKeyImporters).reduce(\n    (sum, current) => {\n      return sum + current.finalized;\n    },\n    0\n  );\n  if (\n    importCount === Object.keys(newState.extendedPublicKeyImporters).length &&\n    field === \"finalized\"\n  ) {\n    newState.configuring = false;\n  }\n  setConflict(newState.extendedPublicKeyImporters[action.number], state);\n  return updateState(newState, { fingerprint: fingerprint(newState) });\n}\n\nfunction updateTotalSigners(state, action) {\n  const totalSigners = action.value;\n  const extendedPublicKeyImporters = {};\n  for (\n    let extendedPublicKeyImporterNum = 1;\n    extendedPublicKeyImporterNum <= totalSigners;\n    extendedPublicKeyImporterNum += 1\n  ) {\n    extendedPublicKeyImporters[extendedPublicKeyImporterNum] =\n      state.extendedPublicKeyImporters[extendedPublicKeyImporterNum] ||\n      initialExtendedPublicKeyImporterState(\n        `Extended Public Key ${extendedPublicKeyImporterNum}`\n      );\n  }\n  let finalizedCount = 0;\n\n  Object.keys(extendedPublicKeyImporters).forEach((index) => {\n    const importer = extendedPublicKeyImporters[index];\n    if (importer.finalized) finalizedCount += 1;\n  });\n\n  return {\n    ...state,\n    configuring: finalizedCount < totalSigners,\n    ...{ extendedPublicKeyImporters },\n  };\n}\n\nfunction updateImporterPaths(state, newState, bip32Path) {\n  for (\n    let extendedPublicKeyImporterNum = 1;\n    extendedPublicKeyImporterNum <=\n    Object.values(state.extendedPublicKeyImporters).length;\n    extendedPublicKeyImporterNum += 1\n  ) {\n    const extendedPublicKeyImporter =\n      newState.extendedPublicKeyImporters[extendedPublicKeyImporterNum];\n    if (!extendedPublicKeyImporter.bip32PathModified) {\n      if (!extendedPublicKeyImporter.finalized)\n        extendedPublicKeyImporter.bip32Path = bip32Path;\n    }\n    setConflict(extendedPublicKeyImporter, newState);\n  }\n}\n\nfunction updateNetwork(state, action) {\n  const { addressType } = state;\n  const network = action.value;\n  const bip32Path = multisigBIP32Root(addressType, network);\n  const newState = { ...state, ...{ network, defaultBIP32Path: bip32Path } };\n  updateImporterPaths(state, newState, bip32Path);\n  return newState;\n}\n\nfunction updateAddressType(state, action) {\n  const addressType = action.value;\n  const { network } = state;\n  const bip32Path = multisigBIP32Root(addressType, network);\n  const newState = {\n    ...state,\n    ...{ addressType, defaultBIP32Path: bip32Path },\n  };\n  updateImporterPaths(state, newState, bip32Path);\n  return newState;\n}\n\nfunction updateFinalizedSettings(state, action) {\n  const newState = { ...state };\n  if (action.value === true && state.finalizedNetwork === \"\") {\n    newState.finalizedNetwork = state.network;\n    newState.finalizedAddressType = state.addressType;\n  } else if (action.value === false && state.finalizedNetwork !== \"\") {\n    const finalizedCount = Object.values(\n      state.extendedPublicKeyImporters\n    ).reduce((count, importer) => {\n      if (importer.finalized === true) return count + 1;\n      return count;\n    }, 0);\n    if (finalizedCount === 1) {\n      // last one to be removed\n      newState.finalizedNetwork = \"\";\n      newState.finalizedAddressType = \"\";\n      Object.values(newState.extendedPublicKeyImporters).forEach(\n        // eslint-disable-next-line no-param-reassign,no-return-assign\n        (importer) => (importer.conflict = false)\n      );\n    }\n  }\n  return newState;\n}\n\nexport default (state = createInitialState(), action) => {\n  switch (action.type) {\n    case SET_NETWORK:\n      return updateNetwork(state, action);\n    case SET_ADDRESS_TYPE:\n      return updateAddressType(state, action);\n    case SET_TOTAL_SIGNERS:\n      return updateTotalSigners(state, action);\n    case SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME:\n      return updateExtendedPublicKeyImporterState(state, action, \"name\");\n    case SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n      return updateExtendedPublicKeyImporterState(\n        updateExtendedPublicKeyImporterState(state, action, \"bip32Path\"),\n        { number: action.number, value: true },\n        \"bip32PathModified\"\n      );\n    case RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n      return updateExtendedPublicKeyImporterState(\n        updateExtendedPublicKeyImporterState(\n          state,\n          { number: action.number, value: state.defaultBIP32Path },\n          \"bip32Path\"\n        ),\n        { number: action.number, value: false },\n        \"bip32PathModified\"\n      );\n    case SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD:\n      return updateExtendedPublicKeyImporterState(state, action, \"method\");\n    case SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY:\n      return updateExtendedPublicKeyImporterState(\n        state,\n        action,\n        \"extendedPublicKey\"\n      );\n    case SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED:\n      return updateExtendedPublicKeyImporterState(\n        updateFinalizedSettings(state, action),\n        action,\n        \"finalized\"\n      );\n    case SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE:\n      return { ...state, ...{ configuring: action.value } };\n    default:\n      return state;\n  }\n};\n","import { MAINNET, P2SH, multisigBIP32Path } from \"unchained-bitcoin\";\nimport updateState from \"./utils\";\nimport {\n  SET_TOTAL_SIGNERS,\n  SET_NETWORK,\n  SET_ADDRESS_TYPE,\n} from \"../actions/settingsActions\";\nimport {\n  SET_PUBLIC_KEY_IMPORTER_NAME,\n  RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_METHOD,\n  SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n  SET_PUBLIC_KEY_IMPORTER_FINALIZED,\n  MOVE_PUBLIC_KEY_IMPORTER_UP,\n  MOVE_PUBLIC_KEY_IMPORTER_DOWN,\n  SORT_PUBLIC_KEY_IMPORTERS,\n  UPDATE_MULTISIG_ADDRESS,\n} from \"../actions/publicKeyImporterActions\";\n\nconst TEXT = \"text\";\n\nfunction fingerprint(state) {\n  const timestamp = new Date().getTime().toString();\n  const publicKeys = Object.values(state.publicKeyImporters)\n    .map((publicKeyImporter) => publicKeyImporter.publicKey)\n    .join(\"\");\n  return `${timestamp}-${publicKeys}`;\n}\n\nconst initialPublicKeyImporterState = (name = \"\") => ({\n  name,\n  bip32Path: multisigBIP32Path(P2SH, MAINNET),\n  bip32PathModified: false,\n  method: \"\",\n  publicKey: \"\",\n  finalized: false,\n  conflict: false,\n});\n\n// function to create a new initial state so that it\n// is properly initialized when the state is cleared\n// i.e. a \"deep clean\" through the object\nfunction createInitialState() {\n  // need create new objects for each pub key importer\n  // otherwise does not properly reset when state is cleared\n  const publicKeyImporters = [...Array(4).keys()]\n    .slice(1)\n    .reduce((importers, index) => {\n      return {\n        ...importers,\n        [index]: initialPublicKeyImporterState(`Public Key ${index}`),\n      };\n    }, {});\n\n  return {\n    publicKeyImporters,\n    defaultBIP32Path: multisigBIP32Path(P2SH, MAINNET),\n    network: MAINNET,\n    addressType: P2SH,\n    fingerprint: \"\",\n    finalizedNetwork: \"\",\n    finalizedAddressType: \"\",\n    address: \"\",\n  };\n}\n\nfunction movePublicKeyImporterUp(state, action) {\n  if (action.number === 1) {\n    return state;\n  }\n  const newState = {\n    ...state,\n  };\n  const abovePublicKeyImporter = state.publicKeyImporters[action.number - 1];\n  const publicKeyImporter = state.publicKeyImporters[action.number];\n  newState.publicKeyImporters[action.number - 1] = publicKeyImporter;\n  newState.publicKeyImporters[action.number] = abovePublicKeyImporter;\n  return updateState(newState, { fingerprint: fingerprint(newState) });\n}\n\nfunction movePublicKeyImporterDown(state, action) {\n  if (action.number === Object.values(state.publicKeyImporters).length) {\n    return state;\n  }\n  const newState = {\n    ...state,\n  };\n  const belowPublicKeyImporter = state.publicKeyImporters[action.number + 1];\n  const publicKeyImporter = state.publicKeyImporters[action.number];\n  newState.publicKeyImporters[action.number + 1] = publicKeyImporter;\n  newState.publicKeyImporters[action.number] = belowPublicKeyImporter;\n  return updateState(newState, { fingerprint: fingerprint(newState) });\n}\n\nfunction sortPublicKeyImporters(state) {\n  const publicKeyImporters = Object.values(state.publicKeyImporters);\n  const sortedPublicKeys = publicKeyImporters\n    .map((publicKeyImporter) => publicKeyImporter.publicKey)\n    .sort();\n  const sortedPublicKeyImporters = sortedPublicKeys.map((publicKey) => {\n    return publicKeyImporters.find(\n      (publicKeyImporter) => publicKeyImporter.publicKey === publicKey\n    );\n  });\n  const publicKeyImportersChange = {};\n  for (\n    let publicKeyImporterNum = 1;\n    publicKeyImporterNum <= sortedPublicKeyImporters.length;\n    publicKeyImporterNum += 1\n  ) {\n    publicKeyImportersChange[publicKeyImporterNum] =\n      sortedPublicKeyImporters[publicKeyImporterNum - 1];\n  }\n\n  const newState = {\n    ...state,\n    ...{ publicKeyImporters: publicKeyImportersChange },\n  };\n  return updateState(newState, { fingerprint: fingerprint(newState) });\n}\n\nfunction setConflict(publicKeyImporterIndex, state) {\n  if (state.finalizedNetwork) {\n    const publicKeyImporters = { ...state.publicKeyImporters };\n    const publicKeyImporter = publicKeyImporters[publicKeyImporterIndex];\n\n    publicKeyImporter.conflict =\n      state.finalizedNetwork !== state.network ||\n      state.finalizedAddressType !== state.addressType;\n\n    return updateState(state, { publicKeyImporters });\n  }\n  return state;\n}\n\nfunction updatePublicKeyImporterState(state, action, field) {\n  const publicKeyImporterChange = {};\n  publicKeyImporterChange[field] = action.value;\n  let newState = {\n    ...state,\n  };\n  newState.publicKeyImporters[action.number] = updateState(\n    state.publicKeyImporters[action.number],\n    publicKeyImporterChange\n  );\n  newState = setConflict(action.number, state);\n  return updateState(newState, { fingerprint: fingerprint(newState) });\n}\n\nfunction updateTotalSigners(state, action) {\n  const totalSigners = action.value;\n  const publicKeyImporters = {};\n  for (\n    let publicKeyImporterNum = 1;\n    publicKeyImporterNum <= totalSigners;\n    publicKeyImporterNum += 1\n  ) {\n    publicKeyImporters[publicKeyImporterNum] = state.publicKeyImporters[\n      publicKeyImporterNum\n    ] || {\n      ...initialPublicKeyImporterState(),\n      ...{\n        name: `Public Key ${publicKeyImporterNum}`,\n      },\n    };\n  }\n  const newState = {\n    ...state,\n    ...{ publicKeyImporters, stub: action.type },\n  };\n  return updateState(newState, { fingerprint: fingerprint(newState) });\n}\n\nfunction updateImporterPaths(state, bip32Path) {\n  let newState = { ...state };\n  for (\n    let publicKeyImporterNum = 1;\n    publicKeyImporterNum <= Object.values(state.publicKeyImporters).length;\n    publicKeyImporterNum += 1\n  ) {\n    const publicKeyImporter = newState.publicKeyImporters[publicKeyImporterNum];\n    if (!publicKeyImporter.bip32PathModified) {\n      if (!publicKeyImporter.finalized) publicKeyImporter.bip32Path = bip32Path;\n    }\n    newState = setConflict(publicKeyImporterNum, newState);\n  }\n  return newState;\n}\n\nfunction updateNetwork(state, action) {\n  const network = action.value;\n  const { addressType } = state;\n  const bip32Path = multisigBIP32Path(addressType, network);\n  let newState = { ...state, ...{ network, defaultBIP32Path: bip32Path } };\n  newState = updateImporterPaths(newState, bip32Path);\n  return newState;\n}\n\nfunction updateAddressType(state, action) {\n  const { network } = state;\n  const addressType = action.value;\n  const bip32Path = multisigBIP32Path(addressType, network);\n  let newState = {\n    ...state,\n    ...{ addressType, defaultBIP32Path: bip32Path },\n  };\n  newState = updateImporterPaths(newState, bip32Path);\n  return newState;\n}\n\nfunction updateFinalizedSettings(state, action) {\n  const newState = { ...state };\n  if (\n    action.value === true &&\n    state.finalizedNetwork === \"\" &&\n    newState.publicKeyImporters[action.number].method !== TEXT\n  ) {\n    newState.finalizedNetwork = state.network;\n    newState.finalizedAddressType = state.addressType;\n  } else if (action.value === false && state.finalizedNetwork !== \"\") {\n    const finalizedCount = Object.values(state.publicKeyImporters).reduce(\n      (count, importer) => {\n        if (importer.finalized === true && importer.method !== TEXT)\n          return count + 1;\n        return count;\n      },\n      0\n    );\n    if (finalizedCount === 1) {\n      // last one to be removed\n      newState.finalizedNetwork = \"\";\n      newState.finalizedAddressType = \"\";\n      Object.values(newState.publicKeyImporters).forEach(\n        // eslint-disable-next-line no-param-reassign,no-return-assign\n        (importer) => (importer.conflict = false)\n      );\n    }\n  }\n  return newState;\n}\n\nexport default (state = createInitialState(), action) => {\n  switch (action.type) {\n    case SET_NETWORK:\n      return updateNetwork(state, action);\n    case SET_ADDRESS_TYPE:\n      return updateAddressType(state, action);\n    case SET_TOTAL_SIGNERS:\n      return updateTotalSigners(state, action);\n    case SET_PUBLIC_KEY_IMPORTER_NAME:\n      return updatePublicKeyImporterState(state, action, \"name\");\n    case RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n      return updatePublicKeyImporterState(\n        updatePublicKeyImporterState(\n          state,\n          { number: action.number, value: state.defaultBIP32Path },\n          \"bip32Path\"\n        ),\n        { number: action.number, value: false },\n        \"bip32PathModified\"\n      );\n    case SET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n      return updatePublicKeyImporterState(\n        updatePublicKeyImporterState(state, action, \"bip32Path\"),\n        { number: action.number, value: true },\n        \"bip32PathModified\"\n      );\n    case SET_PUBLIC_KEY_IMPORTER_METHOD:\n      return updatePublicKeyImporterState(state, action, \"method\");\n    case SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY:\n      return updatePublicKeyImporterState(state, action, \"publicKey\");\n    case SET_PUBLIC_KEY_IMPORTER_FINALIZED:\n      return updatePublicKeyImporterState(\n        updateFinalizedSettings(state, action),\n        action,\n        \"finalized\"\n      );\n    case MOVE_PUBLIC_KEY_IMPORTER_UP:\n      return movePublicKeyImporterUp(state, action);\n    case MOVE_PUBLIC_KEY_IMPORTER_DOWN:\n      return movePublicKeyImporterDown(state, action);\n    case SORT_PUBLIC_KEY_IMPORTERS:\n      return sortPublicKeyImporters(state, action);\n    case UPDATE_MULTISIG_ADDRESS:\n      return updateState(state, { address: action.value });\n    default:\n      return state;\n  }\n};\n","import {\n  UPDATE_WALLET_NAME,\n  RESET_WALLET_VIEW,\n  WALLET_MODES,\n  UPDATE_WALLET_MODE,\n  INITIAL_LOAD_COMPLETE,\n} from \"../actions/walletActions\";\nimport updateState from \"./utils\";\n\nconst initialState = {\n  walletMode: WALLET_MODES.VIEW,\n  walletName: \"My Multisig Wallet\",\n  nodesLoaded: false,\n};\n\nfunction resetWalletViews(state) {\n  return updateState(state, {\n    walletMode: WALLET_MODES.VIEW,\n  });\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_WALLET_MODE:\n      return updateState(state, { walletMode: action.value });\n    case UPDATE_WALLET_NAME:\n      return updateState(state, { walletName: action.value });\n    case RESET_WALLET_VIEW:\n      return resetWalletViews(state);\n    case INITIAL_LOAD_COMPLETE:\n      return updateState(state, { nodesLoaded: true });\n    default:\n      return state;\n  }\n};\n","import {\n  P2SH,\n  MAINNET,\n  multisigAddressType,\n  multisigBIP32Path,\n  multisigPublicKeys,\n} from \"unchained-bitcoin\";\nimport updateState from \"./utils\";\nimport { SET_NETWORK } from \"../actions/settingsActions\";\nimport {\n  CHOOSE_CONFIRM_OWNERSHIP,\n  SET_OWNERSHIP_MULTISIG,\n  RESET_PUBLIC_KEY_IMPORTER,\n  RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_METHOD,\n  SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n} from \"../actions/ownershipActions\";\n\nconst initialPublicKeyImporterState = {\n  bip32Path: \"\",\n  method: \"\",\n  publicKey: \"\",\n};\n\nconst initialState = {\n  chosen: false,\n  publicKeyImporter: { ...initialPublicKeyImporterState },\n  network: MAINNET,\n  addressType: P2SH,\n  publicKeys: [],\n  address: \"\",\n  defaultBIP32Path: multisigBIP32Path(P2SH, MAINNET),\n};\n\nfunction updatePublicKeyImporterState(state, action, field) {\n  const publicKeyImporterChange = {};\n  publicKeyImporterChange[field] = action.value;\n  return {\n    ...state,\n    ...{\n      publicKeyImporter: {\n        ...state.publicKeyImporter,\n        ...publicKeyImporterChange,\n      },\n    },\n  };\n}\n\nfunction updateMultisig(state, action) {\n  const multisig = action.value;\n  const addressType = multisigAddressType(multisig);\n  const defaultBIP32Path = multisigBIP32Path(addressType, state.network);\n  return {\n    ...state,\n    ...{\n      network: state.network,\n      addressType,\n      publicKeys: multisigPublicKeys(multisig),\n      address: multisig.address,\n      defaultBIP32Path,\n    },\n  };\n}\n\nexport default (state = initialState, action) => {\n  const keyResetState = updatePublicKeyImporterState(\n    state,\n    { value: \"\" },\n    \"publicKey\"\n  );\n\n  switch (action.type) {\n    case CHOOSE_CONFIRM_OWNERSHIP:\n      return updateState(state, { chosen: true });\n    case SET_NETWORK:\n      return updateState(state, { network: action.value });\n    case SET_OWNERSHIP_MULTISIG:\n      return updateMultisig(state, action);\n    case SET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n      return updatePublicKeyImporterState(keyResetState, action, \"bip32Path\");\n    case SET_PUBLIC_KEY_IMPORTER_METHOD:\n      return updatePublicKeyImporterState(state, action, \"method\");\n    case SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY:\n      return updatePublicKeyImporterState(state, action, \"publicKey\");\n    case RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n      return updatePublicKeyImporterState(\n        state,\n        { value: state.defaultBIP32Path },\n        \"bip32Path\"\n      );\n    case RESET_PUBLIC_KEY_IMPORTER:\n      return {\n        ...state,\n        ...{\n          publicKeyImporter: {\n            ...state.publicKeyImporter,\n            ...{ bip32Path: state.defaultBIP32Path, publicKey: \"\" },\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n","import updateState from \"./utils\";\nimport {\n  SET_SIGNATURE_IMPORTER_NAME,\n  SET_SIGNATURE_IMPORTER_METHOD,\n  SET_SIGNATURE_IMPORTER_BIP32_PATH,\n  SET_SIGNATURE_IMPORTER_SIGNATURE,\n  SET_SIGNATURE_IMPORTER_PUBLIC_KEYS,\n  SET_SIGNATURE_IMPORTER_FINALIZED,\n  SET_SIGNATURE_IMPORTER_COMPLETE,\n} from \"../actions/signatureImporterActions\";\nimport {\n  SET_REQUIRED_SIGNERS,\n  RESET_TRANSACTION,\n} from \"../actions/transactionActions\";\n\nconst initialSignatureImporterState = {\n  name: \"\",\n  method: \"\",\n  publicKeys: [],\n  signature: [],\n  bip32Path: \"\",\n  finalized: false,\n};\n\nconst initialState = {};\n\nfunction setRequiredSigners(state, action) {\n  const signatureImporters = {};\n  for (\n    let signatureImporterNum = 1;\n    signatureImporterNum <= action.value;\n    signatureImporterNum += 1\n  ) {\n    signatureImporters[signatureImporterNum] = {\n      ...initialSignatureImporterState,\n      ...{ name: `Signature ${signatureImporterNum}` },\n    };\n  }\n  return signatureImporters;\n}\n\nfunction updateSignatureImporterState(state, action, field) {\n  const signatureImporterChange = {};\n  signatureImporterChange[field] = action.value;\n  const newState = {\n    ...state,\n  };\n  newState[action.number] = updateState(\n    state[action.number],\n    signatureImporterChange\n  );\n  return newState;\n}\n\nfunction finalizeSignatureImporterState(state, action) {\n  const newState = {\n    ...state,\n  };\n  newState[action.number] = updateState(state[action.number], action.value);\n  return newState;\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case RESET_TRANSACTION:\n      return { ...initialState };\n    case SET_REQUIRED_SIGNERS:\n      return setRequiredSigners(state, action);\n    case SET_SIGNATURE_IMPORTER_NAME:\n      return updateSignatureImporterState(state, action, \"name\");\n    case SET_SIGNATURE_IMPORTER_METHOD:\n      return updateSignatureImporterState(state, action, \"method\");\n    case SET_SIGNATURE_IMPORTER_BIP32_PATH:\n      return updateSignatureImporterState(state, action, \"bip32Path\");\n    case SET_SIGNATURE_IMPORTER_SIGNATURE:\n      return updateSignatureImporterState(state, action, \"signature\");\n    case SET_SIGNATURE_IMPORTER_PUBLIC_KEYS:\n      return updateSignatureImporterState(state, action, \"publicKeys\");\n    case SET_SIGNATURE_IMPORTER_FINALIZED:\n      return updateSignatureImporterState(state, action, \"finalized\");\n    case SET_SIGNATURE_IMPORTER_COMPLETE:\n      return finalizeSignatureImporterState(state, action);\n\n    default:\n      return state;\n  }\n};\n","import BigNumber from \"bignumber.js\";\nimport {\n  MAINNET,\n  P2SH,\n  estimateMultisigTransactionFee,\n  validateFeeRate,\n  validateFee,\n  validateOutputAmount,\n  satoshisToBitcoins,\n  bitcoinsToSatoshis,\n  validateAddress,\n  unsignedMultisigTransaction,\n} from \"unchained-bitcoin\";\nimport updateState from \"./utils\";\n\nimport { SET_NETWORK, SET_ADDRESS_TYPE } from \"../actions/settingsActions\";\nimport {\n  CHOOSE_PERFORM_SPEND,\n  SET_REQUIRED_SIGNERS,\n  SET_TOTAL_SIGNERS,\n  SET_INPUTS,\n  ADD_OUTPUT,\n  SET_OUTPUT_ADDRESS,\n  SET_OUTPUT_AMOUNT,\n  DELETE_OUTPUT,\n  SET_FEE_RATE,\n  SET_FEE,\n  FINALIZE_OUTPUTS,\n  RESET_OUTPUTS,\n  SET_TXID,\n  RESET_TRANSACTION,\n  SET_IS_WALLET,\n  SET_CHANGE_OUTPUT_INDEX,\n  UPDATE_AUTO_SPEND,\n  SET_SIGNING_KEY,\n  SET_CHANGE_ADDRESS,\n  SET_BALANCE_ERROR,\n  SET_SPEND_STEP,\n  SPEND_STEP_CREATE,\n} from \"../actions/transactionActions\";\n\nimport { RESET_NODES_SPEND } from \"../actions/walletActions\";\n\nfunction sortInputs(a, b) {\n  const x = a.txid.toLowerCase();\n  const y = b.txid.toLowerCase();\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (a.n < b.n) {\n    return -1;\n  }\n  if (a.n > b.n) {\n    return 1;\n  }\n  return 0;\n}\n\nexport const initialOutputState = () => ({\n  address: \"\",\n  amount: \"\",\n  amountSats: \"\",\n  addressError: \"\",\n  amountError: \"\",\n});\n\nconst initialOutputsState = () => [initialOutputState()];\n\nexport const initialState = () => ({\n  chosen: false,\n  network: MAINNET,\n  inputs: [],\n  inputsTotalSats: new BigNumber(0),\n  outputs: initialOutputsState(),\n  changeOutputIndex: 0,\n  feeRate: \"\",\n  feeRateError: \"\",\n  fee: \"\",\n  feeError: \"\",\n  finalizedOutputs: false,\n  txid: \"\",\n  balanceError: \"\",\n  addressType: P2SH,\n  requiredSigners: 2,\n  totalSigners: 3,\n  unsignedTransaction: {},\n  isWallet: false,\n  autoSpend: true,\n  changeAddress: \"\",\n  updatesComplete: true,\n  signingKeys: [0, 0], // default 2 required signers\n  spendingStep: SPEND_STEP_CREATE,\n});\n\nfunction updateInputs(state, action) {\n  const inputsTotalSats = action.value.reduce(\n    (accumulator, input) => accumulator.plus(input.amountSats),\n    new BigNumber(0)\n  );\n  return updateState(state, {\n    inputs: action.value.sort(sortInputs),\n    inputsTotalSats,\n  });\n}\n\nfunction calcOutputTotalSats(state) {\n  return state.outputs.reduce(\n    (accumulator, { amount }) =>\n      accumulator.plus(bitcoinsToSatoshis(new BigNumber(amount || 0))),\n    new BigNumber(0)\n  );\n}\n\nfunction setFeeForRate(state, feeRateString, nout) {\n  return satoshisToBitcoins(\n    estimateMultisigTransactionFee({\n      addressType: state.addressType,\n      numInputs: state.inputs.length,\n      numOutputs: nout,\n      m: state.requiredSigners,\n      n: state.totalSigners,\n      feesPerByteInSatoshis: feeRateString,\n    })\n  )\n    .toFixed(8)\n    .toString();\n}\n\nfunction deleteOutput(state, action) {\n  const newState = { ...state };\n  const newOutputs = [];\n  for (let i = 0; i < newState.outputs.length; i += 1) {\n    if (i !== action.number - 1) {\n      newOutputs.push(newState.outputs[i]);\n    } else if (action.number === newState.changeOutputIndex) {\n      newState.changeOutputIndex = 0;\n    }\n    if (action.number < newState.changeOutputIndex)\n      newState.changeOutputIndex -= 1;\n  }\n  return {\n    ...newState,\n    ...{\n      outputs: newOutputs,\n      fee: setFeeForRate(newState, newState.feeRate, newOutputs.length),\n    },\n  };\n}\n\nfunction updateFeeRate(state, action) {\n  const feeRateString = action.value;\n  const feeRateError = validateFeeRate(feeRateString);\n  const fee =\n    feeRateError === \"\"\n      ? setFeeForRate(state, feeRateString, state.outputs.length)\n      : \"\";\n\n  return updateState(state, {\n    feeRate: feeRateString,\n    feeRateError,\n    fee,\n    feeError: \"\",\n  });\n}\n\nfunction updateFee(state, action) {\n  const feeString = action.value;\n  const feeSats = bitcoinsToSatoshis(feeString);\n  const feeError = validateFee(feeSats, state.inputsTotalSats);\n\n  return updateState(state, {\n    fee: feeString,\n    feeError,\n    feeRateError: \"\",\n  });\n}\n\nfunction addOutput(state) {\n  const newOutputs = state.outputs.concat(initialOutputState());\n  return {\n    ...state,\n    ...{\n      outputs: newOutputs,\n      fee: setFeeForRate(state, state.feeRate, newOutputs.length),\n    },\n  };\n}\n\nfunction updateOutputAddress(state, action) {\n  const newOutputs = [...state.outputs];\n  const address = action.value;\n  let error = validateAddress(address, state.network);\n  if (error === \"\") {\n    for (\n      let inputIndex = 0;\n      inputIndex < state.inputs.length;\n      inputIndex += 1\n    ) {\n      const input = state.inputs[inputIndex];\n      if (input.multisig && address === input.multisig.address) {\n        error = \"Output address cannot equal input address.\";\n        break;\n      }\n    }\n  }\n  if (error === \"\") {\n    for (\n      let outputIndex = 0;\n      outputIndex < state.outputs.length;\n      outputIndex += 1\n    ) {\n      if (outputIndex !== action.number - 1) {\n        if (state.outputs[outputIndex].address === address) {\n          error = \"Duplicate output address.\";\n          break;\n        }\n      }\n    }\n  }\n  newOutputs[action.number - 1].address = address;\n  newOutputs[action.number - 1].addressError = error;\n  return {\n    ...state,\n    ...{ outputs: newOutputs },\n  };\n}\n\nfunction updateOutputAmount(state, action) {\n  const newOutputs = [...state.outputs];\n  let amount = action.value;\n  const amountSats = bitcoinsToSatoshis(BigNumber(amount));\n  let error = validateOutputAmount(amountSats, state.inputsTotalSats);\n\n  if (state.isWallet && error === \"Total input amount must be positive.\")\n    error = \"\";\n  if (state.isWallet && error === \"Output amount is too large.\") error = \"\";\n\n  const dp = BigNumber(amount).dp();\n  if (dp > 8) amount = amount.slice(0, 8 - dp);\n\n  newOutputs[action.number - 1].amount = amount;\n  newOutputs[action.number - 1].amountError = error;\n  newOutputs[action.number - 1].amountSats = error ? \"\" : amountSats;\n  return {\n    ...state,\n    ...{ outputs: newOutputs },\n  };\n}\n\nfunction finalizeOutputs(state, action) {\n  const unsignedTransaction = unsignedMultisigTransaction(\n    state.network,\n    state.inputs,\n    state.outputs\n  );\n  return {\n    ...state,\n    ...{ finalizedOutputs: action.value, unsignedTransaction },\n  };\n}\n\nfunction updateRequiredSigners(state, action) {\n  return updateState(state, {\n    requiredSigners: action.value,\n    signingKeys: Array(action.value).fill(0),\n  });\n}\n\nfunction updateSigningKey(state, action) {\n  const signingKeys = [...state.signingKeys];\n  signingKeys[action.number - 1] = action.value;\n  return updateState(state, { signingKeys });\n}\n\nfunction outputInitialStateForMode(state) {\n  return updateState(state, {\n    outputs: initialOutputsState(),\n    fee: \"\",\n    balanceError: \"\",\n    changeOutputIndex: 0,\n  });\n}\n\nfunction resetTransactionState(state) {\n  let newState = updateState(state, {\n    ...initialState(),\n    totalSigners: state.totalSigners,\n    network: state.network,\n    addressType: state.addressType,\n    isWallet: state.isWallet,\n    changeAddress: state.changeAddress,\n  });\n  newState = updateRequiredSigners(newState, { value: state.requiredSigners });\n  newState = outputInitialStateForMode(newState);\n  return newState;\n}\n\nfunction validateTransaction(state) {\n  let newState = { ...state };\n  // TODO: need less hacky way to supress error\n  if (\n    newState.outputs.find(\n      (output) => output.addressError !== \"\" || output.amountError !== \"\"\n    ) ||\n    newState.feeError !== \"\" ||\n    newState.feeRateError !== \"\" ||\n    newState.inputs.length === 0\n  ) {\n    return {\n      ...newState,\n      balanceError: \"\",\n    };\n  }\n  const feeSats = bitcoinsToSatoshis(new BigNumber(newState.fee));\n  const outputTotalSats = calcOutputTotalSats(newState);\n  if (!newState.inputsTotalSats.isEqualTo(outputTotalSats.plus(feeSats))) {\n    const diff = outputTotalSats.plus(feeSats).minus(newState.inputsTotalSats);\n    let balanceError = \"\";\n    if (diff.isNaN()) {\n      balanceError = \"Cannot calculate total.\";\n    } else {\n      newState = updateState(newState, { updatesComplete: true });\n      const action = diff.isLessThan(0) ? \"Increase\" : \"Decrease\";\n      balanceError = `${action} by ${satoshisToBitcoins(\n        diff.absoluteValue()\n      ).toFixed(8)}.`;\n    }\n    return {\n      ...newState,\n      balanceError,\n    };\n  }\n  const minFee = new BigNumber(setFeeForRate(newState, \"1\", 0));\n\n  if (new BigNumber(newState.fee).isLessThan(minFee)) {\n    return {\n      ...newState,\n      balanceError: `Fee is too small. Should be no less than ${bitcoinsToSatoshis(\n        minFee\n      )} satoshis.`,\n    };\n  }\n\n  return {\n    ...newState,\n    balanceError: \"\",\n  };\n}\n\nexport default (state = initialState(), action) => {\n  switch (action.type) {\n    case CHOOSE_PERFORM_SPEND:\n      return updateState(state, { chosen: true });\n    case SET_NETWORK:\n      return updateState(state, { network: action.value });\n    case SET_ADDRESS_TYPE:\n      return updateState(state, { addressType: action.value });\n    case SET_REQUIRED_SIGNERS:\n      return updateRequiredSigners(state, action);\n    case SET_TOTAL_SIGNERS:\n      return updateState(state, { totalSigners: action.value });\n    case SET_INPUTS:\n      return validateTransaction(updateInputs(state, action));\n    case ADD_OUTPUT:\n      return validateTransaction(addOutput(state, action));\n    case SET_CHANGE_OUTPUT_INDEX:\n      return updateState(state, { changeOutputIndex: action.value });\n    case SET_OUTPUT_ADDRESS:\n      return validateTransaction(updateOutputAddress(state, action));\n    case SET_OUTPUT_AMOUNT:\n      return validateTransaction(updateOutputAmount(state, action));\n    case DELETE_OUTPUT:\n      return validateTransaction(deleteOutput(state, action));\n    case SET_FEE_RATE:\n      return validateTransaction(updateFeeRate(state, action));\n    case SET_FEE:\n      return validateTransaction(updateFee(state, action));\n    case FINALIZE_OUTPUTS:\n      return finalizeOutputs(state, action);\n    case RESET_OUTPUTS:\n      return outputInitialStateForMode(state);\n    case SET_TXID:\n      return updateState(state, { txid: action.value });\n    case SET_IS_WALLET:\n      return updateState(state, { isWallet: true });\n    case RESET_TRANSACTION:\n      return resetTransactionState(state);\n    case UPDATE_AUTO_SPEND:\n      return updateState(state, { autoSpend: action.value });\n    case SET_SIGNING_KEY:\n      return updateSigningKey(state, action);\n    case SET_CHANGE_ADDRESS:\n      return updateState(state, { changeAddress: action.value });\n    case RESET_NODES_SPEND:\n      return updateInputs(state, { value: [] });\n    case SET_BALANCE_ERROR:\n      return updateState(state, { balanceError: action.value });\n    case SET_SPEND_STEP:\n      return updateState(state, { spendingStep: action.value });\n    default:\n      return state;\n  }\n};\n","import { PENDING } from \"unchained-wallets\";\n\nimport {\n  SET_KEYSTORE,\n  SET_KEYSTORE_NOTE,\n  SET_KEYSTORE_STATUS,\n} from \"../actions/keystoreActions\";\n\nconst initialState = {\n  type: \"\",\n  version: \"\",\n  note: \"\",\n  status: PENDING,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_KEYSTORE:\n      return {\n        ...state,\n        ...{ type: action.keystoreType, version: action.version },\n      };\n    case SET_KEYSTORE_NOTE:\n      return {\n        ...state,\n        ...{ note: action.value },\n      };\n    case SET_KEYSTORE_STATUS:\n      return {\n        ...state,\n        ...{ status: action.value },\n      };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport { MAINNET, TESTNET, TEST_FIXTURES } from \"unchained-bitcoin\";\nimport { ExportPublicKey } from \"unchained-wallets\";\n\nimport Test from \"./Test\";\n\nclass ExportPublicKeyTest extends Test {\n  // eslint-disable-next-line class-methods-use-this\n  postprocess(result) {\n    return result.pubkey ? result.pubkey : result;\n  }\n\n  name() {\n    return `Export ${this.params.network} public key at ${this.params.bip32Path}`;\n  }\n\n  description() {\n    return (\n      <p>\n        Export a public key at BIP32 path\n        <code>{this.params.bip32Path}</code>.\n      </p>\n    );\n  }\n\n  interaction() {\n    return ExportPublicKey({\n      keystore: this.params.keystore,\n      network: this.params.network,\n      bip32Path: this.params.bip32Path,\n    });\n  }\n\n  expected() {\n    return TEST_FIXTURES.nodes[this.params.bip32Path].pub;\n  }\n}\n\nconst publicKeyTests = (keystore) => [\n  new ExportPublicKeyTest({\n    keystore,\n    network: TESTNET,\n    bip32Path: \"m/45'/1'/0'/0/0\",\n  }),\n  new ExportPublicKeyTest({\n    keystore,\n    network: TESTNET,\n    bip32Path: \"m/48'/1'/0'/1'/0/0\",\n  }),\n  new ExportPublicKeyTest({\n    keystore,\n    network: TESTNET,\n    bip32Path: \"m/48'/1'/0'/2'/0/0\",\n  }),\n  new ExportPublicKeyTest({\n    keystore,\n    network: MAINNET,\n    bip32Path: \"m/45'/0'/0'/0/0\",\n  }),\n  new ExportPublicKeyTest({\n    keystore,\n    network: MAINNET,\n    bip32Path: \"m/48'/0'/0'/1'/0/0\",\n  }),\n  new ExportPublicKeyTest({\n    keystore,\n    network: MAINNET,\n    bip32Path: \"m/48'/0'/0'/2'/0/0\",\n  }),\n];\n\nexport default publicKeyTests;\n","import React from \"react\";\nimport { MAINNET, TESTNET, TEST_FIXTURES } from \"unchained-bitcoin\";\nimport { ExportExtendedPublicKey } from \"unchained-wallets\";\n\nimport Test from \"./Test\";\n\nclass ExportExtendedPublicKeyTest extends Test {\n  // eslint-disable-next-line class-methods-use-this\n  postprocess(result) {\n    return result.pubkey ? result.pubkey : result;\n  }\n\n  name() {\n    return `Export ${this.params.network} xpub at ${this.params.bip32Path}`;\n  }\n\n  description() {\n    return (\n      <p>\n        Export an extended public key at BIP32 path{\" \"}\n        <code>{this.params.bip32Path}</code>\n      </p>\n    );\n  }\n\n  interaction() {\n    return ExportExtendedPublicKey({\n      keystore: this.params.keystore,\n      network: this.params.network,\n      bip32Path: this.params.bip32Path,\n    });\n  }\n\n  expected() {\n    if (this.params.network === MAINNET)\n      return TEST_FIXTURES.nodes[this.params.bip32Path].xpub;\n    return TEST_FIXTURES.nodes[this.params.bip32Path].tpub;\n  }\n}\n\nconst extendedPublicKeyTests = (keystore) => [\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: TESTNET,\n    bip32Path: \"m/45'/0'/0'\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: TESTNET,\n    bip32Path: \"m/45'/0'/0'/0\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: TESTNET,\n    bip32Path: \"m/45'/0'/0'/0/0\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: TESTNET,\n    bip32Path: \"m/45'/0'/4'\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: TESTNET,\n    bip32Path: \"m/45'/0'/4'/0/0\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: TESTNET,\n    bip32Path: \"m/45'/0'/4'/6/2\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: TESTNET,\n    bip32Path: \"m/45'/0'/4'/99'\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: TESTNET,\n    bip32Path: \"m/45'/0'/4'/99'/0/0\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: TESTNET,\n    bip32Path: \"m/45'/0'/4'/99'/2147483647/3/1\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: MAINNET,\n    bip32Path: \"m/45'/0'/0'\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: MAINNET,\n    bip32Path: \"m/45'/0'/0'/0\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: MAINNET,\n    bip32Path: \"m/45'/0'/0'/0/0\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: MAINNET,\n    bip32Path: \"m/45'/0'/4'\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: MAINNET,\n    bip32Path: \"m/45'/0'/4'/0/0\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: MAINNET,\n    bip32Path: \"m/45'/0'/4'/6/2\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: MAINNET,\n    bip32Path: \"m/45'/0'/4'/99'\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: MAINNET,\n    bip32Path: \"m/45'/0'/4'/99'/0/0\",\n  }),\n  new ExportExtendedPublicKeyTest({\n    keystore,\n    network: MAINNET,\n    bip32Path: \"m/45'/0'/4'/99'/2147483647/3/1\",\n  }),\n];\n\nexport default extendedPublicKeyTests;\n","import React from \"react\";\nimport {\n  blockExplorerAddressURL,\n  satoshisToBitcoins,\n  unsignedMultisigTransaction,\n  TEST_FIXTURES,\n} from \"unchained-bitcoin\";\nimport { SignMultisigTransaction } from \"unchained-wallets\";\nimport { Box, Table, TableBody, TableRow, TableCell } from \"@material-ui/core\";\nimport { externalLink } from \"../utils\";\n\nimport Test from \"./Test\";\n\nclass SignMultisigTransactionTest extends Test {\n  // eslint-disable-next-line class-methods-use-this\n  postprocess(result) {\n    return result.signatures ? result.signatures : result;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  matches(expected, actual) {\n    return JSON.stringify(expected) === JSON.stringify(actual);\n  }\n\n  description() {\n    return (\n      <Box>\n        <p>Sign a transaction which{this.params.description}.</p>\n        <p>\n          <small>\n            This transaction is not meant to be broadcast, but just in case, the\n            output address is fixed and owned by Unchained Capital.\n          </small>\n        </p>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>Output Address:</TableCell>\n              <TableCell>\n                {externalLink(\n                  blockExplorerAddressURL(\n                    this.outputAddress(),\n                    this.params.network\n                  ),\n                  <code>{this.outputAddress()}</code>\n                )}\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Output Amount:</TableCell>\n              <TableCell>\n                {satoshisToBitcoins(this.outputAmountSats()).toString()} BTC\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Fees:</TableCell>\n              <TableCell>\n                {satoshisToBitcoins(this.feeSats()).toString()} BTC\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </Box>\n    );\n  }\n\n  inputsTotalSats() {\n    return this.params.inputs.reduce((total, input) => {\n      return total + input.amountSats.toNumber();\n    }, 0);\n  }\n\n  outputAddress() {\n    return this.params.outputs[0].address;\n  }\n\n  outputAmountSats() {\n    return this.params.outputs[0].amountSats.toNumber();\n  }\n\n  feeSats() {\n    return this.inputsTotalSats() - this.outputAmountSats();\n  }\n\n  unsignedTransaction() {\n    return unsignedMultisigTransaction(\n      this.params.network,\n      this.params.inputs,\n      this.params.outputs\n    );\n  }\n\n  interaction() {\n    return SignMultisigTransaction({\n      keystore: this.params.keystore,\n      network: this.params.network,\n      inputs: this.params.inputs,\n      outputs: this.params.outputs,\n      bip32Paths: this.params.bip32Paths,\n    });\n  }\n\n  expected() {\n    return this.params.signature;\n  }\n}\n\nexport function signingTests(keystore) {\n  return TEST_FIXTURES.transactions.map((fixture) => {\n    return new SignMultisigTransactionTest({\n      ...fixture,\n      ...{ keystore },\n    });\n  });\n}\n\nexport default signingTests;\n","import { TREZOR } from \"unchained-wallets\";\n\nimport publicKeyTests from \"./publicKeys\";\nimport extendedPublicKeyTests from \"./extendedPublicKeys\";\nimport { signingTests } from \"./signing\";\n\nexport default publicKeyTests(TREZOR)\n  .concat(extendedPublicKeyTests(TREZOR))\n  .concat(signingTests(TREZOR));\n","import { LEDGER } from \"unchained-wallets\";\n\nimport publicKeyTests from \"./publicKeys\";\nimport extendedPublicKeyTests from \"./extendedPublicKeys\";\nimport { signingTests } from \"./signing\";\n\nexport default publicKeyTests(LEDGER)\n  .concat(extendedPublicKeyTests(LEDGER))\n  .concat(signingTests(LEDGER));\n","import { HERMET } from \"unchained-wallets\";\n\nimport publicKeyTests from \"./publicKeys\";\nimport extendedPublicKeyTests from \"./extendedPublicKeys\";\nimport { signingTests } from \"./signing\";\n\nexport default publicKeyTests(HERMET)\n  .concat(extendedPublicKeyTests(HERMET))\n  .concat(signingTests(HERMET));\n","import { TREZOR, LEDGER, HERMIT } from \"unchained-wallets\";\nimport { TEST_FIXTURES } from \"unchained-bitcoin\";\n\nimport trezorTests from \"./trezor\";\nimport ledgerTests from \"./ledger\";\nimport hermitTests from \"./hermit\";\n\nconst SUITE = {};\n\nSUITE[TREZOR] = trezorTests;\nSUITE[LEDGER] = ledgerTests;\nSUITE[HERMIT] = hermitTests;\n\nconst SEED = TEST_FIXTURES.bip39Phrase;\n\nexport { SUITE, SEED };\n","import moment from \"moment\";\nimport { PENDING, ACTIVE } from \"unchained-wallets\";\n\nimport { SUITE } from \"../tests\";\n\nimport { SET_KEYSTORE } from \"../actions/keystoreActions\";\nimport {\n  START_TEST_SUITE_RUN,\n  SET_CURRENT_TEST_RUN,\n} from \"../actions/testSuiteRunActions\";\nimport {\n  START_TEST_RUN,\n  END_TEST_RUN,\n  RESET_TEST_RUN,\n  SET_TEST_RUN_NOTE,\n} from \"../actions/testRunActions\";\n\nconst initialTestRunState = {\n  startedAt: \"\",\n  endedAt: \"\",\n  status: PENDING,\n  message: \"\",\n  note: \"\",\n};\n\nconst initialState = {\n  started: false,\n  startedAt: \"\",\n  endedAt: \"\",\n  testRuns: [],\n  currentTestRunIndex: -1,\n};\n\nconst testRunsForKeystore = (action) => {\n  if (action.keystoreType === \"\") {\n    return [];\n  }\n  return (SUITE[action.keystoreType] || []).map((test) => {\n    return {\n      ...initialTestRunState,\n      ...{ test },\n    };\n  });\n};\n\nconst updatedTestRun = (state, testRunIndex, update) => {\n  return {\n    ...state,\n    ...{\n      testRuns: state.testRuns.map((testRun, i) => {\n        if (i === testRunIndex) {\n          return {\n            ...testRun,\n            ...update,\n          };\n        }\n        return testRun;\n      }),\n    },\n  };\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_KEYSTORE:\n      return {\n        ...state,\n        ...{ testRuns: testRunsForKeystore(action) },\n      };\n    case START_TEST_SUITE_RUN:\n      return {\n        ...state,\n        ...{\n          started: true,\n          startedAt: moment(),\n          currentTestRunIndex: 0,\n        },\n      };\n    case SET_CURRENT_TEST_RUN:\n      return {\n        ...state,\n        ...{ currentTestRunIndex: action.value },\n      };\n    case START_TEST_RUN:\n      return updatedTestRun(state, action.testRunIndex, {\n        startedAt: moment(),\n        status: ACTIVE,\n      });\n    case END_TEST_RUN:\n      return updatedTestRun(state, action.testRunIndex, {\n        endedAt: moment(),\n        status: action.status,\n        message: action.message,\n      });\n    case RESET_TEST_RUN:\n      return updatedTestRun(state, action.testRunIndex, initialTestRunState);\n    case SET_TEST_RUN_NOTE:\n      return updatedTestRun(state, action.testRunIndex, { note: action.note });\n    default:\n      return state;\n  }\n};\n","import {\n  SET_ERROR_NOTIFICATION,\n  CLEAR_ERROR_NOTIFICATION,\n} from \"../actions/errorNotificationActions\";\n\nconst initialState = {\n  message: \"\",\n  open: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_ERROR_NOTIFICATION:\n      return {\n        ...state,\n        ...{ open: true, message: action.value },\n      };\n    case CLEAR_ERROR_NOTIFICATION:\n      return {\n        ...state,\n        ...{ open: false, message: \"\" },\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\n\nimport settingsReducer from \"./settingsReducer\";\nimport clientReducer from \"./clientReducer\";\nimport braidReducer from \"./braidReducer\";\nimport quorumReducer from \"./quorumReducer\";\nimport addressReducer from \"./addressReducer\";\nimport walletReducer from \"./walletReducer\";\n\nimport ownershipReducer from \"./ownershipReducer\";\nimport signatureImportersReducer from \"./signatureImportersReducer\";\nimport transactionReducer from \"./transactionReducer\";\nimport keystoreReducer from \"./keystoreReducer\";\nimport testSuiteRunReducer from \"./testSuiteRunReducer\";\nimport errorNotificationReducer from \"./errorNotificationReducer\";\n\nimport {\n  UPDATE_DEPOSIT_SLICE,\n  UPDATE_CHANGE_SLICE,\n  RESET_WALLET,\n} from \"../actions/walletActions\";\n\nconst spendReducers = combineReducers({\n  ownership: ownershipReducer,\n  transaction: transactionReducer,\n  signatureImporters: signatureImportersReducer,\n});\n\nconst walletReducers = combineReducers({\n  deposits: braidReducer(UPDATE_DEPOSIT_SLICE),\n  change: braidReducer(UPDATE_CHANGE_SLICE),\n  common: walletReducer,\n});\n\nconst appReducer = combineReducers({\n  settings: settingsReducer,\n  client: clientReducer,\n  address: addressReducer,\n  spend: spendReducers,\n  quorum: quorumReducer,\n  wallet: walletReducers,\n  testSuiteRun: testSuiteRunReducer,\n  keystore: keystoreReducer,\n  errorNotification: errorNotificationReducer,\n});\n\nconst rootReducer = (state, action) => {\n  let newState = state;\n  if (action.type === RESET_WALLET || action.type === \"RESET_APP_STATE\")\n    newState = undefined;\n\n  return appReducer(newState, action);\n};\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport ReduxPromise from \"redux-promise\";\nimport thunk from \"redux-thunk\";\n\nimport App from \"./components/AppContainer\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport reducers from \"./reducers\";\n\n/* eslint-disable-next-line no-underscore-dangle */\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(ReduxPromise, thunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"app\")\n);\nregisterServiceWorker();\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndirectKeystoreInteraction = exports.DirectKeystoreInteraction = exports.UnsupportedInteraction = exports.KeystoreInteraction = exports.LEVELS = exports.STATES = exports.ERROR = exports.WARNING = exports.INFO = exports.ACTIVE = exports.PENDING = exports.UNSUPPORTED = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.promise\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.reflect.get\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nvar _bowser = _interopRequireDefault(require(\"bowser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Constant representing a keystore which is unsupported due to the\n * kind of interaction or combination of paramters provided.\n *\n * @type {string}\n */\nvar UNSUPPORTED = \"unsupported\";\n/**\n * Constant representing a keystore pending activation by the user.\n *\n * @type {string}\n */\n\nexports.UNSUPPORTED = UNSUPPORTED;\nvar PENDING = \"pending\";\n/**\n * Constant representing a keystore in active use.\n *\n * @type {string}\n */\n\nexports.PENDING = PENDING;\nvar ACTIVE = \"active\";\n/**\n * Constant for messages at the \"info\" level.\n *\n * @type {string}\n */\n\nexports.ACTIVE = ACTIVE;\nvar INFO = \"info\";\n/**\n * Constant for messages at the \"warning\" level.\n *\n * @type {string}\n */\n\nexports.INFO = INFO;\nvar WARNING = \"warning\";\n/**\n * Constant for messages at the \"error\" level.\n *\n * @type {string}\n */\n\nexports.WARNING = WARNING;\nvar ERROR = \"error\";\n/**\n * Enumeration of possible keystore states ([PENDING]{@link module:interaction.PENDING}|[ACTIVE]{@link module:interaction.ACTIVE}|[UNSUPPORTED]{@link module:interaction.UNSUPPORTED}).\n *\n * @constant\n * @enum {string}\n * @default\n *\n */\n\nexports.ERROR = ERROR;\nvar STATES = [PENDING, ACTIVE, UNSUPPORTED];\n/**\n * Enumeration of possible message levels ([INFO]{@link module:interaction.INFO}|[WARNING]{@link module:interaction.WARNING}|[ERROR]{@link module:interaction.ERROR}).\n *\n * @constant\n * @enum {string}\n * @default\n *\n */\n\nexports.STATES = STATES;\nvar LEVELS = [INFO, WARNING, ERROR];\n/**\n * Represents an image in a message returned by an interaction.\n *\n * @typedef module:interaction.MessageImage\n * @type {Object}\n * @property {string} label - a human-readable label for the image\n * @property {string} mimeType - the MIME type of the image\n * @property {string} data - base64-encoded image data\n */\n\n/**\n * Represents a message returned by an interaction.\n *\n * Message objects may have additional properties.\n *\n * @typedef module:interaction.Message\n * @type {Object}\n * @property {string} text - message text\n * @property {string} code - a dot-separated message code, e.g. `device.connect` (*Optional for submessages*)\n * @property {module:interaction.STATES} state - keystore state (*Optional for submessages*)\n * @property {module:interaction.LEVELS} level - message level (*Optional for submessages*)\n * @property {string} version - keystore version (can be a single version string or a range/spec) (*Optional*)\n * @property {string} action - keystore action user is expected to take (*Optional*)\n * @property {module:interaction.MessageImage} image - image for this message (*Optional*)\n * @property {Message[]} messages - submessages (*Optional*)\n */\n\n/**\n * Abstract base class for all keystore interactions.\n *\n * Concrete subclasses will want to subclass either\n * `DirectKeystoreInteraction` or `IndirectKeystoreInteraction`.\n *\n * Defines an API for subclasses to leverage and extend.\n *\n * - Subclasses should not have any internal state.  External tools\n *   (UI frameworks such as React) will maintain state and pass it\n *   into the interaction in order to display properly.\n *\n * - Subclasses may override the default constructor in order to allow\n *   users to pass in parameters.\n *\n * - Subclasses should override the `messages` method to customize\n *   what messages are surfaced in applications at what state of the\n *   user interface.\n *\n * - Subclasses should not try to catch all errors, instead letting\n *   them bubble up the stack.  This allows UI developers to deal with\n *   them as appropriate.\n *\n * @example\n * import {KeystoreInteraction, PENDING, ACTIVE, INFO} from \"unchained-wallets\";\n * class DoNothingInteraction extends KeystoreInteraction {\n *\n *   constructor({param}) {\n *     super();\n *     this.param = param;\n *   }\n *\n *   messages() {\n *     const messages = super.messages()\n *     messages.push({state: PENDING, level: INFO, text: `Interaction pending: ${this.param}` code: \"pending\"});\n *     messages.push({state: ACTIVE, level: INFO, text: `Interaction active: ${this.param}` code: \"active\"});\n *     return messages;\n *   }\n * \n * }\n *\n * // usage\n * const interaction = new DoNothingInteraction({param: \"foo\"});\n * console.log(interaction.messageTextFor({state: ACTIVE})); // \"Interaction active: foo\"\n * console.log(interaction.messageTextFor({state: PENDING})); // \"Interaction pending: foo\"\n *\n */\n\nexports.LEVELS = LEVELS;\n\nvar KeystoreInteraction =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Base constructor.\n   *\n   * Subclasses will often override this constructor to accept options.\n   *\n   * Just make sure to call `super()` if you do that!\n   *\n   * @constructor\n   */\n  function KeystoreInteraction() {\n    _classCallCheck(this, KeystoreInteraction);\n\n    this.environment = _bowser[\"default\"].getParser(window.navigator.userAgent);\n  }\n  /**\n   * Subclasses can override this method to indicate they are not\n   * supported.\n   *\n   * This method has access to whatever options may have been passed\n   * in by the constructor as well as the ability to interact with\n   * `this.environment` to determine whether the functionality is\n   * supported.  See the Bowser documentation for more details:\n   * https://github.com/lancedikson/bowser\n   *\n   * @returns {boolean} whether this interaction is supported\n   * @example\n   * isSupported() {\n   *   return this.environment.satisfies({\n   *     * declare browsers per OS\n   *     windows: {\n   *       \"internet explorer\": \">10\",\n   *     },\n   *     macos: {\n   *       safari: \">10.1\"\n   *     },\n   *\n   *     * per platform (mobile, desktop or tablet)\n   *     mobile: {\n   *       safari: '>=9',\n   *       'android browser': '>3.10'\n   *     },\n   *\n   *     * or in general\n   *     chrome: \"~20.1.1432\",\n   *     firefox: \">31\",\n   *     opera: \">=22\",\n   *\n   *     * also supports equality operator\n   *     chrome: \"=20.1.1432\", * will match particular build only\n   *\n   *     * and loose-equality operator\n   *     chrome: \"~20\",        * will match any 20.* sub-version\n   *     chrome: \"~20.1\"       * will match any 20.1.* sub-version (20.1.19 as well as 20.1.12.42-alpha.1)\n   *   });\n   * }\n   */\n\n\n  _createClass(KeystoreInteraction, [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return true;\n    }\n    /**\n     * Return messages array for this interaction.\n     *\n     * The messages array is a (possibly empty) array of [`Message`]{@link module:interaction.Message} objects.\n     *\n     * Subclasses should override this method and add messages as\n     * needed.  Make sure to call `super.messages()` to return an empty\n     * messages array for you to begin populating.\n     *\n     * @returns {module:interaction.Message[]} []\n     */\n\n  }, {\n    key: \"messages\",\n    value: function messages() {\n      var messages = [];\n      return messages;\n    }\n    /**\n     * Return messages filtered by the given options.\n     *\n     * Multiple options can be given at once to filter along multiple\n     * dimensions.\n     *\n     * @param {object} options - options argument\n     * @param {string} options.state - must equal this keystore state\n     * @param {string} options.level - must equal this message level\n     * @param {string|regexp} options.code - code must match this regular expression\n     * @param {string|regexp} options.text - text must match this regular expression\n     * @param {string|regexp} options.version - version must match this regular expression\n     * @returns {module:interaction.Message[]} matching `Message` objects\n     * @example\n     * import {PENDING, ACTIVE} from \"unchained-bitcoin\";\n     * // Create any interaction instance\n     * interaction.messages().forEach(msg => console.log(msg));\n     *   { code: \"device.connect\", state: \"pending\", level: \"info\", text: \"Please plug in your device.\"}\n     *   { code: \"device.active\", state: \"active\", level: \"info\", text: \"Communicating with your device...\"}\n     *   { code: \"device.active.warning\", state: \"active\", level: \"warning\", text: \"Your device will warn you about...\", version: \"2.x\"}\n     * interaction.messagesFor({state: PENDING}).forEach(msg => console.log(msg));\n     *   { code: \"device.connect\", state: \"pending\", level: \"info\", text: \"Please plug in your device.\"}\n     * interaction.messagesFor({code: ACTIVE}).forEach(msg => console.log(msg));\n     *   { code: \"device.active\", state: \"active\", level: \"info\", text: \"Communicating with your device...\"}\n     *   { code: \"device.active.warning\", state: \"active\", level: \"warning\", text: \"Your device will warn you about...\", version: \"2.x\"}\n     * interaction.messagesFor({version: /^2/}).forEach(msg => console.log(msg));\n     *   { code: \"device.active\", state: \"active\", level: \"warning\", text: \"Your device will warn you about...\", version: \"2.x\"}\n     */\n\n  }, {\n    key: \"messagesFor\",\n    value: function messagesFor(_ref) {\n      var state = _ref.state,\n          level = _ref.level,\n          code = _ref.code,\n          text = _ref.text,\n          version = _ref.version;\n      return this.messages().filter(function (message) {\n        if (state && message.state !== state) {\n          return false;\n        }\n\n        if (level && message.level !== level) {\n          return false;\n        }\n\n        if (code && !(message.code || '').match(code)) {\n          return false;\n        }\n\n        if (text && !(message.text || '').match(text)) {\n          return false;\n        }\n\n        if (version && !(message.version || '').match(version)) {\n          return false;\n        }\n\n        return true;\n      });\n    }\n    /**\n     * Return whether there are any messages matching the given options.\n     *\n     * @param {object} options - options argument\n     * @param {string} options.state - must equal this keystore state\n     * @param {string} options.level - must equal this message level\n     * @param {string|regexp} options.code - code must match this regular expression\n     * @param {string|regexp} options.text - text must match this regular expression\n     * @param {string|regexp} options.version - version must match this regular expression\n     * @returns {boolean} - whether any messages match the given filters\n     */\n\n  }, {\n    key: \"hasMessagesFor\",\n    value: function hasMessagesFor(_ref2) {\n      var state = _ref2.state,\n          level = _ref2.level,\n          code = _ref2.code,\n          text = _ref2.text,\n          version = _ref2.version;\n      return this.messagesFor({\n        state: state,\n        level: level,\n        code: code,\n        text: text,\n        version: version\n      }).length > 0;\n    }\n    /**\n     * Return the first message matching the given options (or `null` if none is found).\n     *\n     * @param {object} options - options argument\n     * @param {string} options.state - must equal this keystore state\n     * @param {string} options.level - must equal this message level\n     * @param {string|regexp} options.code - code must match this regular expression\n     * @param {string|regexp} options.text - text must match this regular expression\n     * @param {string|regexp} options.version - version must match this regular expression\n     * @returns {module:interaction.Message|null} the first matching `Message` object (or `null` if none is found)\n     */\n\n  }, {\n    key: \"messageFor\",\n    value: function messageFor(_ref3) {\n      var state = _ref3.state,\n          level = _ref3.level,\n          code = _ref3.code,\n          text = _ref3.text,\n          version = _ref3.version;\n      var messages = this.messagesFor({\n        state: state,\n        level: level,\n        code: code,\n        text: text,\n        version: version\n      });\n\n      if (messages.length > 0) {\n        return messages[0];\n      }\n\n      return null;\n    }\n    /**\n     * Retrieve the text of the first message matching the given options\n     * (or `null` if none is found).\n     *\n     * @param {object} options - options argument\n     * @param {string} options.state - must equal this keystore state\n     * @param {string} options.level - must equal this message level\n     * @param {string|regexp} options.code - code must match this regular expression\n     * @param {string|regexp} options.text - text must match this regular expression\n     * @param {string|regexp} options.version - version must match this regular expression\n     * @returns {string|null} the text of the first matching message (or `null` if none is found)\n     */\n\n  }, {\n    key: \"messageTextFor\",\n    value: function messageTextFor(_ref4) {\n      var state = _ref4.state,\n          level = _ref4.level,\n          code = _ref4.code,\n          text = _ref4.text,\n          version = _ref4.version;\n      var message = this.messageFor({\n        state: state,\n        level: level,\n        code: code,\n        text: text,\n        version: version\n      });\n      return message ? message.text : null;\n    }\n  }]);\n\n  return KeystoreInteraction;\n}();\n/**\n * Class used for describing an unsupported interaction.\n *\n * - Always returns `false` when the `isSupported` method is called.\n *\n * - Has a keystore state `unsupported` message at the `error` level.\n *\n * - Throws errors when attempting to call API methods such as `run`,\n *   `request`, and `parse`.\n *\n * @extends {module:interaction.KeystoreInteraction}\n * @example\n * import {UnsupportedInteraction} from \"unchained-wallets\";\n * const interaction = new UnsupportedInteraction({text: \"failure text\", code: \"fail\"});\n * console.log(interaction.isSupported()); // false\n *\n */\n\n\nexports.KeystoreInteraction = KeystoreInteraction;\n\nvar UnsupportedInteraction =\n/*#__PURE__*/\nfunction (_KeystoreInteraction) {\n  _inherits(UnsupportedInteraction, _KeystoreInteraction);\n\n  /**\n   * Accepts parameters to describe what is unsupported and why.\n   *\n   * The `text` should be human-readable.  The `code` is for machines.\n   *\n   * @param {object} options - options argument\n   * @param {string} options.text - the text of the error message\n   * @param {string} options.code - the code of the error message\n   * @constructor\n   */\n  function UnsupportedInteraction(_ref5) {\n    var _this;\n\n    var text = _ref5.text,\n        code = _ref5.code;\n\n    _classCallCheck(this, UnsupportedInteraction);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UnsupportedInteraction).call(this));\n    _this.text = text;\n    _this.code = code;\n    return _this;\n  }\n  /**\n   * By design, this method always returns false.\n   *\n   * @returns {false} Always.\n   */\n\n\n  _createClass(UnsupportedInteraction, [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return false;\n    }\n    /**\n     * Returns a single `error` level message at the `unsupported`\n     * state.\n     *\n     * @returns {module:interaction.Message[]} the messages for this class\n     */\n\n  }, {\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(UnsupportedInteraction.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: UNSUPPORTED,\n        level: ERROR,\n        code: this.code,\n        text: this.text\n      });\n      return messages;\n    }\n    /**\n     * Throws an error.\n     *\n     * @returns {void}\n     * @throws An error containing this `this.text`.\n     *\n     */\n\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                throw new Error(this.text);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function run() {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n    /**\n     * Throws an error.\n     *\n     * @returns {void}\n     * @throws An error containing this `this.text`.\n     *\n     */\n\n  }, {\n    key: \"request\",\n    value: function request() {\n      throw new Error(this.text);\n    }\n    /**\n     * Throws an error.\n     *\n     * @returns {void}\n     * @throws An error containing this `this.text`.\n     *\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      throw new Error(this.text);\n    }\n  }]);\n\n  return UnsupportedInteraction;\n}(KeystoreInteraction);\n/**\n * Base class for direct keystore interactions.\n *\n * Subclasses *must* implement a `run` method which communicates\n * directly with the keystore.  This method must be asynchronous\n * (return a `Promise`) to accommodate delays with network, devices,\n * &c.\n *\n * @example\n * import {DirectKeystoreInteraction} from \"unchained-wallets\";\n * class SimpleDirectInteraction extends DirectKeystoreInteraction {   *\n *\n *   constructor({param}) {\n *     super();\n *     this.param = param;\n *   }\n *\n *   async run() {\n *     // Or do something complicated...\n *     return this.param;\n *   }\n * }\n *\n * const interaction = new SimpleDirectInteraction({param: \"foo\"});\n *\n * const result = await interaction.run();\n * console.log(result);\n * // \"foo\"\n *\n */\n\n\nexports.UnsupportedInteraction = UnsupportedInteraction;\n\nvar DirectKeystoreInteraction =\n/*#__PURE__*/\nfunction (_KeystoreInteraction2) {\n  _inherits(DirectKeystoreInteraction, _KeystoreInteraction2);\n\n  /**\n   * Sets the `this.direct` property to `true`.  This property can be\n   * utilized when introspecting on interaction classes..\n   *\n   * @constructor\n   */\n  function DirectKeystoreInteraction() {\n    var _this2;\n\n    _classCallCheck(this, DirectKeystoreInteraction);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DirectKeystoreInteraction).call(this));\n    _this2.direct = true;\n    return _this2;\n  }\n  /**\n   * Initiate the intended interaction and return a result.\n   *\n   * Subclasses *must* override this function.  This function must\n   * always return a promise as it is designed to be called within an\n   * `await` block.\n   *\n   * @returns {Promise} Does the work of interacting with the keystore.\n   *\n   */\n\n\n  _createClass(DirectKeystoreInteraction, [{\n    key: \"run\",\n    value: function () {\n      var _run2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                throw new Error(\"Override the `run` method in this interaction.\");\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function run() {\n        return _run2.apply(this, arguments);\n      }\n\n      return run;\n    }()\n    /**\n     * Throws an error.\n     *\n     * @throws An error since this is a direct interaction.\n     * @returns {void}\n     *\n     */\n\n  }, {\n    key: \"request\",\n    value: function request() {\n      throw new Error(\"This interaction is direct and does not support a `request` method.\");\n    }\n    /**\n     * Throws an error.\n     *\n     * @throws An error since this is a direct interaction.\n     * @returns {void}\n     *\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      throw new Error(\"This interaction is direct and does not support a `parse` method.\");\n    }\n  }]);\n\n  return DirectKeystoreInteraction;\n}(KeystoreInteraction);\n/**\n * Base class for indirect keystore interactions.\n *\n * Subclasses *must* implement two methods: `request` and `parse`.\n * Application code will pass the result of calling `request` to some\n * external process (HTTP request, QR code, &c.) and pass the response\n * to `parse` which should return a result.\n *\n * @example\n * import {IndirectKeystoreInteraction} from \"unchained-wallets\";\n * class SimpleIndirectInteraction extends IndirectKeystoreInteraction {   *\n *\n *   constructor({param}) {\n *     super();\n *     this.param = param;\n *   }\n *\n *   async request() {\n *     // Or do something complicated...\n *     return this.param;\n *   }\n *\n *   parse(response) {\n *     // Or do something complicated with `response`...\n *     return response;\n *   }\n *\n * }\n *\n * const interaction = new SimpleIndirectInteraction({param: \"foo\"});\n *\n * const request = interaction.request();\n * const response = \"bar\"; // Or do something complicated with `request`\n * const result = interaction.parse(response);\n * console.log(result);\n * // \"bar\"\n *\n */\n\n\nexports.DirectKeystoreInteraction = DirectKeystoreInteraction;\n\nvar IndirectKeystoreInteraction =\n/*#__PURE__*/\nfunction (_KeystoreInteraction3) {\n  _inherits(IndirectKeystoreInteraction, _KeystoreInteraction3);\n\n  /**\n   * Sets the `this.indirect` property to `true`.  This property can\n   * be utilized when introspecting on interaction classes..\n   *\n   * @constructor\n   */\n  function IndirectKeystoreInteraction() {\n    var _this3;\n\n    _classCallCheck(this, IndirectKeystoreInteraction);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(IndirectKeystoreInteraction).call(this));\n    _this3.indirect = true;\n    return _this3;\n  }\n  /**\n   * Provide the request.\n   *\n   * Subclasses *may* override this function.  It can return any kind\n   * of object.  Strings, data for QR codes, HTTP requests, command\n   * lines, functions, &c. are all allowed.  Whatever is appropriate\n   * for the interaction.\n   *\n   * @returns {Object} the request data\n   *\n   */\n\n\n  _createClass(IndirectKeystoreInteraction, [{\n    key: \"request\",\n    value: function request() {\n      throw new Error(\"Override the `request` method in this interaction.\");\n    }\n    /**\n     * Parse the response into a result.\n     *\n     * Subclasses *must* override this function.  It must accept an\n     * appropriate kind of `response` object and return the final result\n     * of this interaction.\n     *\n     * @param {Object} response - the raw response\n     * @returns {Object} the parsed response\n     *\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(response) {\n      console.log(response);\n      throw new Error(\"Override the `parse` method in this interaction.\");\n    }\n    /**\n     * Throws an error.\n     *\n     * @throws An error since this is an indirect interaction.\n     * @returns {void}\n     *\n     */\n\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run3 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                throw new Error(\"This interaction is indirect and does not support a `run` method.\");\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function run() {\n        return _run3.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }]);\n\n  return IndirectKeystoreInteraction;\n}(KeystoreInteraction);\n\nexports.IndirectKeystoreInteraction = IndirectKeystoreInteraction;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  VERSION: true,\n  DIRECT_KEYSTORES: true,\n  INDIRECT_KEYSTORES: true,\n  KEYSTORES: true,\n  GetMetadata: true,\n  ExportPublicKey: true,\n  ExportExtendedPublicKey: true,\n  SignMultisigTransaction: true,\n  ConfirmMultisigAddress: true\n};\nexports.GetMetadata = GetMetadata;\nexports.ExportPublicKey = ExportPublicKey;\nexports.ExportExtendedPublicKey = ExportExtendedPublicKey;\nexports.SignMultisigTransaction = SignMultisigTransaction;\nexports.ConfirmMultisigAddress = ConfirmMultisigAddress;\nexports.KEYSTORES = exports.INDIRECT_KEYSTORES = exports.DIRECT_KEYSTORES = exports.VERSION = void 0;\n\nrequire(\"core-js/modules/es6.object.define-properties\");\n\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nvar _package = require(\"../package.json\");\n\nvar _interaction = require(\"./interaction\");\n\nObject.keys(_interaction).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _interaction[key];\n    }\n  });\n});\n\nvar _trezor = require(\"./trezor\");\n\nObject.keys(_trezor).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _trezor[key];\n    }\n  });\n});\n\nvar _ledger = require(\"./ledger\");\n\nObject.keys(_ledger).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _ledger[key];\n    }\n  });\n});\n\nvar _hermit = require(\"./hermit\");\n\nObject.keys(_hermit).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _hermit[key];\n    }\n  });\n});\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Current unchained-wallets version.\n *\n * @type {string}\n */\nvar VERSION = _package.version;\n/**\n * Enumeration of keystores which support direct interactions.\n *\n * @constant\n * @enum {string}\n * @default\n */\n\nexports.VERSION = VERSION;\nvar DIRECT_KEYSTORES = {\n  TREZOR: _trezor.TREZOR,\n  LEDGER: _ledger.LEDGER\n};\n/**\n * Enumeration of keystores which support indirect interactions.\n *\n * @constant\n * @enum {string}\n * @default\n */\n\nexports.DIRECT_KEYSTORES = DIRECT_KEYSTORES;\nvar INDIRECT_KEYSTORES = {\n  HERMIT: _hermit.HERMIT\n};\n/**\n * Enumeration of supported keystores.\n *\n * @type {string[]}\n */\n\nexports.INDIRECT_KEYSTORES = INDIRECT_KEYSTORES;\n\nvar KEYSTORES = _objectSpread({}, DIRECT_KEYSTORES, {}, INDIRECT_KEYSTORES);\n/**\n * Return an interaction class for obtaining metadata from the given\n * `keystore`.\n *\n * **Supported keystores:** Trezor, Ledger\n *\n * @param {Object} options - options argument\n * @param {KEYSTORES} options.keystore - keystore to use\n * @return {module:interaction.KeystoreInteraction} keystore-specific interaction instance\n * @example\n * import {GetMetadata, TREZOR} from \"unchained-wallets\";\n * // Works similarly for Ledger.\n * const interaction = GetMetadata({keystore: TREZOR});\n * const metadata = await interaction.run();\n */\n\n\nexports.KEYSTORES = KEYSTORES;\n\nfunction GetMetadata(_ref) {\n  var keystore = _ref.keystore;\n\n  switch (keystore) {\n    case _trezor.TREZOR:\n      return new _trezor.TrezorGetMetadata();\n\n    case _ledger.LEDGER:\n      return new _ledger.LedgerGetMetadata();\n\n    default:\n      return new _interaction.UnsupportedInteraction({\n        code: \"unsupported\",\n        text: \"This keystore does not return a version.\"\n      });\n  }\n}\n/**\n * Return an interaction class for exporting a public key from the\n * given `keystore` for the given `bip32Path` and `network`.\n *\n * **Supported keystores:** Trezor, Ledger, Hermit\n *\n * @param {Object} options - options argument\n * @param {KEYSTORES} options.keystore - keystore to use\n * @param {string} options.network - bitcoin network\n * @param {string} options.bip32Path - the BIP32 path of the HD node of the public key\n * @return {module:interaction.KeystoreInteraction} keystore-specific interaction instance\n * @example\n * import {MAINNET} from \"unchained-bitcoin\";\n * import {ExportPublicKey, TREZOR, HERMIT} from \"unchained-wallets\";\n * // Works similarly for Ledger\n * const interaction = ExportPublicKey({keystore: TREZOR, network: MAINNET, bip32Path: \"m/45'/0'/0'/0/0\"});\n * const publicKey = await interaction.run();\n */\n\n\nfunction ExportPublicKey(_ref2) {\n  var keystore = _ref2.keystore,\n      network = _ref2.network,\n      bip32Path = _ref2.bip32Path;\n\n  switch (keystore) {\n    case _trezor.TREZOR:\n      return new _trezor.TrezorExportPublicKey({\n        network: network,\n        bip32Path: bip32Path\n      });\n\n    case _ledger.LEDGER:\n      return new _ledger.LedgerExportPublicKey({\n        bip32Path: bip32Path\n      });\n\n    case _hermit.HERMIT:\n      return new _hermit.HermitExportPublicKey({\n        bip32Path: bip32Path\n      });\n\n    default:\n      return new _interaction.UnsupportedInteraction({\n        code: \"unsupported\",\n        text: \"This keystore is not supported when exporting public keys.\"\n      });\n  }\n}\n/**\n * Return an interaction class for exporting an extended public key\n * from the given `keystore` for the given `bip32Path` and `network`.\n *\n * **Supported keystores:** Trezor, Hermit, Ledger\n *\n *\n * @param {Object} options - options argument\n * @param {KEYSTORES} options.keystore - keystore to use\n * @param {string} options.network - bitcoin network\n * @param {string} options.bip32Path - the BIP32 path of the HD node of the extended public key\n * @return {module:interaction.KeystoreInteraction} keystore-specific interaction instance\n * @example\n * import {MAINNET} from \"unchained-bitcoin\";\n * import {ExportExtendedPublicKey, TREZOR, HERMIT} from \"unchained-wallets\";\n * // Works similarly for Ledger\n * const interaction = ExportExtendedPublicKey({keystore: TREZOR, network: MAINNET, bip32Path: \"m/45'/0'/0'/0/0\"});\n * const xpub = await interaction.run();\n */\n\n\nfunction ExportExtendedPublicKey(_ref3) {\n  var keystore = _ref3.keystore,\n      network = _ref3.network,\n      bip32Path = _ref3.bip32Path;\n\n  switch (keystore) {\n    case _trezor.TREZOR:\n      return new _trezor.TrezorExportExtendedPublicKey({\n        network: network,\n        bip32Path: bip32Path\n      });\n\n    case _hermit.HERMIT:\n      return new _hermit.HermitExportExtendedPublicKey({\n        bip32Path: bip32Path\n      });\n\n    case _ledger.LEDGER:\n      return new _ledger.LedgerExportExtendedPublicKey({\n        network: network,\n        bip32Path: bip32Path\n      });\n\n    default:\n      return new _interaction.UnsupportedInteraction({\n        code: \"unsupported\",\n        text: \"This keystore is not supported when exporting extended public keys.\"\n      });\n  }\n}\n/**\n * Return an interaction class for signing a multisig transaction with\n * the given `keystore`.\n *\n * The inputs are objects which have `txid`, `index`, and a `multisig`\n * object, the last which is a `Multisig` object from\n * `unchained-bitcoin`.\n *\n * The outputs are objects which have `address` and `amountSats` (an\n * integer).\n *\n * `bip32Paths` is an array of BIP32 paths for the public keys on this\n * device, one for each input.\n *\n * **Supported keystores:** Trezor, Ledger, Hermit\n *\n *\n * @param {Object} options - options argument\n * @param {KEYSTORES} options.keystore - keystore to use\n * @param {string} options.network - bitcoin network\n * @param {object[]} options.inputs - transaction inputs\n * @param {object[]} options.outputs - transaction outputs\n * @param {string[]} options.bip32Paths - the BIP32 paths on this device corresponding to a public key in each input\n * @return {module:interaction.KeystoreInteraction} keystore-specific interaction instance\n * @example\n * import {\n *   generateMultisigFromHex, TESTNET, P2SH,\n * } from \"unchained-bitcoin\";\n * import {SignMultisigTransaction, TREZOR} from \"unchained-wallets\";\n * const redeemScript = \"5...ae\";\n * const inputs = [\n *   {\n *     txid: \"8d276c76b3550b145e44d35c5833bae175e0351b4a5c57dc1740387e78f57b11\",\n *     index: 1,\n *     multisig: generateMultisigFromHex(TESTNET, P2SH, redeemScript),\n *     amountSats: '1234000'\n *   },\n *   // other inputs...\n * ];\n * const outputs = [\n *   {\n *     amountSats: '1299659',\n *     address: \"2NGHod7V2TAAXC1iUdNmc6R8UUd4TVTuBmp\"\n *   },\n *   // other outputs...\n * ];\n * const interaction = SignMultisigTransaction({\n *   keystore: TREZOR, // works the same for Ledger\n *   network: TESTNET,\n *   inputs,\n *   outputs,\n *   bip32Paths: [\"m/45'/0'/0'/0\", // add more, 1 per input],\n * });\n * const signature = await interaction.run();\n * console.log(signatures);\n * // [\"ababab...\", // 1 per input]\n *\n */\n\n\nfunction SignMultisigTransaction(_ref4) {\n  var keystore = _ref4.keystore,\n      network = _ref4.network,\n      inputs = _ref4.inputs,\n      outputs = _ref4.outputs,\n      bip32Paths = _ref4.bip32Paths;\n\n  switch (keystore) {\n    case _trezor.TREZOR:\n      return new _trezor.TrezorSignMultisigTransaction({\n        network: network,\n        inputs: inputs,\n        outputs: outputs,\n        bip32Paths: bip32Paths\n      });\n\n    case _ledger.LEDGER:\n      return new _ledger.LedgerSignMultisigTransaction({\n        network: network,\n        inputs: inputs,\n        outputs: outputs,\n        bip32Paths: bip32Paths\n      });\n\n    case _hermit.HERMIT:\n      return new _hermit.HermitSignTransaction({\n        inputs: inputs,\n        outputs: outputs,\n        bip32Paths: bip32Paths\n      });\n\n    default:\n      return new _interaction.UnsupportedInteraction({\n        code: \"unsupported\",\n        text: \"This keystore is not supported when signing multisig transactions.\"\n      });\n  }\n}\n/**\n * Return an interaction class for confirming a multisig addreess with\n * the given `keystore`.\n *\n * The `multisig` parameter is a `Multisig` object from\n * `unchained-bitcoin`.\n *\n * `bip32Path` is the BIP32 path for the publiic key in the address on\n * this device.\n *\n * **Supported keystores:** Trezor\n *\n * @param {Object} options - options argument\n * @param {KEYSTORES} options.keystore - keystore to use\n * @param {string} options.network - bitcoin network\n * @param {object} options.multisig - `Multisig` object representing the address\n * @param {string} options.bip32Path - the BIP32 path on this device containing a public key from the address\n * @return {module:interaction.KeystoreInteraction} keystore-specific interaction instance\n * @example\n * import {\n *   generateMultisigFromHex, TESTNET, P2SH,\n * } from \"unchained-bitcoin\";\n * import {ConfirmMultisigAddress, TREZOR} from \"unchained-wallets\";\n * const redeemScript = \"5...ae\";\n * const multisig = generateMultisigFromHex(TESTNET, P2SH, redeemScript);\n * const interaction = ConfirmMultisigAddress({\n *   keystore: TREZOR,\n *   network: TESTNET,\n *   multisig,\n *   bip32Path: \"m/45'/1'/0'/0/0\",\n * });\n * await interaction.run();\n *\n */\n\n\nfunction ConfirmMultisigAddress(_ref5) {\n  var keystore = _ref5.keystore,\n      network = _ref5.network,\n      bip32Path = _ref5.bip32Path,\n      multisig = _ref5.multisig;\n\n  switch (keystore) {\n    case _trezor.TREZOR:\n      return new _trezor.TrezorConfirmMultisigAddress({\n        network: network,\n        bip32Path: bip32Path,\n        multisig: multisig\n      });\n\n    default:\n      return new _interaction.UnsupportedInteraction({\n        code: \"unsupported\",\n        text: \"This keystore is not supported when confirming multisig addresses.\"\n      });\n  }\n}"],"sourceRoot":""}